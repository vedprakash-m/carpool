{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAQrB,QAAA,0CAA0C,GAAG,OAAO,CAAC;AACrD,QAAA,iBAAiB,GAAG,KAAK,CAAC;AAC1B,QAAA,gCAAgC,GAAG,kCAAkC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { AzureMonitorOpenTelemetryOptions as DistroOptions, InstrumentationOptions as DistroInstrumentationOptions } from \"@azure/monitor-opentelemetry\";\r\nimport { SeverityNumber } from \"@opentelemetry/api-logs\";\r\nimport { InstrumentationConfig } from \"@opentelemetry/instrumentation\";\r\nimport { OTLPExporterNodeConfigBase } from \"@opentelemetry/otlp-exporter-base\";\r\n\r\n\r\nexport const APPLICATION_INSIGHTS_OPENTELEMETRY_VERSION = \"3.6.0\";\r\nexport const DEFAULT_ROLE_NAME = \"Web\";\r\nexport const AZURE_MONITOR_STATSBEAT_FEATURES = \"AZURE_MONITOR_STATSBEAT_FEATURES\";\r\n\r\n/**\r\n * Azure Monitor OpenTelemetry Options\r\n */\r\nexport interface AzureMonitorOpenTelemetryOptions extends DistroOptions {\r\n  /**\r\n   * Sets the state of exception tracking (enabled by default)\r\n   * if true uncaught exceptions will be sent to Application Insights\r\n   */\r\n  enableAutoCollectExceptions?: boolean;\r\n  /** OTLP Trace Exporter Configuration */\r\n  otlpTraceExporterConfig?: OTLPExporterConfig;\r\n  /** OTLP Metric Exporter Configuration */\r\n  otlpMetricExporterConfig?: OTLPExporterConfig;\r\n  /** OTLP Log Exporter Configuration */\r\n  otlpLogExporterConfig?: OTLPExporterConfig;\r\n  /**\r\n   * Sets the state of performance tracking (enabled by default)\r\n   * if true performance counters will be collected every second and sent to Azure Monitor\r\n   */\r\n  enableAutoCollectPerformance?: boolean;\r\n}\r\n\r\nexport interface InstrumentationOptions extends DistroInstrumentationOptions {\r\n  /** Console Instrumentation Config */\r\n  console?: InstrumentationConfig & { logSendingLevel?: SeverityNumber };\r\n}\r\n\r\n/**\r\n * OTLP Exporter Options\r\n */\r\nexport interface OTLPExporterConfig extends OTLPExporterNodeConfigBase {\r\n  /** Enable/Disable OTLP Exporter */\r\n  enabled?: boolean;\r\n}\r\n\r\nexport interface InstrumentationOptionsType {\r\n  [key: string]: { enabled: boolean }\r\n}\r\n"]}