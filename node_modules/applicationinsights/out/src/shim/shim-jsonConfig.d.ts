/// <reference types="node" />
/// <reference types="node" />
import * as http from "http";
import * as https from "https";
import * as azureCoreAuth from "@azure/core-auth";
import { DistributedTracingModes, IDisabledExtendedMetrics, IJsonConfig, IWebInstrumentationConfig } from "./types";
export declare class ShimJsonConfig implements IJsonConfig {
    private static _instance;
    endpointUrl: string;
    connectionString: string;
    disableAllExtendedMetrics: boolean;
    extendedMetricDisablers: string;
    proxyHttpUrl: string;
    proxyHttpsUrl: string;
    noDiagnosticChannel: boolean;
    noHttpAgentKeepAlive: boolean;
    noPatchModules: string;
    maxBatchSize: number;
    maxBatchIntervalMs: number;
    disableAppInsights: boolean;
    samplingPercentage: number;
    correlationHeaderExcludedDomains: string[];
    httpAgent: http.Agent;
    httpsAgent: https.Agent;
    ignoreLegacyHeaders: boolean;
    aadTokenCredential?: azureCoreAuth.TokenCredential;
    enableAutoCollectConsole: boolean;
    enableLoggerErrorToTrace: boolean;
    enableAutoCollectPerformance: boolean;
    enableAutoCollectExternalLoggers: boolean;
    enableAutoCollectPreAggregatedMetrics: boolean;
    enableAutoCollectHeartbeat: boolean;
    enableAutoCollectRequests: boolean;
    enableAutoCollectDependencies: boolean;
    enableAutoDependencyCorrelation: boolean;
    enableAutoCollectIncomingRequestAzureFunctions: boolean;
    enableSendLiveMetrics: boolean;
    enableUseDiskRetryCaching: boolean;
    enableUseAsyncHooks: boolean;
    distributedTracingMode: DistributedTracingModes;
    enableAutoCollectExtendedMetrics: boolean | IDisabledExtendedMetrics;
    enableResendInterval: number;
    enableMaxBytesOnDisk: number;
    enableInternalDebugLogging: boolean;
    enableInternalWarningLogging: boolean;
    quickPulseHost: string;
    enableWebInstrumentation: boolean;
    enableAutoCollectExceptions: boolean;
    webInstrumentationConnectionString?: string;
    webInstrumentationConfig: IWebInstrumentationConfig[];
    webInstrumentationSrc: string;
    static getInstance(): ShimJsonConfig;
    constructor();
    private _loadJsonFile;
}
