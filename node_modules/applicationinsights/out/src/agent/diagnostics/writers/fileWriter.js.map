{"version":3,"file":"fileWriter.js","sourceRoot":"","sources":["../../../../../src/agent/diagnostics/writers/fileWriter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport * as path from \"path\";\r\nimport * as fs from \"fs\";\r\nimport { makeStatusDirs, renameCurrentFile } from \"./fileHelpers\";\r\nimport { IAgentLogger } from \"../../types\";\r\nimport { Util } from \"../../../shared/util\";\r\n\r\nexport interface FileWriterOptions {\r\n    append: boolean; // Overwrite or append on file write (false)\r\n    deleteOnExit: boolean; // (true)\r\n    sizeLimit: number; // (10 KB)\r\n    renamePolicy: \"rolling\" | \"overwrite\" | \"stop\"; // What to do with file when it exceeds time/size limits\r\n    chmod: number; // Linux only\r\n}\r\n\r\n\r\nexport class FileWriter implements IAgentLogger {\r\n    public callback = (_err: Error) => {\r\n        // no-op\r\n    };\r\n    private _ready = false;\r\n    private _options: FileWriterOptions;\r\n    private static _fullpathsToDelete: string[] = [];\r\n    private static _listenerAttached = false;\r\n    private static DEFAULT_OPTIONS: FileWriterOptions = {\r\n        append: false,\r\n        deleteOnExit: true,\r\n        sizeLimit: 10 * 1024,\r\n        renamePolicy: \"stop\",\r\n        chmod: 0o644 // rw/r/r\r\n    }\r\n\r\n    public static isNodeVersionCompatible() {\r\n        const majVer = process.versions.node.split(\".\")[0];\r\n        return parseInt(majVer) >= 1;\r\n    }\r\n\r\n    // leave at \"keep at single file only\", \"write up to certain size limit\", \"clear old file on process startup\"\r\n    constructor(private _filepath: string, private _filename: string, options?: Partial<FileWriterOptions>) {\r\n        this._options = { ...FileWriter.DEFAULT_OPTIONS, ...options };\r\n        this._ready = FileWriter.isNodeVersionCompatible() && makeStatusDirs(this._filepath);\r\n        if (this._options.deleteOnExit) {\r\n            FileWriter._addCloseHandler();\r\n            FileWriter._fullpathsToDelete.push(path.join(this._filepath, this._filename));\r\n        }\r\n    }\r\n\r\n    public log(message: any) {\r\n        if (this._ready) {\r\n            const data = typeof message === \"object\"\r\n                ? Util.getInstance().stringify(message)\r\n                : message.toString();\r\n\r\n            // Check if existing file needs to be renamed\r\n            this._shouldRenameFile((err, shouldRename) => {\r\n                if (err) { return; }\r\n\r\n                if (shouldRename) {\r\n                    if (this._options.renamePolicy === \"rolling\") {\r\n                        renameCurrentFile(this._filepath, this._filename, (renameErr, renamedFullpath) => {\r\n                            if (renameErr) { return; }\r\n                            FileWriter._fullpathsToDelete.push(renamedFullpath);\r\n                            this._options.append\r\n                                ? this._appendFile(`${data}\\n`)\r\n                                : this._writeFile(data);\r\n                        });\r\n                    } else if (this._options.renamePolicy === \"overwrite\") {\r\n                        // Clear the current file\r\n                        this._writeFile(data);\r\n                    } else if (this._options.renamePolicy === \"stop\") {\r\n                        // Stop future logging\r\n                        this._ready = false;\r\n                    }\r\n                } else {\r\n                    this._options.append\r\n                        ? this._appendFile(`${data}\\n`)\r\n                        : this._writeFile(data);\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    private _appendFile(message: string) {\r\n        const fullpath = path.join(this._filepath, this._filename);\r\n        fs.appendFile(fullpath, message, (err) => {\r\n            this.callback(err);\r\n        });\r\n    }\r\n\r\n    private _writeFile(message: string) {\r\n        const fullpath = path.join(this._filepath, this._filename);\r\n        fs.writeFile(fullpath, message, { mode: this._options.chmod }, this.callback);\r\n    }\r\n\r\n    private static _addCloseHandler() {\r\n        if (!FileWriter._listenerAttached) {\r\n            process.on(\"exit\", () => {\r\n                FileWriter._fullpathsToDelete.forEach((filename) => {\r\n                    try {\r\n                        fs.unlinkSync(filename);\r\n                    } catch (err) { /** ignore errors */ }\r\n                });\r\n            });\r\n            FileWriter._listenerAttached = true;\r\n        }\r\n    }\r\n\r\n    private _shouldRenameFile(callback?: (err: Error | null, shouldRename?: boolean) => void): void {\r\n        const fullpath = path.join(this._filepath, this._filename);\r\n        fs.stat(fullpath, (err, stats) => {\r\n            if (err) {\r\n                if (err.code === \"ENOENT\" && typeof callback === \"function\") {\r\n                    callback(null, false);\r\n                } else if (typeof callback === \"function\") {\r\n                    callback(err);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (stats.size > this._options.sizeLimit) {\r\n                callback(null, true);\r\n            } else {\r\n                const createDate = new Date(stats.birthtime);\r\n                const currentDate = new Date();\r\n                const result = (\r\n                    createDate.getUTCDate() !== currentDate.getUTCDate() ||\r\n                    createDate.getUTCMonth() !== currentDate.getUTCMonth() ||\r\n                    createDate.getUTCFullYear() !== currentDate.getUTCFullYear()\r\n                );\r\n                callback(null, result);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}