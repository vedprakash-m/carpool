{"version":3,"file":"etwWritter.js","sourceRoot":"","sources":["../../../../../src/agent/diagnostics/writers/etwWritter.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,yBAAyB;AACzB,6BAA6B;AAC7B,+CAA4C;AAG5C,MAAa,UAAU;IAGnB;QACI,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAErE,IAAI;YACA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAClD,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;aAC1D;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;aAC1D;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,mDAAmD,EAAE,CAAC,CAAC,CAAC;YACpE,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;SAC7B;IACP,CAAC;IAEM,GAAG,CAAC,OAAe,EAAE,QAAmB;QAC3C,IAAG,IAAI,CAAC,UAAU,EAAC;YACd,wDAAwD;YACxD,IAAI,CAAC,UAAU,CAAC,YAAyB,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,CAAC;SACpE;aACG;YACA,OAAO,CAAC,GAAG,CAAC,WAAI,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;SACtD;IACL,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,QAAmB;QAC7C,IAAG,IAAI,CAAC,UAAU,EAAC;YACf,wDAAwD;YACvD,IAAI,CAAC,UAAU,CAAC,WAAwB,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,CAAC;SACnE;aACG;YACA,OAAO,CAAC,KAAK,CAAC,WAAI,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;SACxD;IACL,CAAC;IAEO,cAAc,CAAC,UAAkB;QACrC,sEAAsE;QACtE,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,0BAA0B,EAAE,OAAO,UAAU,EAAE,CAAC,CAAC;QACtF,IAAI;YACF,gEAAgE;YAChE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC1C,8DAA8D;YAC9D,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC;SACzB;QAAC,OAAO,CAAC,EAAE;YACV,qCAAqC;YACrC,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;CACN;AApDD,gCAoDC","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { Util } from \"../../../shared/util\";\r\nimport { IAgentLogger } from \"../../types\";\r\n\r\nexport class EtwWritter implements IAgentLogger {\r\n    private _etwModule: any;\r\n\r\n    constructor() {\r\n        const nodeMajVer = parseInt(process.versions.node.split('.')[0], 10);\r\n\r\n        try {\r\n            this._etwModule = this._loadEtwModule(nodeMajVer);\r\n            if (this._etwModule) {\r\n              console.log('AppInsightsAgent: Successfully loaded ETW');\r\n            } else {\r\n              console.log('AppInsightsAgent: ETW could not be loaded');\r\n            }\r\n          } catch (e) {\r\n            console.log('Could not load ETW. Defaulting to console logging', e);\r\n            this._etwModule = undefined;\r\n          }\r\n    }\r\n\r\n    public log(message: string, optional?: string[]) {\r\n        if(this._etwModule){\r\n             // eslint-disable-next-line @typescript-eslint/ban-types\r\n            (this._etwModule.logInfoEvent as Function)(message, ...optional);\r\n        }\r\n        else{\r\n            console.log(Util.getInstance().stringify(message));\r\n        }\r\n    }\r\n\r\n    public error(message: string, optional?: string[]) {\r\n        if(this._etwModule){\r\n            // eslint-disable-next-line @typescript-eslint/ban-types\r\n            (this._etwModule.logErrEvent as Function)(message, ...optional);\r\n        }\r\n        else{\r\n            console.error(Util.getInstance().stringify(message));\r\n        }\r\n    }\r\n\r\n    private _loadEtwModule(nodeMajVer: number){\r\n        // Try to load precompiled ETW module if it exists and is \"importable\"\r\n        const dirname = path.join(__dirname, '../../../../../../../etw', `etw_${nodeMajVer}`);\r\n        try {\r\n          // throws an error if directory is not readable / does not exist\r\n          fs.accessSync(dirname, fs.constants.R_OK);\r\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n          return require(dirname);\r\n        } catch (e) {\r\n          // Could not load ETW, return nothing\r\n          return undefined;\r\n        }\r\n      }\r\n}\r\n"]}