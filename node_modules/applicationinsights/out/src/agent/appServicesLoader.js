"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppServicesLoader = void 0;
const os = require("os");
const path = require("path");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const resources_1 = require("@opentelemetry/resources");
const diagnosticLogger_1 = require("./diagnostics/diagnosticLogger");
const etwDiagnosticLogger_1 = require("./diagnostics/etwDiagnosticLogger");
const fileWriter_1 = require("./diagnostics/writers/fileWriter");
const statusLogger_1 = require("./diagnostics/statusLogger");
const agentLoader_1 = require("./agentLoader");
class AppServicesLoader extends agentLoader_1.AgentLoader {
    constructor() {
        super();
        if (this._canLoad) {
            // Azure App Services specific configuration
            const resourceAttributes = {};
            if (process.env.WEBSITE_SITE_NAME) {
                resourceAttributes[semantic_conventions_1.SEMRESATTRS_SERVICE_NAME] =
                    process.env.WEBSITE_SITE_NAME;
            }
            if (process.env.WEBSITE_INSTANCE_ID) {
                resourceAttributes[semantic_conventions_1.SEMRESATTRS_SERVICE_INSTANCE_ID] =
                    process.env.WEBSITE_INSTANCE_ID;
            }
            const resource = new resources_1.Resource(resourceAttributes);
            this._options.resource = resource;
            let statusLogDir = '/var/log/applicationinsights/';
            if (this._isWindows) {
                if (process.env.HOME) {
                    statusLogDir = path.join(process.env.HOME, "LogFiles", "ApplicationInsights", "status");
                }
                else {
                    statusLogDir = path.join(os.tmpdir(), "Microsoft", "ApplicationInsights", "StatusMonitor", "LogFiles", "ApplicationInsights", "status");
                }
            }
            this._statusLogger = new statusLogger_1.StatusLogger(this._instrumentationKey, new fileWriter_1.FileWriter(statusLogDir, 'status_nodejs.json', {
                append: false,
                deleteOnExit: false,
                renamePolicy: 'overwrite',
                sizeLimit: 1024 * 1024,
            }));
            if (this._isWindows) {
                this._diagnosticLogger = new etwDiagnosticLogger_1.EtwDiagnosticLogger(this._instrumentationKey);
            }
            else {
                this._diagnosticLogger = new diagnosticLogger_1.DiagnosticLogger(this._instrumentationKey, new fileWriter_1.FileWriter(statusLogDir, 'applicationinsights-extension.log', {
                    append: true,
                    deleteOnExit: false,
                    renamePolicy: 'overwrite',
                    sizeLimit: 1024 * 1024, // 1 MB
                }));
            }
        }
    }
}
exports.AppServicesLoader = AppServicesLoader;
//# sourceMappingURL=appServicesLoader.js.map