{"version":3,"file":"console.sub.js","sourceRoot":"","sources":["../../../../src/logs/diagnostic-channel/console.sub.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,oFAAoF;;;AAEpF,sDAAkF;AAElF,2DAAyE;AAIzE,IAAI,MAAc,CAAC;AACnB,IAAI,eAA+B,CAAC;AAEpC,MAAM,UAAU,GAAG,CAAC,KAA8C,EAAE,EAAE;IAClE,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,yBAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM;QAClG,CAAC,CAAC,yBAAc,CAAC,IAAI;QACrB,CAAC,CAAC,yBAAc,CAAC,IAAI,CAAC,CAAC;IAC3B,IAAI,eAAe,IAAI,QAAQ,EAAE;QAC7B,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QAC5C,sCAAsC;QACtC,IAAI,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YAClD,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACtD;QACD,MAAM,SAAS,GAAc;YACzB,IAAI,EAAE,OAAO;YACb,cAAc,EAAE,QAAQ;SAC3B,CAAC;QACF,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC1B;AACL,CAAC,CAAC;AAEF,SAAgB,MAAM,CAAC,MAAqE;IACxF,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,EAAE;QACjB,MAAM,GAAG,eAAI,CAAC,SAAS,CAAC,kCAAkC,CAAC,CAAC;QAC5D,eAAe,GAAG,MAAM,CAAC,eAAe,IAAI,yBAAc,CAAC,WAAW,CAAC;QACvE,4BAAO,CAAC,SAAS,CAA0B,SAAS,EAAE,UAAU,EAAE,+BAAU,CAAC,CAAC;KACjF;AACL,CAAC;AAND,wBAMC;AAED,SAAgB,OAAO;IACnB,4BAAO,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AAC/C,CAAC;AAFD,0BAEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\n\r\nimport { Logger, LogRecord, SeverityNumber, logs } from \"@opentelemetry/api-logs\";\r\nimport { InstrumentationConfig } from \"@opentelemetry/instrumentation\";\r\nimport { channel, IStandardEvent, trueFilter } from \"diagnostic-channel\";\r\nimport { console as consolePub } from \"diagnostic-channel-publishers\";\r\n\r\n\r\nlet logger: Logger;\r\nlet logSendingLevel: SeverityNumber;\r\n\r\nconst subscriber = (event: IStandardEvent<consolePub.IConsoleData>) => {\r\n    const severity = event.data.message.indexOf(\"Error:\") > -1 ? SeverityNumber.ERROR : (event.data.stderr\r\n        ? SeverityNumber.WARN\r\n        : SeverityNumber.INFO);\r\n    if (logSendingLevel <= severity) {\r\n        let message = event.data.message.toString();\r\n        // Message can have a trailing newline\r\n        if (message.lastIndexOf(\"\\n\") === message.length - 1) {\r\n            message = message.substring(0, message.length - 1);\r\n        }\r\n        const logRecord: LogRecord = {\r\n            body: message,\r\n            severityNumber: severity\r\n        };\r\n        logger.emit(logRecord);\r\n    }\r\n};\r\n\r\nexport function enable(config?: InstrumentationConfig & { logSendingLevel?: SeverityNumber }) {\r\n    if (config?.enabled) {\r\n        logger = logs.getLogger(\"ApplicationInsightsConsoleLogger\");\r\n        logSendingLevel = config.logSendingLevel || SeverityNumber.UNSPECIFIED;\r\n        channel.subscribe<consolePub.IConsoleData>(\"console\", subscriber, trueFilter);\r\n    }\r\n}\r\n\r\nexport function dispose() {\r\n    channel.unsubscribe(\"console\", subscriber);\r\n}\r\n"]}