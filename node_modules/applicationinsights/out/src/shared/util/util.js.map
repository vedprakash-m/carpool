{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../src/shared/util/util.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { diag } from \"@opentelemetry/api\";\r\n\r\n\r\nexport class Util {\r\n    private static _instance: Util;\r\n    private _listenerAttached = false;\r\n\r\n    public isNodeExit = false;\r\n\r\n    static getInstance() {\r\n        if (!Util._instance) {\r\n            Util._instance = new Util();\r\n        }\r\n        return Util._instance;\r\n    }\r\n\r\n    public constructor() {\r\n        this._addCloseHandler();\r\n    }\r\n\r\n    /**\r\n     * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n     */\r\n    public trim(str: string): string {\r\n        if (typeof str === \"string\") {\r\n            return str.replace(/^\\s+|\\s+$/g, \"\");\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Check if an object is of type Array\r\n     */\r\n    public isArray(obj: any): boolean {\r\n        return Object.prototype.toString.call(obj) === \"[object Array]\";\r\n    }\r\n\r\n    /**\r\n     * Check if an object is of type Error\r\n     */\r\n    public isError(obj: any): boolean {\r\n        return obj instanceof Error;\r\n    }\r\n\r\n    public isPrimitive(input: any): boolean {\r\n        const propType = typeof input;\r\n        return propType === \"string\" || propType === \"number\" || propType === \"boolean\";\r\n    }\r\n\r\n    /**\r\n     * Check if an object is of type Date\r\n     */\r\n    public isDate(obj: any): boolean {\r\n        return Object.prototype.toString.call(obj) === \"[object Date]\";\r\n    }\r\n\r\n    /**\r\n     * Convert milliseconds to Breeze expected time.\r\n     * @internal\r\n     */\r\n    public msToTimeSpan(ms: number): string {\r\n        let totalms = ms;\r\n        if (Number.isNaN(totalms) || totalms < 0 || !Number.isFinite(ms)) {\r\n            totalms = 0;\r\n        }\r\n\r\n        let sec = ((totalms / 1000) % 60).toFixed(7).replace(/0{0,4}$/, \"\");\r\n        let min = `${Math.floor(totalms / (1000 * 60)) % 60}`;\r\n        let hour = `${Math.floor(totalms / (1000 * 60 * 60)) % 24}`;\r\n        const days = Math.floor(totalms / (1000 * 60 * 60 * 24));\r\n\r\n        sec = sec.indexOf(\".\") < 2 ? `0${sec}` : sec;\r\n        min = min.length < 2 ? `0${min}` : min;\r\n        hour = hour.length < 2 ? `0${hour}` : hour;\r\n        const daysText = days > 0 ? `${days}.` : \"\";\r\n\r\n        return `${daysText + hour}:${min}:${sec}`;\r\n    }\r\n\r\n    /**\r\n     * Using JSON.stringify, by default Errors do not serialize to something useful:\r\n     * Simplify a generic Node Error into a simpler map for customDimensions\r\n     * Custom errors can still implement toJSON to override this functionality\r\n     */\r\n    protected extractError(err: Error): { message: string; code: string } {\r\n        // Error is often subclassed so may have code OR id properties:\r\n        // https://nodejs.org/api/errors.html#errors_error_code\r\n        const looseError = err as any;\r\n        return {\r\n            message: err.message,\r\n            code: looseError.code || looseError.id || \"\",\r\n        };\r\n    }\r\n\r\n    public isDbDependency(dependencyType: string) {\r\n        return (\r\n            dependencyType.indexOf(\"SQL\") > -1 ||\r\n            dependencyType === \"mysql\" ||\r\n            dependencyType === \"postgresql\" ||\r\n            dependencyType === \"mongodb\" ||\r\n            dependencyType === \"redis\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns string representation of an object suitable for diagnostics diag.\r\n     */\r\n    public dumpObj(object: any): string {\r\n        const objectTypeDump: string = Object[\"prototype\"].toString.call(object);\r\n        let propertyValueDump = \"\";\r\n        if (objectTypeDump === \"[object Error]\") {\r\n            propertyValueDump = `{ stack: '${object.stack}', message: '${object.message}', name: '${object.name}'`;\r\n        } else {\r\n            propertyValueDump = JSON.stringify(object);\r\n        }\r\n\r\n        return objectTypeDump + propertyValueDump;\r\n    }\r\n\r\n    public stringify(payload: any) {\r\n        try {\r\n            return JSON.stringify(payload);\r\n        } catch (error) {\r\n            diag.warn(\"Failed to serialize payload\", error, payload);\r\n        }\r\n    }\r\n\r\n    private _addCloseHandler() {\r\n        if (!this._listenerAttached) {\r\n            process.on(\"exit\", () => {\r\n                this.isNodeExit = true;\r\n            });\r\n            this._listenerAttached = true;\r\n        }\r\n    }\r\n}\r\n"]}