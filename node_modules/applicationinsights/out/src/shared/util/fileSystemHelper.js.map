{"version":3,"file":"fileSystemHelper.js","sourceRoot":"","sources":["../../../../src/shared/util/fileSystemHelper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport { promisify } from \"util\";\r\n\r\nexport const statAsync = promisify(fs.stat);\r\nexport const lstatAsync = promisify(fs.lstat);\r\nexport const mkdirAsync = promisify(fs.mkdir);\r\nexport const accessAsync = promisify(fs.access);\r\nexport const appendFileAsync = promisify(fs.appendFile);\r\nexport const writeFileAsync = promisify(fs.writeFile);\r\nexport const readFileAsync = promisify(fs.readFile);\r\nexport const readdirAsync = promisify(fs.readdir);\r\nexport const unlinkAsync = promisify(fs.unlink);\r\n\r\n/**\r\n * Validate directory exists.\r\n */\r\nexport const confirmDirExists = async (directory: string): Promise<void> => {\r\n    try {\r\n        const stats = await lstatAsync(directory);\r\n        if (!stats.isDirectory()) {\r\n            throw new Error(\"Path existed but was not a directory\");\r\n        }\r\n    } catch (err) {\r\n        if (err && err.code === \"ENOENT\") {\r\n            try {\r\n                await mkdirAsync(directory);\r\n            } catch (mkdirErr) {\r\n                if (mkdirErr && mkdirErr.code !== \"EEXIST\") {\r\n                    // Handle race condition by ignoring EEXIST\r\n                    throw mkdirErr;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Computes the size (in bytes) of all files in a directory at the root level. Asynchronously.\r\n */\r\nexport const getShallowDirectorySize = async (directory: string): Promise<number> => {\r\n    // Get the directory listing\r\n    const files = await readdirAsync(directory);\r\n    let totalSize = 0;\r\n    // Query all file sizes\r\n    for (const file of files) {\r\n        const fileStats = await statAsync(path.join(directory, file));\r\n        if (fileStats.isFile()) {\r\n            totalSize += fileStats.size;\r\n        }\r\n    }\r\n    return totalSize;\r\n};\r\n\r\n/**\r\n * Computes the size (in bytes) of all files in a directory at the root level. Synchronously.\r\n */\r\nexport const getShallowDirectorySizeSync = (directory: string): number => {\r\n    const files = fs.readdirSync(directory);\r\n    let totalSize = 0;\r\n    for (let i = 0; i < files.length; i++) {\r\n        totalSize += fs.statSync(path.join(directory, files[i])).size;\r\n    }\r\n    return totalSize;\r\n};\r\n\r\n/**\r\n * Computes the size (in bytes) of a file asynchronously.\r\n */\r\nexport const getShallowFileSize = async (filePath: string): Promise<number> => {\r\n    const fileStats = await statAsync(filePath);\r\n    if (fileStats.isFile()) {\r\n        return fileStats.size;\r\n    }\r\n};\r\n"]}