{"version":3,"file":"jsonConfig.js","sourceRoot":"","sources":["../../../../src/shared/configuration/jsonConfig.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,yBAAyB;AACzB,6BAA6B;AAE7B,4CAA0C;AAI1C,MAAM,sBAAsB,GAAG,wCAAwC,CAAC;AACxE,MAAM,WAAW,GAAG,2CAA2C,CAAC;AAEhE,MAAa,UAAU;IA8BnB;QACI,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IATM,MAAM,CAAC,WAAW;QACrB,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YACvB,UAAU,CAAC,SAAS,GAAG,IAAI,UAAU,EAAE,CAAC;SAC3C;QACD,OAAO,UAAU,CAAC,SAAS,CAAC;IAChC,CAAC;IAMO,aAAa;QACjB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACnD,6CAA6C;QAC7C,IAAI,iBAAiB,EAAE;YACnB,UAAU,GAAG,iBAAiB,CAAC;SAClC;QACD,YAAY;aACP;YACD,MAAM,cAAc,GAAG,0BAA0B,CAAC;YAClD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC,+CAA+C;YACnG,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC,UAAU;YAC7D,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACvD,IAAI,UAAU,EAAE;gBACZ,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;oBAC7B,OAAO,GAAG,UAAU,CAAC;iBACxB;qBAAM;oBACH,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,8CAA8C;iBAC5F;aACJ;YACD,IAAI;gBACA,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;aACjD;YAAC,OAAO,GAAG,EAAE;gBACV,UAAI,CAAC,IAAI,CAAC,mCAAmC,EAAE,GAAG,CAAC,CAAC;aACvD;SACJ;QACD,IAAI;YACA,MAAM,UAAU,GAAqC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC5E,IAAI,CAAC,2BAA2B,GAAG,UAAU,CAAC,2BAA2B,CAAC;YAC1E,IAAI,CAAC,qBAAqB,GAAG,UAAU,CAAC,qBAAqB,CAAC;YAC9D,IAAI,CAAC,wBAAwB,GAAG,UAAU,CAAC,wBAAwB,CAAC;YACpE,IAAI,CAAC,uBAAuB,GAAG,UAAU,CAAC,uBAAuB,CAAC;YAClE,IAAI,CAAC,4BAA4B,GAAG,UAAU,CAAC,4BAA4B,CAAC;YAE5E,IAAI,CAAC,2BAA2B,GAAG,UAAU,CAAC,2BAA2B,CAAC;YAC1E,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC;YAC9C,IAAI,CAAC,sBAAsB,GAAG,UAAU,CAAC,sBAAsB,CAAC;SACnE;QAAC,OAAO,GAAG,EAAE;YACV,UAAI,CAAC,IAAI,CAAC,uCAAuC,EAAE,GAAG,CAAC,CAAC;SAC3D;IACL,CAAC;CACJ;AA3ED,gCA2EC","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport { AzureMonitorExporterOptions } from \"@azure/monitor-opentelemetry-exporter\";\r\nimport { diag } from \"@opentelemetry/api\";\r\nimport { AzureMonitorOpenTelemetryOptions, OTLPExporterConfig, InstrumentationOptions } from \"../../types\";\r\n\r\n\r\nconst ENV_CONFIGURATION_FILE = \"APPLICATIONINSIGHTS_CONFIGURATION_FILE\";\r\nconst ENV_CONTENT = \"APPLICATIONINSIGHTS_CONFIGURATION_CONTENT\";\r\n\r\nexport class JsonConfig {\r\n    private static _instance: JsonConfig;\r\n    public enableAutoCollectExceptions: boolean;\r\n    /** OTLP Trace Exporter Configuration */\r\n    public otlpTraceExporterConfig?: OTLPExporterConfig;\r\n    /** OTLP Metric Exporter Configuration */\r\n    public otlpMetricExporterConfig?: OTLPExporterConfig;\r\n    /** OTLP Log Exporter Configuration */\r\n    public otlpLogExporterConfig?: OTLPExporterConfig;\r\n    /**\r\n     * Sets the state of performance tracking (enabled by default)\r\n     * if true performance counters will be collected every second and sent to Azure Monitor\r\n     */\r\n    public enableAutoCollectPerformance?: boolean;\r\n    /** The rate of telemetry items tracked that should be transmitted (Default 1.0) */\r\n    public samplingRatio?: number;\r\n    /** Azure Monitor Exporter Configuration */\r\n    public azureMonitorExporterOptions?: AzureMonitorExporterOptions;\r\n    /**\r\n     * OpenTelemetry Instrumentations configuration included as part of Azure Monitor (azureSdk, http, mongoDb, mySql, postgreSql, redis, redis4)\r\n     */\r\n    public instrumentationOptions?: InstrumentationOptions;\r\n\r\n    public static getInstance() {\r\n        if (!JsonConfig._instance) {\r\n            JsonConfig._instance = new JsonConfig();\r\n        }\r\n        return JsonConfig._instance;\r\n    }\r\n\r\n    constructor() {\r\n        this._loadJsonFile();\r\n    }\r\n\r\n    private _loadJsonFile() {\r\n        let jsonString = \"\";\r\n        const contentJsonConfig = process.env[ENV_CONTENT];\r\n        // JSON string added directly in env variable\r\n        if (contentJsonConfig) {\r\n            jsonString = contentJsonConfig;\r\n        }\r\n        // JSON file\r\n        else {\r\n            const configFileName = \"applicationinsights.json\";\r\n            const rootPath = path.join(__dirname, \"../../../\"); // Root of folder (__dirname = ../dist-esm/src)\r\n            let tempDir = path.join(rootPath, configFileName); // default\r\n            const configFile = process.env[ENV_CONFIGURATION_FILE];\r\n            if (configFile) {\r\n                if (path.isAbsolute(configFile)) {\r\n                    tempDir = configFile;\r\n                } else {\r\n                    tempDir = path.join(rootPath, configFile); // Relative path to applicationinsights folder\r\n                }\r\n            }\r\n            try {\r\n                jsonString = fs.readFileSync(tempDir, \"utf8\");\r\n            } catch (err) {\r\n                diag.info(\"Failed to read JSON config file: \", err);\r\n            }\r\n        }\r\n        try {\r\n            const jsonConfig: AzureMonitorOpenTelemetryOptions = JSON.parse(jsonString);\r\n            this.enableAutoCollectExceptions = jsonConfig.enableAutoCollectExceptions;\r\n            this.otlpLogExporterConfig = jsonConfig.otlpLogExporterConfig;\r\n            this.otlpMetricExporterConfig = jsonConfig.otlpMetricExporterConfig;\r\n            this.otlpTraceExporterConfig = jsonConfig.otlpTraceExporterConfig;\r\n            this.enableAutoCollectPerformance = jsonConfig.enableAutoCollectPerformance;\r\n\r\n            this.azureMonitorExporterOptions = jsonConfig.azureMonitorExporterOptions;\r\n            this.samplingRatio = jsonConfig.samplingRatio;\r\n            this.instrumentationOptions = jsonConfig.instrumentationOptions;\r\n        } catch (err) {\r\n            diag.info(\"Missing or invalid JSON config file: \", err);\r\n        }\r\n    }\r\n}\r\n"]}