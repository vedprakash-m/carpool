{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../src/shared/configuration/config.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAGlC,4CAA0C;AAC1C,wDAKkC;AAClC,6CAA0C;AAE1C,2DAAwD;AAExD,MAAM,YAAY,GAAG,mDAAmD,CAAC;AAGzE,MAAa,yBAAyB;IAqClC,YAAY,OAA0C;QAClD,iBAAiB;QACjB,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,wBAAwB,GAAG,EAAE,CAAC;QACnC,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;QAClC,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC;QACzC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;QAExC,IAAI,CAAC,2BAA2B,GAAG,EAAE,CAAC;QACtC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,sBAAsB,GAAG;YAC1B,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;YACvB,QAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YAC5B,OAAO,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YAC3B,KAAK,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YACzB,UAAU,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,KAAK,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YACzB,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YAC1B,OAAO,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YAC3B,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YAC1B,OAAO,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;SAC9B,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE5C,6CAA6C;QAC7C,gEAAgE;QAChE,IAAI,OAAO,EAAE;YACT,IAAI,OAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,KAAK,SAAS,EAAE;gBAC3D,IAAI,CAAC,2BAA2B,GAAG,OAAO,CAAC,2BAA2B,CAAC;aAC1E;YACD,IAAI,OAAM,CAAC,OAAO,CAAC,4BAA4B,CAAC,KAAK,SAAS,EAAE;gBAC5D,IAAI,CAAC,4BAA4B,GAAG,OAAO,CAAC,4BAA4B,CAAC;aAC5E;YACD,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,MAAM,CACxC,IAAI,CAAC,uBAAuB,EAC5B,OAAO,CAAC,uBAAuB,CAClC,CAAC;YACF,IAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC,MAAM,CACzC,IAAI,CAAC,wBAAwB,EAC7B,OAAO,CAAC,wBAAwB,CACnC,CAAC;YACF,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC,MAAM,CACtC,IAAI,CAAC,qBAAqB,EAC1B,OAAO,CAAC,qBAAqB,CAChC,CAAC;YAEF,sCAAsC;YACtC,IAAI,CAAC,2BAA2B,GAAG,MAAM,CAAC,MAAM,CAC5C,IAAI,CAAC,2BAA2B,EAChC,OAAO,CAAC,2BAA2B,CACtC,CAAC;YACF,IAAI,CAAC,sBAAsB,GAAG,MAAM,CAAC,MAAM,CACvC,IAAI,CAAC,sBAAsB,EAC3B,OAAO,CAAC,sBAAsB,CACjC,CAAC;YACF,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC/D,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;YAEtG,yCAAyC;YACzC,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;gBAC3B,IAAI,CAAC,sBAAsB,mCACpB,IAAI,CAAC,sBAAsB,KAC9B,OAAO,kCACA,IAAI,CAAC,sBAAsB,CAAC,OAAO,KACtC,eAAe,EAAE,IAAA,+BAAc,EAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,MAEjE,CAAA;aACJ;YAED,IAAI,CAAC,YAAY,EAAE,CAAC;SACvB;IACL,CAAC;IAxFD,IAAW,QAAQ,CAAC,QAAkB;QAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAED;;OAEG;IACH,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAiFO,YAAY;QAChB,IAAI;YACA,MAAM,UAAU,GAAG,uBAAU,CAAC,WAAW,EAAE,CAAC;YAC5C,IAAI,CAAC,4BAA4B;gBAC7B,UAAU,CAAC,4BAA4B,KAAK,SAAS;oBACjD,CAAC,CAAC,UAAU,CAAC,4BAA4B;oBACzC,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC;YAC5C,IAAI,CAAC,2BAA2B;gBAC5B,UAAU,CAAC,2BAA2B,KAAK,SAAS;oBAChD,CAAC,CAAC,UAAU,CAAC,2BAA2B;oBACxC,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC;YAG3C,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,MAAM,CACxC,IAAI,CAAC,uBAAuB,EAC5B,UAAU,CAAC,uBAAuB,CACrC,CAAC;YACF,IAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC,MAAM,CACzC,IAAI,CAAC,wBAAwB,EAC7B,UAAU,CAAC,wBAAwB,CACtC,CAAC;YACF,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC,MAAM,CACtC,IAAI,CAAC,qBAAqB,EAC1B,UAAU,CAAC,qBAAqB,CACnC,CAAC;YAEF,IAAI,CAAC,aAAa;gBACd,UAAU,CAAC,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;YAE3F,IAAI,CAAC,2BAA2B,GAAG,MAAM,CAAC,MAAM,CAC5C,IAAI,CAAC,2BAA2B,EAChC,UAAU,CAAC,2BAA2B,CACzC,CAAC;YACF,IAAI,CAAC,sBAAsB,GAAG,MAAM,CAAC,MAAM,CACvC,IAAI,CAAC,sBAAsB,EAC3B,UAAU,CAAC,sBAAsB,CACpC,CAAC;SAEL;QAAC,OAAO,KAAK,EAAE;YACZ,UAAI,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;SAChE;IACL,CAAC;IAEO,mBAAmB;QACvB,IAAI,QAAQ,GAAG,oBAAQ,CAAC,OAAO,EAAE,CAAC;QAClC,oCAAoC;QACpC,MAAM,oBAAoB,GAA4B;YAClD,SAAS,EAAE,CAAC,2BAAe,CAAC;SAC/B,CAAC;QACF,MAAM,WAAW,GAAG,IAAA,+BAAmB,EAAC,oBAAoB,CAAC,CAAC;QAC9D,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACvC,OAAO,QAAQ,CAAC;IACpB,CAAC;CACJ;AAnKD,8DAmKC","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { AzureMonitorExporterOptions } from \"@azure/monitor-opentelemetry-exporter\";\r\nimport { diag } from \"@opentelemetry/api\";\r\nimport {\r\n    Resource,\r\n    ResourceDetectionConfig,\r\n    detectResourcesSync,\r\n    envDetectorSync,\r\n} from \"@opentelemetry/resources\";\r\nimport { JsonConfig } from \"./jsonConfig\";\r\nimport { AzureMonitorOpenTelemetryOptions, OTLPExporterConfig, InstrumentationOptions } from \"../../types\";\r\nimport { logLevelParser } from \"../util/logLevelParser\";\r\n\r\nconst loggingLevel = \"APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL\";\r\n\r\n\r\nexport class ApplicationInsightsConfig {\r\n    public enableAutoCollectExceptions: boolean;\r\n    /** OTLP Trace Exporter Configuration */\r\n    public otlpTraceExporterConfig: OTLPExporterConfig;\r\n    /** OTLP Metric Exporter Configuration */\r\n    public otlpMetricExporterConfig: OTLPExporterConfig;\r\n    /** OTLP Log Exporter Configuration */\r\n    public otlpLogExporterConfig: OTLPExporterConfig;\r\n\r\n    /** The rate of telemetry items tracked that should be transmitted (Default 1.0) */\r\n    public samplingRatio: number;\r\n    /** Azure Monitor Exporter Configuration */\r\n    public azureMonitorExporterOptions: AzureMonitorExporterOptions;\r\n    /**\r\n     * OpenTelemetry Instrumentations configuration included as part of Azure Monitor (azureSdk, http, mongoDb, mySql, postgreSql, redis, redis4)\r\n     */\r\n    public instrumentationOptions: InstrumentationOptions;\r\n\r\n    private _resource: Resource;\r\n\r\n    public set resource(resource: Resource) {\r\n        this._resource = this._resource.merge(resource);\r\n    }\r\n\r\n    /**\r\n     *Get OpenTelemetry Resource\r\n     */\r\n    public get resource(): Resource {\r\n        return this._resource;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of performance tracking (enabled by default)\r\n     * if true performance counters will be collected every second and sent to Azure Monitor\r\n     */\r\n    public enableAutoCollectPerformance: boolean;\r\n\r\n    constructor(options?: AzureMonitorOpenTelemetryOptions) {\r\n        // Default values\r\n        this.otlpLogExporterConfig = {};\r\n        this.otlpMetricExporterConfig = {};\r\n        this.otlpTraceExporterConfig = {};\r\n        this.enableAutoCollectPerformance = true;\r\n        this.enableAutoCollectExceptions = true;\r\n\r\n        this.azureMonitorExporterOptions = {};\r\n        this.samplingRatio = 1;\r\n        this.instrumentationOptions = {\r\n            http: { enabled: true },\r\n            azureSdk: { enabled: false },\r\n            mongoDb: { enabled: false },\r\n            mySql: { enabled: false },\r\n            postgreSql: { enabled: false },\r\n            redis: { enabled: false },\r\n            redis4: { enabled: false },\r\n            console: { enabled: false },\r\n            bunyan: { enabled: false },\r\n            winston: { enabled: false },\r\n        };\r\n        this._resource = this._getDefaultResource();\r\n\r\n        // Merge JSON configuration file if available\r\n        // Check for explicitly passed options when instantiating client\r\n        if (options) {\r\n            if (typeof(options.enableAutoCollectExceptions) === \"boolean\") {\r\n                this.enableAutoCollectExceptions = options.enableAutoCollectExceptions;\r\n            }\r\n            if (typeof(options.enableAutoCollectPerformance) === \"boolean\") {\r\n                this.enableAutoCollectPerformance = options.enableAutoCollectPerformance;\r\n            }\r\n            this.otlpTraceExporterConfig = Object.assign(\r\n                this.otlpTraceExporterConfig,\r\n                options.otlpTraceExporterConfig\r\n            );\r\n            this.otlpMetricExporterConfig = Object.assign(\r\n                this.otlpMetricExporterConfig,\r\n                options.otlpMetricExporterConfig\r\n            );\r\n            this.otlpLogExporterConfig = Object.assign(\r\n                this.otlpLogExporterConfig,\r\n                options.otlpLogExporterConfig\r\n            );\r\n\r\n            // Merge default with provided options\r\n            this.azureMonitorExporterOptions = Object.assign(\r\n                this.azureMonitorExporterOptions,\r\n                options.azureMonitorExporterOptions\r\n            );\r\n            this.instrumentationOptions = Object.assign(\r\n                this.instrumentationOptions,\r\n                options.instrumentationOptions\r\n            );\r\n            this.resource = Object.assign(this.resource, options.resource);\r\n            this.samplingRatio = options.samplingRatio !== undefined ? options.samplingRatio : this.samplingRatio;\r\n\r\n            // Set console logging level from env var\r\n            if (process.env[loggingLevel]) { \r\n                this.instrumentationOptions = {\r\n                    ...this.instrumentationOptions,\r\n                    console: {\r\n                        ...this.instrumentationOptions.console,\r\n                        logSendingLevel: logLevelParser(process.env[loggingLevel]),\r\n                    },\r\n                }\r\n            }\r\n\r\n            this._mergeConfig();\r\n        }\r\n    }\r\n\r\n    private _mergeConfig() {\r\n        try {\r\n            const jsonConfig = JsonConfig.getInstance();\r\n            this.enableAutoCollectPerformance =\r\n                jsonConfig.enableAutoCollectPerformance !== undefined\r\n                    ? jsonConfig.enableAutoCollectPerformance\r\n                    : this.enableAutoCollectPerformance;\r\n            this.enableAutoCollectExceptions =\r\n                jsonConfig.enableAutoCollectExceptions !== undefined\r\n                    ? jsonConfig.enableAutoCollectExceptions\r\n                    : this.enableAutoCollectExceptions;\r\n\r\n\r\n            this.otlpTraceExporterConfig = Object.assign(\r\n                this.otlpTraceExporterConfig,\r\n                jsonConfig.otlpTraceExporterConfig\r\n            );\r\n            this.otlpMetricExporterConfig = Object.assign(\r\n                this.otlpMetricExporterConfig,\r\n                jsonConfig.otlpMetricExporterConfig\r\n            );\r\n            this.otlpLogExporterConfig = Object.assign(\r\n                this.otlpLogExporterConfig,\r\n                jsonConfig.otlpLogExporterConfig\r\n            );\r\n\r\n            this.samplingRatio =\r\n                jsonConfig.samplingRatio !== undefined ? jsonConfig.samplingRatio : this.samplingRatio;\r\n\r\n            this.azureMonitorExporterOptions = Object.assign(\r\n                this.azureMonitorExporterOptions,\r\n                jsonConfig.azureMonitorExporterOptions\r\n            );\r\n            this.instrumentationOptions = Object.assign(\r\n                this.instrumentationOptions,\r\n                jsonConfig.instrumentationOptions\r\n            );\r\n\r\n        } catch (error) {\r\n            diag.error(\"Failed to load JSON config file values.\", error);\r\n        }\r\n    }\r\n\r\n    private _getDefaultResource(): Resource {\r\n        let resource = Resource.default();\r\n        // Load resource attributes from env\r\n        const detectResourceConfig: ResourceDetectionConfig = {\r\n            detectors: [envDetectorSync],\r\n        };\r\n        const envResource = detectResourcesSync(detectResourceConfig);\r\n        resource = resource.merge(envResource);\r\n        return resource;\r\n    }\r\n}\r\n"]}