{"version":3,"file":"log.js","sourceRoot":"","sources":["../../../src/export/log.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAEnD,OAAO,EAAE,gBAAgB,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACxE,OAAO,EAAE,wBAAwB,EAAE,MAAM,WAAW,CAAC;AAErD,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAGrD,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAElD;;GAEG;AACH,MAAM,OAAO,uBAAwB,SAAQ,wBAAwB;IAOnE;;;OAGG;IAEH,YAAY,UAAuC,EAAE;QACnD,KAAK,CAAC,OAAO,CAAC,CAAC;QAZjB;;WAEG;QACK,gBAAW,GAAG,KAAK,CAAC;QAU1B,IAAI,CAAC,OAAO,GAAG,IAAI,UAAU,CAAC;YAC5B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,eAAe,EAAE,OAAO;YACxB,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC;IAC/D,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,MAAM,CACjB,IAAyB,EACzB,cAA8C;QAE9C,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;YACzD,UAAU,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACvE,OAAO;QACT,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,MAAM,sCAAsC,CAAC,CAAC;QAE1E,MAAM,SAAS,GAAe,EAAE,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACnB,MAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAC7D,IAAI,QAAQ,EAAE,CAAC;gBACb,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3B,CAAC;QACH,CAAC,CAAC,CAAC;QACH,0DAA0D;QAC1D,MAAM,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,KAAK,IAAI,EAAE;YAC/D,cAAc,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;QACnD,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IACjC,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { context, diag } from \"@opentelemetry/api\";\nimport type { ExportResult } from \"@opentelemetry/core\";\nimport { ExportResultCode, suppressTracing } from \"@opentelemetry/core\";\nimport { AzureMonitorBaseExporter } from \"./base.js\";\nimport type { TelemetryItem as Envelope } from \"../generated/index.js\";\nimport { logToEnvelope } from \"../utils/logUtils.js\";\nimport type { AzureMonitorExporterOptions } from \"../config.js\";\nimport type { ReadableLogRecord, LogRecordExporter } from \"@opentelemetry/sdk-logs\";\nimport { HttpSender } from \"../platform/index.js\";\n\n/**\n * Azure Monitor OpenTelemetry Log Exporter.\n */\nexport class AzureMonitorLogExporter extends AzureMonitorBaseExporter implements LogRecordExporter {\n  /**\n   * Flag to determine if Exporter is shutdown.\n   */\n  private _isShutdown = false;\n  private readonly _sender: HttpSender;\n\n  /**\n   * Initializes a new instance of the AzureMonitorLogExporter class.\n   * @param AzureExporterConfig - Exporter configuration.\n   */\n\n  constructor(options: AzureMonitorExporterOptions = {}) {\n    super(options);\n    this._sender = new HttpSender({\n      endpointUrl: this.endpointUrl,\n      instrumentationKey: this.instrumentationKey,\n      trackStatsbeat: this.trackStatsbeat,\n      exporterOptions: options,\n      aadAudience: this.aadAudience,\n    });\n    diag.debug(\"AzureMonitorLogExporter was successfully setup\");\n  }\n\n  /**\n   * Export OpenTelemetry logs.\n   * @param logs - Logs to export.\n   * @param resultCallback - Result callback.\n   */\n  public async export(\n    logs: ReadableLogRecord[],\n    resultCallback: (result: ExportResult) => void,\n  ): Promise<void> {\n    if (this._isShutdown) {\n      diag.info(\"Exporter shut down. Failed to export spans.\");\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n    diag.info(`Exporting ${logs.length} logs(s). Converting to envelopes...`);\n\n    const envelopes: Envelope[] = [];\n    logs.forEach((log) => {\n      const envelope = logToEnvelope(log, this.instrumentationKey);\n      if (envelope) {\n        envelopes.push(envelope);\n      }\n    });\n    // Supress tracing until OpenTelemetry Logs SDK support it\n    await context.with(suppressTracing(context.active()), async () => {\n      resultCallback(await this._sender.exportEnvelopes(envelopes));\n    });\n  }\n\n  /**\n   * Shutdown AzureMonitorLogExporter.\n   */\n  public async shutdown(): Promise<void> {\n    this._isShutdown = true;\n    diag.info(\"AzureMonitorLogExporter shutting down\");\n    return this._sender.shutdown();\n  }\n}\n"]}