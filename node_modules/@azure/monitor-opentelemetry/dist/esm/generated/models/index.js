/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link DocumentType} that the service accepts. */
export var KnownDocumentType;
(function (KnownDocumentType) {
    /** Represents a request telemetry type. */
    KnownDocumentType["Request"] = "Request";
    /** Represents a remote dependency telemetry type. */
    KnownDocumentType["RemoteDependency"] = "RemoteDependency";
    /** Represents an exception telemetry type. */
    KnownDocumentType["Exception"] = "Exception";
    /** Represents an event telemetry type. */
    KnownDocumentType["Event"] = "Event";
    /** Represents a trace telemetry type. */
    KnownDocumentType["Trace"] = "Trace";
    /** Represents an unknown telemetry type. */
    KnownDocumentType["Unknown"] = "Unknown";
})(KnownDocumentType || (KnownDocumentType = {}));
/** Known values of {@link CollectionConfigurationErrorType} that the service accepts. */
export var KnownCollectionConfigurationErrorType;
(function (KnownCollectionConfigurationErrorType) {
    /** Unknown error type. */
    KnownCollectionConfigurationErrorType["Unknown"] = "Unknown";
    /** Performance counter parsing error. */
    KnownCollectionConfigurationErrorType["PerformanceCounterParsing"] = "PerformanceCounterParsing";
    /** Performance counter unexpected error. */
    KnownCollectionConfigurationErrorType["PerformanceCounterUnexpected"] = "PerformanceCounterUnexpected";
    /** Performance counter duplicate ids. */
    KnownCollectionConfigurationErrorType["PerformanceCounterDuplicateIds"] = "PerformanceCounterDuplicateIds";
    /** Document stream duplication ids. */
    KnownCollectionConfigurationErrorType["DocumentStreamDuplicateIds"] = "DocumentStreamDuplicateIds";
    /** Document stream failed to create. */
    KnownCollectionConfigurationErrorType["DocumentStreamFailureToCreate"] = "DocumentStreamFailureToCreate";
    /** Document stream failed to create filter unexpectedly. */
    KnownCollectionConfigurationErrorType["DocumentStreamFailureToCreateFilterUnexpected"] = "DocumentStreamFailureToCreateFilterUnexpected";
    /** Metric duplicate ids. */
    KnownCollectionConfigurationErrorType["MetricDuplicateIds"] = "MetricDuplicateIds";
    /** Metric telemetry type unsupported. */
    KnownCollectionConfigurationErrorType["MetricTelemetryTypeUnsupported"] = "MetricTelemetryTypeUnsupported";
    /** Metric failed to create. */
    KnownCollectionConfigurationErrorType["MetricFailureToCreate"] = "MetricFailureToCreate";
    /** Metric failed to create filter unexpectedly. */
    KnownCollectionConfigurationErrorType["MetricFailureToCreateFilterUnexpected"] = "MetricFailureToCreateFilterUnexpected";
    /** Filter failed to create unexpectedly. */
    KnownCollectionConfigurationErrorType["FilterFailureToCreateUnexpected"] = "FilterFailureToCreateUnexpected";
    /** Collection configuration failed to create unexpectedly. */
    KnownCollectionConfigurationErrorType["CollectionConfigurationFailureToCreateUnexpected"] = "CollectionConfigurationFailureToCreateUnexpected";
})(KnownCollectionConfigurationErrorType || (KnownCollectionConfigurationErrorType = {}));
/** Known values of {@link PredicateType} that the service accepts. */
export var KnownPredicateType;
(function (KnownPredicateType) {
    /** Represents an equality predicate. */
    KnownPredicateType["Equal"] = "Equal";
    /** Represents a not-equal predicate. */
    KnownPredicateType["NotEqual"] = "NotEqual";
    /** Represents a less-than predicate. */
    KnownPredicateType["LessThan"] = "LessThan";
    /** Represents a greater-than predicate. */
    KnownPredicateType["GreaterThan"] = "GreaterThan";
    /** Represents a less-than-or-equal predicate. */
    KnownPredicateType["LessThanOrEqual"] = "LessThanOrEqual";
    /** Represents a greater-than-or-equal predicate. */
    KnownPredicateType["GreaterThanOrEqual"] = "GreaterThanOrEqual";
    /** Represents a contains predicate. */
    KnownPredicateType["Contains"] = "Contains";
    /** Represents a does-not-contain predicate. */
    KnownPredicateType["DoesNotContain"] = "DoesNotContain";
})(KnownPredicateType || (KnownPredicateType = {}));
/** Known values of {@link AggregationType} that the service accepts. */
export var KnownAggregationType;
(function (KnownAggregationType) {
    /** Average */
    KnownAggregationType["Avg"] = "Avg";
    /** Sum */
    KnownAggregationType["Sum"] = "Sum";
    /** Minimum */
    KnownAggregationType["Min"] = "Min";
    /** Maximum */
    KnownAggregationType["Max"] = "Max";
})(KnownAggregationType || (KnownAggregationType = {}));
/** Known values of {@link TelemetryType} that the service accepts. */
export var KnownTelemetryType;
(function (KnownTelemetryType) {
    /** Represents a request telemetry type. */
    KnownTelemetryType["Request"] = "Request";
    /** Represents a dependency telemetry type. */
    KnownTelemetryType["Dependency"] = "Dependency";
    /** Represents an exception telemetry type. */
    KnownTelemetryType["Exception"] = "Exception";
    /** Represents an event telemetry type. */
    KnownTelemetryType["Event"] = "Event";
    /** Represents a metric telemetry type. */
    KnownTelemetryType["Metric"] = "Metric";
    /** Represents a performance counter telemetry type. */
    KnownTelemetryType["PerformanceCounter"] = "PerformanceCounter";
    /** Represents a trace telemetry type. */
    KnownTelemetryType["Trace"] = "Trace";
})(KnownTelemetryType || (KnownTelemetryType = {}));
//# sourceMappingURL=index.js.map