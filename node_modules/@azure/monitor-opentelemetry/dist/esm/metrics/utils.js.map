{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/metrics/utils.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AAEpD,OAAO,EACL,qBAAqB,EACrB,0BAA0B,EAC1B,uBAAuB,EACvB,kBAAkB,EAClB,oBAAoB,EACpB,sBAAsB,EACtB,oBAAoB,EACpB,qBAAqB,EACrB,qBAAqB,EACrB,wBAAwB,EACxB,qBAAqB,EACrB,iBAAiB,EACjB,+BAA+B,EAC/B,+BAA+B,EAC/B,gCAAgC,EAChC,wBAAwB,EACxB,4BAA4B,EAC5B,8BAA8B,EAC9B,wBAAwB,EACxB,+BAA+B,EAC/B,wBAAwB,EACxB,6BAA6B,GAC9B,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAAE,2BAA2B,EAAE,MAAM,YAAY,CAAC;AAS5E,OAAO,EACL,iBAAiB,EACjB,cAAc,EACd,cAAc,EACd,YAAY,GACb,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,6BAA6B,CAAC;AACrD,OAAO,KAAK,EAAE,MAAM,SAAS,CAAC;AAC9B,OAAO,KAAK,OAAO,MAAM,cAAc,CAAC;AAExC,MAAM,UAAU,oBAAoB,CAAC,IAAkB;IACrD,MAAM,UAAU,GAA4B,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7E,UAAU,CAAC,QAAQ,GAAG,iBAAiB,CAAC,gBAAgB,CAAC;IACzD,MAAM,UAAU,GAAG,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC9D,UAAU,CAAC,iBAAiB,GAAG,UAAU,CAAC;IAC1C,gGAAgG;IAChG,UAAU,CAAC,cAAc;QACvB,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,cAAc,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;IAClG,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;QAC1B,UAAU,CAAC,kBAAkB,GAAG,MAAM,CAAC;IACzC,CAAC;IACD,OAAO,iBAAiB,CAAC,UAAU,CAAC,CAAC;AACvC,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,IAAkB;IACxD,MAAM,UAAU,GAA+B,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChF,UAAU,CAAC,QAAQ,GAAG,iBAAiB,CAAC,qBAAqB,CAAC;IAC9D,MAAM,UAAU,GAAG,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC9D,UAAU,CAAC,gBAAgB,GAAG,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnE,UAAU,CAAC,oBAAoB,GAAG,UAAU,CAAC;IAC7C,UAAU,CAAC,cAAc,GAAG,MAAM,CAAC;IACnC,UAAU,CAAC,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;IAC5F,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;QAC1B,UAAU,CAAC,kBAAkB,GAAG,MAAM,CAAC;IACzC,CAAC;IACD,OAAO,iBAAiB,CAAC,UAAU,CAAC,CAAC;AACvC,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,QAAkB;IACvD,MAAM,UAAU,GAAiC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAC7E,UAAU,CAAC,QAAQ,GAAG,iBAAiB,CAAC,gBAAgB,CAAC;IACzD,OAAO,UAAwB,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,QAAkB;IACnD,MAAM,UAAU,GAAiC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAC7E,UAAU,CAAC,QAAQ,GAAG,iBAAiB,CAAC,YAAY,CAAC;IACrD,OAAO,UAAwB,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,QAAkB;IAClD,MAAM,UAAU,GAAiC,EAAE,CAAC;IACpD,UAAU,CAAC,eAAe,GAAG,MAAM,CAAC;IACpC,IAAI,QAAQ,EAAE,CAAC;QACb,UAAU,CAAC,aAAa,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;QAClD,UAAU,CAAC,iBAAiB,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAChE,CAAC;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,2DAA2D;AAC3D,MAAM,UAAU,mBAAmB,CAAC,UAAsB;IACxD,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,MAAM,WAAW,GAAG,UAAU,CAAC,qBAAqB,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC;IAC5C,MAAM,WAAW,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC;IAC/C,IAAI,WAAW,EAAE,CAAC;QAChB,OAAO,MAAM,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;SAAM,IAAI,QAAQ,IAAI,WAAW,EAAE,CAAC;QACnC,OAAO,GAAG,WAAW,IAAI,QAAQ,EAAE,CAAC;IACtC,CAAC;SAAM,IAAI,WAAW,EAAE,CAAC;QACvB,OAAO,MAAM,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,QAAgB;IACtC,OAAO,CACL,QAAQ,KAAK,kBAAkB;QAC/B,QAAQ,KAAK,oBAAoB;QACjC,QAAQ,KAAK,sBAAsB;QACnC,QAAQ,KAAK,oBAAoB;QACjC,QAAQ,KAAK,qBAAqB;QAClC,QAAQ,KAAK,qBAAqB;QAClC,QAAQ,KAAK,wBAAwB;QACrC,QAAQ,KAAK,qBAAqB;QAClC,QAAQ,KAAK,iBAAiB,CAC/B,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,SAAoB;IACvD,MAAM,QAAQ,GAAG,SAAS,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACtD,sCAAsC;IACtC,IAAI,QAAQ,IAAI,QAAQ,KAAK,eAAe,EAAE,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;SAAM,IACL,SAAS,CAAC,UAAU,CAAC,0BAA0B,CAAC;QAChD,SAAS,CAAC,UAAU,CAAC,uBAAuB,CAAC,EAC7C,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,SAAoB;IACnD,MAAM,QAAQ,GAAG,SAAS,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACtD,sCAAsC;IACtC,IAAI,QAAQ,IAAI,QAAQ,KAAK,aAAa,EAAE,CAAC;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC;SAAM,IACL,CAAC,SAAS,CAAC,UAAU,CAAC,0BAA0B,CAAC;QACjD,CAAC,SAAS,CAAC,UAAU,CAAC,uBAAuB,CAAC,EAC9C,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,MAAgC;IAC9D,gEAAgE;IAChE,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,UAAwB,CAAC,CAAC,CAAC;IACxE,OAAO,SAAS,KAAK,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;AAC7E,CAAC;AAED,MAAM,UAAU,iBAAiB,CAC/B,UAAgE;IAEhE,MAAM,mBAAmB,GAAQ,EAAE,CAAC;IACpC,KAAK,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAC7B,mBAAmB,CAAC,2BAA2B,CAAC,GAA8B,CAAC,CAAC,GAC9E,UACD,CAAC,GAAG,CAAC,CAAC;IACT,CAAC;IACD,OAAO,mBAAiC,CAAC;AAC3C,CAAC;AAED,+BAA+B;AAC/B,MAAM,UAAU,iBAAiB;IAC/B,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,EAAE,CAAC;QACzB,OAAO,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;IACnC,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;QACnE,OAAO,CAAC,CAAC;IACX,CAAC;AACH,CAAC;AAED,+FAA+F;AAC/F,4FAA4F;AAC5F,gCAAgC;AAChC,MAAM,UAAU,0BAA0B,CACxC,UAAkB,EAClB,YAA6B;IAE7B,IAAI,OAAO,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;IAC/B,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IAChD,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC;IAE3D,MAAM,UAAU,GAAG,CAAC,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;IAC9D,MAAM,aAAa,GAAG,aAAa,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,SAAS,CAAC;IAC1F,kFAAkF;IAClF,OAAO,GAAG,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IAEtC,OAAO,CAAC,UAAU,GAAG,aAAa,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AACtD,CAAC;AAED,sFAAsF;AACtF,4FAA4F;AAC5F,gCAAgC;AAChC,MAAM,UAAU,gBAAgB,CAAC,UAAkB,EAAE,YAA6B;IAChF,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAE,CAAC;QACtB,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAChD,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC;QAE3D,MAAM,UAAU,GAAG,CAAC,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;QAC9D,MAAM,aAAa,GAAG,aAAa,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,SAAS,CAAC;QAE1F,OAAO,CAAC,UAAU,GAAG,aAAa,CAAC,GAAG,GAAG,CAAC;IAC5C,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;QAChE,OAAO,CAAC,CAAC;IACX,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,YAAY,CAAC,QAAkB;IAC7C,IAAI,SAAS,GAAG,EAAE,CAAC;IACnB,qBAAqB;IACrB,MAAM,WAAW,GAAW,QAAQ,CAAC,UAAU,CAAC,wBAAwB,CAAW,CAAC;IACpF,MAAM,gBAAgB,GAAW,QAAQ,CAAC,UAAU,CAAC,6BAA6B,CAAW,CAAC;IAC9F,IAAI,WAAW,EAAE,CAAC;QAChB,iEAAiE;QACjE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE,CAAC;YACvD,IAAI,gBAAgB,EAAE,CAAC;gBACrB,OAAO,GAAG,gBAAgB,IAAI,WAAW,EAAE,CAAC;YAC9C,CAAC;iBAAM,CAAC;gBACN,OAAO,MAAM,CAAC,WAAW,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;aAAM,CAAC;YACN,yEAAyE;YACzE,IAAI,gBAAgB,EAAE,CAAC;gBACrB,SAAS,GAAG,GAAG,gBAAgB,IAAI,WAAW,EAAE,CAAC;YACnD,CAAC;iBAAM,CAAC;gBACN,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;YAClC,CAAC;QACH,CAAC;IACH,CAAC;IACD,+CAA+C;IAC/C,MAAM,wBAAwB,GAAG,QAAQ,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC;IACtF,IAAI,wBAAwB,EAAE,CAAC;QAC7B,OAAO,MAAM,CAAC,wBAAwB,CAAC,CAAC;IAC1C,CAAC;IACD,MAAM,uBAAuB,GAAG,QAAQ,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC;IACrF,IAAI,uBAAuB,EAAE,CAAC;QAC5B,OAAO,MAAM,CAAC,uBAAuB,CAAC,CAAC;IACzC,CAAC;IACD,MAAM,yBAAyB,GAAG,QAAQ,CAAC,UAAU,CAAC,gCAAgC,CAAC,CAAC;IACxF,IAAI,yBAAyB,EAAE,CAAC;QAC9B,OAAO,MAAM,CAAC,yBAAyB,CAAC,CAAC;IAC3C,CAAC;IACD,MAAM,iBAAiB,GAAG,QAAQ,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC;IACxE,IAAI,iBAAiB,EAAE,CAAC;QACtB,OAAO,MAAM,CAAC,iBAAiB,CAAC,CAAC;IACnC,CAAC;IACD,MAAM,qBAAqB,GAAG,QAAQ,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC;IAChF,IAAI,qBAAqB,EAAE,CAAC;QAC1B,OAAO,MAAM,CAAC,qBAAqB,CAAC,CAAC;IACvC,CAAC;IACD,MAAM,uBAAuB,GAAG,QAAQ,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;IACpF,IAAI,uBAAuB,EAAE,CAAC;QAC5B,OAAO,MAAM,CAAC,uBAAuB,CAAC,CAAC;IACzC,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAAC,QAAkB;IACrD,+CAA+C;IAC/C,MAAM,iBAAiB,GAAG,QAAQ,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC;IACxE,IAAI,iBAAiB,EAAE,CAAC;QACtB,OAAO,MAAM,CAAC,iBAAiB,CAAC,CAAC;IACnC,CAAC;IACD,qBAAqB;IACrB,MAAM,iBAAiB,GAAG,QAAQ,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC;IAC/E,IAAI,iBAAiB,EAAE,CAAC;QACtB,OAAO,MAAM,CAAC,iBAAiB,CAAC,CAAC;IACnC,CAAC;IACD,UAAU;IACV,OAAO,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;AAC7B,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Attributes } from \"@opentelemetry/api\";\nimport { SpanStatusCode } from \"@opentelemetry/api\";\nimport type { ReadableSpan } from \"@opentelemetry/sdk-trace-base\";\nimport {\n  SEMATTRS_PEER_SERVICE,\n  SEMATTRS_EXCEPTION_MESSAGE,\n  SEMATTRS_EXCEPTION_TYPE,\n  DBSYSTEMVALUES_DB2,\n  DBSYSTEMVALUES_DERBY,\n  DBSYSTEMVALUES_MARIADB,\n  DBSYSTEMVALUES_MSSQL,\n  DBSYSTEMVALUES_ORACLE,\n  DBSYSTEMVALUES_SQLITE,\n  DBSYSTEMVALUES_OTHER_SQL,\n  DBSYSTEMVALUES_HSQLDB,\n  DBSYSTEMVALUES_H2,\n  SEMRESATTRS_K8S_DEPLOYMENT_NAME,\n  SEMRESATTRS_K8S_REPLICASET_NAME,\n  SEMRESATTRS_K8S_STATEFULSET_NAME,\n  SEMRESATTRS_K8S_JOB_NAME,\n  SEMRESATTRS_K8S_CRONJOB_NAME,\n  SEMRESATTRS_K8S_DAEMONSET_NAME,\n  SEMRESATTRS_K8S_POD_NAME,\n  SEMRESATTRS_SERVICE_INSTANCE_ID,\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_SERVICE_NAMESPACE,\n} from \"@opentelemetry/semantic-conventions\";\nimport { StandardMetricIds, StandardMetricPropertyNames } from \"./types.js\";\nimport type {\n  MetricDependencyDimensions,\n  MetricDimensionTypeKeys,\n  MetricRequestDimensions,\n  StandardMetricBaseDimensions,\n} from \"./types.js\";\nimport type { LogRecord } from \"@opentelemetry/sdk-logs\";\nimport type { Resource } from \"@opentelemetry/resources\";\nimport {\n  getHttpStatusCode,\n  getNetHostPort,\n  getNetPeerName,\n  getUserAgent,\n} from \"./quickpulse/utils.js\";\nimport { Logger } from \"../shared/logging/logger.js\";\nimport * as os from \"node:os\";\nimport * as process from \"node:process\";\n\nexport function getRequestDimensions(span: ReadableSpan): Attributes {\n  const dimensions: MetricRequestDimensions = getBaseDimensions(span.resource);\n  dimensions.metricId = StandardMetricIds.REQUEST_DURATION;\n  const statusCode = String(getHttpStatusCode(span.attributes));\n  dimensions.requestResultCode = statusCode;\n  // OTel treats 4xx request responses as UNSET SpanStatusCode, but we should count them as failed\n  dimensions.requestSuccess =\n    span.status.code !== SpanStatusCode.ERROR && (Number(statusCode) || 0) < 400 ? \"True\" : \"False\";\n  if (isSyntheticLoad(span)) {\n    dimensions.operationSynthetic = \"True\";\n  }\n  return convertDimensions(dimensions);\n}\n\nexport function getDependencyDimensions(span: ReadableSpan): Attributes {\n  const dimensions: MetricDependencyDimensions = getBaseDimensions(span.resource);\n  dimensions.metricId = StandardMetricIds.DEPENDENCIES_DURATION;\n  const statusCode = String(getHttpStatusCode(span.attributes));\n  dimensions.dependencyTarget = getDependencyTarget(span.attributes);\n  dimensions.dependencyResultCode = statusCode;\n  dimensions.dependencyType = \"http\";\n  dimensions.dependencySuccess = span.status.code !== SpanStatusCode.ERROR ? \"True\" : \"False\";\n  if (isSyntheticLoad(span)) {\n    dimensions.operationSynthetic = \"True\";\n  }\n  return convertDimensions(dimensions);\n}\n\nexport function getExceptionDimensions(resource: Resource): Attributes {\n  const dimensions: StandardMetricBaseDimensions = getBaseDimensions(resource);\n  dimensions.metricId = StandardMetricIds.EXCEPTIONS_COUNT;\n  return dimensions as Attributes;\n}\n\nexport function getTraceDimensions(resource: Resource): Attributes {\n  const dimensions: StandardMetricBaseDimensions = getBaseDimensions(resource);\n  dimensions.metricId = StandardMetricIds.TRACES_COUNT;\n  return dimensions as Attributes;\n}\n\nexport function getBaseDimensions(resource: Resource): StandardMetricBaseDimensions {\n  const dimensions: StandardMetricBaseDimensions = {};\n  dimensions.IsAutocollected = \"True\";\n  if (resource) {\n    dimensions.cloudRoleName = getCloudRole(resource);\n    dimensions.cloudRoleInstance = getCloudRoleInstance(resource);\n  }\n  return dimensions;\n}\n\n// Get metric dependency target, avoiding high cardinality.\nexport function getDependencyTarget(attributes: Attributes): string {\n  if (!attributes) {\n    return \"\";\n  }\n  const peerService = attributes[SEMATTRS_PEER_SERVICE];\n  const hostPort = getNetHostPort(attributes);\n  const netPeerName = getNetPeerName(attributes);\n  if (peerService) {\n    return String(peerService);\n  } else if (hostPort && netPeerName) {\n    return `${netPeerName}:${hostPort}`;\n  } else if (netPeerName) {\n    return String(netPeerName);\n  }\n  return \"\";\n}\n\nexport function isSqlDB(dbSystem: string): boolean {\n  return (\n    dbSystem === DBSYSTEMVALUES_DB2 ||\n    dbSystem === DBSYSTEMVALUES_DERBY ||\n    dbSystem === DBSYSTEMVALUES_MARIADB ||\n    dbSystem === DBSYSTEMVALUES_MSSQL ||\n    dbSystem === DBSYSTEMVALUES_ORACLE ||\n    dbSystem === DBSYSTEMVALUES_SQLITE ||\n    dbSystem === DBSYSTEMVALUES_OTHER_SQL ||\n    dbSystem === DBSYSTEMVALUES_HSQLDB ||\n    dbSystem === DBSYSTEMVALUES_H2\n  );\n}\n\nexport function isExceptionTelemetry(logRecord: LogRecord): boolean {\n  const baseType = logRecord.attributes[\"_MS.baseType\"];\n  // If Application Insights Legacy logs\n  if (baseType && baseType === \"ExceptionData\") {\n    return true;\n  } else if (\n    logRecord.attributes[SEMATTRS_EXCEPTION_MESSAGE] ||\n    logRecord.attributes[SEMATTRS_EXCEPTION_TYPE]\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function isTraceTelemetry(logRecord: LogRecord): boolean {\n  const baseType = logRecord.attributes[\"_MS.baseType\"];\n  // If Application Insights Legacy logs\n  if (baseType && baseType === \"MessageData\") {\n    return true;\n  } else if (\n    !logRecord.attributes[SEMATTRS_EXCEPTION_MESSAGE] &&\n    !logRecord.attributes[SEMATTRS_EXCEPTION_TYPE]\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function isSyntheticLoad(record: LogRecord | ReadableSpan): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-base-to-string\n  const userAgent = String(getUserAgent(record.attributes as Attributes));\n  return userAgent !== null && userAgent.includes(\"AlwaysOn\") ? true : false;\n}\n\nexport function convertDimensions(\n  dimensions: MetricDependencyDimensions | MetricRequestDimensions,\n): Attributes {\n  const convertedDimensions: any = {};\n  for (const dim in dimensions) {\n    convertedDimensions[StandardMetricPropertyNames[dim as MetricDimensionTypeKeys]] = (\n      dimensions as any\n    )[dim];\n  }\n  return convertedDimensions as Attributes;\n}\n\n// to get physical memory bytes\nexport function getPhysicalMemory(): number {\n  if (process?.memoryUsage) {\n    return process.memoryUsage.rss();\n  } else {\n    Logger.getInstance().debug(\"process.memoryUsage is not available\");\n    return 0;\n  }\n}\n\n// This function can get the normalized cpu, but it assumes that after this function is called,\n// that the process.hrtime.bigint() & process.cpuUsage() are called/stored to be used as the\n// parameters for the next call.\nexport function getProcessorTimeNormalized(\n  lastHrTime: bigint,\n  lastCpuUsage: NodeJS.CpuUsage,\n): number {\n  let numCpus = os.cpus().length;\n  const usageDif = process.cpuUsage(lastCpuUsage);\n  const elapsedTimeNs = process.hrtime.bigint() - lastHrTime;\n\n  const usageDifMs = (usageDif.user + usageDif.system) / 1000.0;\n  const elapsedTimeMs = elapsedTimeNs === BigInt(0) ? 1 : Number(elapsedTimeNs) / 1000000.0;\n  // just for division safety, don't know a case in which this would actually happen\n  numCpus = numCpus === 0 ? 1 : numCpus;\n\n  return (usageDifMs / elapsedTimeMs / numCpus) * 100;\n}\n\n// This function can get the cpu %, but it assumes that after this function is called,\n// that the process.hrtime.bigint() & process.cpuUsage() are called/stored to be used as the\n// parameters for the next call.\nexport function getProcessorTime(lastHrTime: bigint, lastCpuUsage: NodeJS.CpuUsage): number {\n  if (process?.cpuUsage) {\n    const usageDif = process.cpuUsage(lastCpuUsage);\n    const elapsedTimeNs = process.hrtime.bigint() - lastHrTime;\n\n    const usageDifMs = (usageDif.user + usageDif.system) / 1000.0;\n    const elapsedTimeMs = elapsedTimeNs === BigInt(0) ? 1 : Number(elapsedTimeNs) / 1000000.0;\n\n    return (usageDifMs / elapsedTimeMs) * 100;\n  } else {\n    Logger.getInstance().debug(\"process.cpuUsage is not available\");\n    return 0;\n  }\n}\n\n/**\n * Gets the cloud role name based on the resource attributes\n */\nexport function getCloudRole(resource: Resource): string {\n  let cloudRole = \"\";\n  // Service attributes\n  const serviceName: string = resource.attributes[SEMRESATTRS_SERVICE_NAME] as string;\n  const serviceNamespace: string = resource.attributes[SEMRESATTRS_SERVICE_NAMESPACE] as string;\n  if (serviceName) {\n    // Custom Service name provided by customer is highest precedence\n    if (!String(serviceName).startsWith(\"unknown_service\")) {\n      if (serviceNamespace) {\n        return `${serviceNamespace}.${serviceName}`;\n      } else {\n        return String(serviceName);\n      }\n    } else {\n      // Service attributes will be only used if K8S attributes are not present\n      if (serviceNamespace) {\n        cloudRole = `${serviceNamespace}.${serviceName}`;\n      } else {\n        cloudRole = String(serviceName);\n      }\n    }\n  }\n  // Kubernetes attributes should take precedence\n  const kubernetesDeploymentName = resource.attributes[SEMRESATTRS_K8S_DEPLOYMENT_NAME];\n  if (kubernetesDeploymentName) {\n    return String(kubernetesDeploymentName);\n  }\n  const kuberneteReplicasetName = resource.attributes[SEMRESATTRS_K8S_REPLICASET_NAME];\n  if (kuberneteReplicasetName) {\n    return String(kuberneteReplicasetName);\n  }\n  const kubernetesStatefulSetName = resource.attributes[SEMRESATTRS_K8S_STATEFULSET_NAME];\n  if (kubernetesStatefulSetName) {\n    return String(kubernetesStatefulSetName);\n  }\n  const kubernetesJobName = resource.attributes[SEMRESATTRS_K8S_JOB_NAME];\n  if (kubernetesJobName) {\n    return String(kubernetesJobName);\n  }\n  const kubernetesCronjobName = resource.attributes[SEMRESATTRS_K8S_CRONJOB_NAME];\n  if (kubernetesCronjobName) {\n    return String(kubernetesCronjobName);\n  }\n  const kubernetesDaemonsetName = resource.attributes[SEMRESATTRS_K8S_DAEMONSET_NAME];\n  if (kubernetesDaemonsetName) {\n    return String(kubernetesDaemonsetName);\n  }\n  return cloudRole;\n}\n\n/**\n * Gets the cloud role instance based on the resource attributes\n */\nexport function getCloudRoleInstance(resource: Resource): string {\n  // Kubernetes attributes should take precedence\n  const kubernetesPodName = resource.attributes[SEMRESATTRS_K8S_POD_NAME];\n  if (kubernetesPodName) {\n    return String(kubernetesPodName);\n  }\n  // Service attributes\n  const serviceInstanceId = resource.attributes[SEMRESATTRS_SERVICE_INSTANCE_ID];\n  if (serviceInstanceId) {\n    return String(serviceInstanceId);\n  }\n  // Default\n  return os && os.hostname();\n}\n"]}