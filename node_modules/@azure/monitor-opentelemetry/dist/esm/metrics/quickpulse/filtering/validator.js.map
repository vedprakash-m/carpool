{"version":3,"file":"validator.js","sourceRoot":"","sources":["../../../../../src/metrics/quickpulse/filtering/validator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TelemetryTypeError, UnexpectedFilterCreateError } from \"./quickpulseErrors.js\";\nimport { KnownRequestColumns, KnownDependencyColumns } from \"../types.js\";\nimport type {\n  DerivedMetricInfo,\n  FilterInfo,\n  DocumentFilterConjunctionGroupInfo,\n  FilterConjunctionGroupInfo,\n} from \"../../../generated/index.js\";\nimport { KnownTelemetryType, KnownPredicateType } from \"../../../generated/index.js\";\nimport { getMsFromFilterTimestampString } from \"../utils.js\";\n\nconst knownStringColumns = new Set<string>([\n  KnownRequestColumns.Url,\n  KnownRequestColumns.Name,\n  KnownDependencyColumns.Target,\n  KnownDependencyColumns.Type,\n  KnownDependencyColumns.Data,\n  \"Message\",\n  \"Exception.Message\",\n  \"Exception.StackTrace\",\n]);\n\nexport class Validator {\n  public validateTelemetryType(telemetryType: string): void {\n    if (telemetryType === KnownTelemetryType.PerformanceCounter.toString()) {\n      throw new TelemetryTypeError(\n        \"The telemetry type PerformanceCounter was specified, but this distro does not send performance counters to quickpulse.\",\n      );\n    } else if (telemetryType === KnownTelemetryType.Event.toString()) {\n      throw new TelemetryTypeError(\n        \"The telemetry type Event was specified, but this telemetry type is not supported via OpenTelemetry.\",\n      );\n    } else if (telemetryType === KnownTelemetryType.Metric.toString()) {\n      throw new TelemetryTypeError(\n        \"The telemetry type Metric was specified, but this distro does not send custom live metrics to quickpulse.\",\n      );\n    } else if (!(telemetryType in KnownTelemetryType)) {\n      throw new TelemetryTypeError(`'${telemetryType}' is not a valid telemetry type.`);\n    }\n  }\n\n  public checkCustomMetricProjection(derivedMetricInfo: DerivedMetricInfo): void {\n    if (derivedMetricInfo.projection.startsWith(\"CustomMetrics.\")) {\n      throw new UnexpectedFilterCreateError(\n        \"The Projection of a customMetric property is not supported via OpenTelemetry.\",\n      );\n    }\n  }\n\n  public validateMetricFilters(derivedMetricInfo: DerivedMetricInfo): void {\n    derivedMetricInfo.filterGroups.forEach((filterGroup) => {\n      filterGroup.filters.forEach((filter) => {\n        this.validateFieldNames(filter.fieldName, derivedMetricInfo.telemetryType);\n        this.validatePredicateAndComparand(filter);\n      });\n    });\n  }\n\n  public validateDocumentFilters(\n    documentFilterConjuctionGroupInfo: DocumentFilterConjunctionGroupInfo,\n  ): void {\n    const filterConjunctionGroupInfo: FilterConjunctionGroupInfo =\n      documentFilterConjuctionGroupInfo.filters;\n    filterConjunctionGroupInfo.filters.forEach((filter) => {\n      this.validateFieldNames(filter.fieldName, documentFilterConjuctionGroupInfo.telemetryType);\n      this.validatePredicateAndComparand(filter);\n    });\n  }\n\n  private isCustomDimOrAnyField(fieldName: string): boolean {\n    return fieldName.startsWith(\"CustomDimensions.\") || fieldName === \"*\";\n  }\n\n  private validateFieldNames(fieldName: string, telemetryType: string): void {\n    if (fieldName === \"\") {\n      throw new UnexpectedFilterCreateError(\"A filter must have a field name.\");\n    }\n    if (fieldName.startsWith(\"CustomMetrics.\")) {\n      throw new UnexpectedFilterCreateError(\n        \"Filtering of a customMetric property is not supported via OpenTelemetry.\",\n      );\n    }\n\n    switch (telemetryType) {\n      case KnownTelemetryType.Request.toString():\n        if (!this.isCustomDimOrAnyField(fieldName) && !(fieldName in KnownRequestColumns)) {\n          throw new UnexpectedFilterCreateError(\n            `'${fieldName}' is not a valid field name for the telemetry type Request.`,\n          );\n        }\n        break;\n      case KnownTelemetryType.Dependency.toString():\n        if (!this.isCustomDimOrAnyField(fieldName) && !(fieldName in KnownDependencyColumns)) {\n          throw new UnexpectedFilterCreateError(\n            `'${fieldName}' is not a valid field name for the telemetry type Dependency.`,\n          );\n        }\n        break;\n      case KnownTelemetryType.Exception.toString():\n        if (\n          !this.isCustomDimOrAnyField(fieldName) &&\n          fieldName !== \"Exception.Message\" &&\n          fieldName !== \"Exception.StackTrace\"\n        ) {\n          throw new UnexpectedFilterCreateError(\n            `'${fieldName}' is not a valid field name for the telemetry type Exception.`,\n          );\n        }\n        break;\n      case KnownTelemetryType.Trace.toString():\n        if (!this.isCustomDimOrAnyField(fieldName) && fieldName !== \"Message\") {\n          throw new UnexpectedFilterCreateError(\n            `'${fieldName}' is not a valid field name for the telemetry type Trace.`,\n          );\n        }\n        break;\n      default:\n        throw new TelemetryTypeError(`'${telemetryType}' is not a supported telemetry type.`);\n    }\n  }\n\n  private validatePredicateAndComparand(filter: FilterInfo): void {\n    if (!(filter.predicate in KnownPredicateType)) {\n      throw new UnexpectedFilterCreateError(`'${filter.predicate}' is not a valid predicate.`);\n    } else if (filter.comparand === \"\") {\n      throw new UnexpectedFilterCreateError(\n        `A filter must have a comparand. FilterName: '${filter.fieldName}' Predicate: '${filter.predicate}' Comparand: '${filter.comparand}'`,\n      );\n    } else if (\n      filter.fieldName === \"*\" &&\n      !(\n        filter.predicate === KnownPredicateType.Contains.toString() ||\n        filter.predicate === KnownPredicateType.DoesNotContain.toString()\n      )\n    ) {\n      throw new UnexpectedFilterCreateError(\n        `The predicate '${filter.predicate}' is not supported for the field name '*'`,\n      );\n    } else if (\n      filter.fieldName === KnownDependencyColumns.ResultCode.toString() ||\n      filter.fieldName === KnownRequestColumns.ResponseCode.toString() ||\n      filter.fieldName === KnownDependencyColumns.Duration.toString()\n    ) {\n      if (\n        filter.predicate === KnownPredicateType.Contains.toString() ||\n        filter.predicate === KnownPredicateType.DoesNotContain.toString()\n      ) {\n        throw new UnexpectedFilterCreateError(\n          `The predicate '${filter.predicate}' is not supported for the field name '${filter.fieldName}'`,\n        );\n      }\n      // Duration comparand should be a timestamp; Response/ResultCode comparand should be interpreted as double.\n      if (filter.fieldName === KnownDependencyColumns.Duration.toString()) {\n        if (isNaN(getMsFromFilterTimestampString(filter.comparand))) {\n          throw new UnexpectedFilterCreateError(\n            `The comparand '${filter.comparand}' can't be converted to a double (ms).`,\n          );\n        }\n      } else if (isNaN(parseFloat(filter.comparand))) {\n        throw new UnexpectedFilterCreateError(\n          `The comparand '${filter.comparand}' can't be converted to a double.`,\n        );\n      }\n    } else if (\n      knownStringColumns.has(filter.fieldName) ||\n      filter.fieldName.startsWith(\"CustomDimensions.\")\n    ) {\n      if (\n        filter.predicate === KnownPredicateType.GreaterThan.toString() ||\n        filter.predicate === KnownPredicateType.GreaterThanOrEqual.toString() ||\n        filter.predicate === KnownPredicateType.LessThan.toString() ||\n        filter.predicate === KnownPredicateType.LessThanOrEqual.toString()\n      ) {\n        throw new UnexpectedFilterCreateError(\n          `The predicate '${filter.predicate}' is not supported for the field name '${filter.fieldName}'. If this is a custom dimension, it would be treated as string.`,\n        );\n      }\n    } else if (filter.fieldName === KnownRequestColumns.Success.toString()) {\n      if (\n        filter.predicate !== KnownPredicateType.Equal.toString() &&\n        filter.predicate !== KnownPredicateType.NotEqual.toString()\n      ) {\n        throw new UnexpectedFilterCreateError(\n          `The predicate '${filter.predicate}' is not supported for the field name '${filter.fieldName}'.`,\n        );\n      }\n      filter.comparand = filter.comparand.toLowerCase();\n      if (filter.comparand !== \"true\" && filter.comparand !== \"false\") {\n        throw new UnexpectedFilterCreateError(\n          `The comparand '${filter.comparand}' is not a valid boolean value for the fieldName Success.`,\n        );\n      }\n    }\n  }\n}\n"]}