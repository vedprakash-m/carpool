{"version":3,"file":"exporter.js","sourceRoot":"","sources":["../../../../../src/metrics/quickpulse/export/exporter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { context, diag } from \"@opentelemetry/api\";\nimport type { PushMetricExporter, ResourceMetrics } from \"@opentelemetry/sdk-metrics\";\nimport { AggregationTemporality, InstrumentType } from \"@opentelemetry/sdk-metrics\";\nimport type { ExportResult } from \"@opentelemetry/core\";\nimport { ExportResultCode, suppressTracing } from \"@opentelemetry/core\";\nimport type { QuickpulseExporterOptions } from \"../types.js\";\nimport { QuickpulseSender } from \"./sender.js\";\nimport type {\n  DocumentIngress,\n  MonitoringDataPoint,\n  PublishOptionalParams,\n  PublishResponse,\n  CollectionConfigurationError,\n} from \"../../../generated/index.js\";\nimport { getTransmissionTime, resourceMetricsToQuickpulseDataPoint } from \"../utils.js\";\n\n/**\n * Quickpulse Metric Exporter.\n */\nexport class QuickpulseMetricExporter implements PushMetricExporter {\n  private sender: QuickpulseSender;\n  private postCallback: (response: PublishResponse | undefined) => void;\n  private getDocumentsFn: () => DocumentIngress[];\n  // Monitoring data point with common properties\n  private baseMonitoringDataPoint: MonitoringDataPoint;\n  private etag: string;\n  private getErrorsFn: () => CollectionConfigurationError[];\n  private getDerivedMetricValuesFn: () => Map<string, number>;\n\n  /**\n   * Initializes a new instance of the AzureMonitorMetricExporter class.\n   * @param AzureExporterConfig - Exporter configuration.\n   */\n\n  constructor(options: QuickpulseExporterOptions) {\n    this.sender = new QuickpulseSender({\n      endpointUrl: options.endpointUrl,\n      instrumentationKey: options.instrumentationKey,\n      credential: options.credential,\n      credentialScopes: options.credentialScopes,\n    });\n    this.postCallback = options.postCallback;\n    this.getDocumentsFn = options.getDocumentsFn;\n    this.baseMonitoringDataPoint = options.baseMonitoringDataPoint;\n    this.getErrorsFn = options.getErrorsFn;\n    this.etag = \"\";\n    this.getDerivedMetricValuesFn = options.getDerivedMetricValuesFn;\n    diag.debug(\"QuickpulseMetricExporter was successfully setup\");\n  }\n\n  /**\n   * Export OpenTelemetry resource metrics.\n   * @param metrics - Resource metrics to export.\n   * @param resultCallback - Result callback.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  async export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void,\n  ): Promise<void> {\n    diag.info(`Exporting Live metrics(s). Converting to envelopes...`);\n    const optionalParams: PublishOptionalParams = {\n      monitoringDataPoints: resourceMetricsToQuickpulseDataPoint(\n        metrics,\n        this.baseMonitoringDataPoint,\n        this.getDocumentsFn(),\n        this.getErrorsFn(),\n        this.getDerivedMetricValuesFn(),\n      ),\n      transmissionTime: getTransmissionTime(),\n      configurationEtag: this.etag,\n    };\n    // Supress tracing until OpenTelemetry Metrics SDK support it\n    await context.with(suppressTracing(context.active()), async () => {\n      try {\n        this.postCallback(await this.sender.publish(optionalParams));\n        resultCallback({ code: ExportResultCode.SUCCESS });\n      } catch (error) {\n        this.postCallback(undefined);\n        resultCallback({ code: ExportResultCode.FAILED });\n      }\n    });\n  }\n\n  /**\n   * Shutdown Exporter.\n   */\n  public async shutdown(): Promise<void> {\n    diag.info(\"QuickpulseMetricExporter shutting down\");\n    return Promise.resolve();\n  }\n\n  /**\n   * Select aggregation temporality\n   */\n  public selectAggregationTemporality(instrumentType: InstrumentType): AggregationTemporality {\n    if (\n      instrumentType === InstrumentType.UP_DOWN_COUNTER ||\n      instrumentType === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER\n    ) {\n      return AggregationTemporality.CUMULATIVE;\n    }\n    return AggregationTemporality.DELTA;\n  }\n\n  /**\n   * Force flush\n   */\n  public async forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * Get Sender\n   */\n  public getSender(): QuickpulseSender {\n    return this.sender;\n  }\n\n  public setEtag(etag: string): void {\n    this.etag = etag;\n  }\n}\n"]}