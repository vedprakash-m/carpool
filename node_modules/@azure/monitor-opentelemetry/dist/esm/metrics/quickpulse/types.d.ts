import type { TokenCredential } from "@azure/core-auth";
import type { MonitoringDataPoint, PublishResponse } from "../../generated/index.js";
import type { DocumentIngress, CollectionConfigurationError } from "../../generated/index.js";
/**
 * Quickpulse Exporter Options
 */
export interface QuickpulseExporterOptions {
    endpointUrl: string;
    instrumentationKey: string;
    credentialScopes?: string | string[];
    /**
     * Token Credential
     */
    credential?: TokenCredential;
    baseMonitoringDataPoint: MonitoringDataPoint;
    postCallback: (response: PublishResponse | undefined) => void;
    getDocumentsFn: () => DocumentIngress[];
    getErrorsFn: () => CollectionConfigurationError[];
    getDerivedMetricValuesFn: () => Map<string, number>;
}
export declare enum QuickPulseOpenTelemetryMetricNames {
    PHYSICAL_BYTES = "azureMonitor.physicalBytes",
    PROCESSOR_TIME_NORMALIZED = "azureMonitor.percentProcessorTimeNormalized",
    REQUEST_RATE = "azureMonitor.requestsSec",
    REQUEST_FAILURE_RATE = "azureMonitor.requestsFailedSec",
    REQUEST_DURATION = "azureMonitor.requestDuration",
    DEPENDENCY_RATE = "azureMonitor.dependencyCallsSec",
    DEPENDENCY_FAILURE_RATE = "azureMonitor.dependencyCallsFailedSec",
    DEPENDENCY_DURATION = "azureMonitor.dependencyCallDuration",
    EXCEPTION_RATE = "azureMonitor.exceptionsSec"
}
export declare enum QuickPulseMetricNames {
    COMMITTED_BYTES = "\\Memory\\Committed Bytes",
    PHYSICAL_BYTES = "\\Process\\Physical Bytes",
    PROCESSOR_TIME = "\\Processor(_Total)\\% Processor Time",
    PROCESSOR_TIME_NORMALIZED = "\\% Process\\Processor Time Normalized",
    REQUEST_RATE = "\\ApplicationInsights\\Requests/Sec",
    REQUEST_FAILURE_RATE = "\\ApplicationInsights\\Requests Failed/Sec",
    REQUEST_DURATION = "\\ApplicationInsights\\Request Duration",
    DEPENDENCY_RATE = "\\ApplicationInsights\\Dependency Calls/Sec",
    DEPENDENCY_FAILURE_RATE = "\\ApplicationInsights\\Dependency Calls Failed/Sec",
    DEPENDENCY_DURATION = "\\ApplicationInsights\\Dependency Call Duration",
    EXCEPTION_RATE = "\\ApplicationInsights\\Exceptions/Sec"
}
export interface TelemetryData {
    CustomDimensions: Map<string, string>;
}
export interface RequestData extends TelemetryData {
    Url: string;
    Duration: number;
    ResponseCode: number;
    Success: boolean;
    Name: string;
}
export interface DependencyData extends TelemetryData {
    Target: string;
    Duration: number;
    Success: boolean;
    Name: string;
    ResultCode: number;
    Type: string;
    Data: string;
}
export interface ExceptionData extends TelemetryData {
    Message: string;
    StackTrace: string;
}
export interface TraceData extends TelemetryData {
    Message: string;
}
export declare enum DependencyTypes {
    InProc = "InProc",
    QueueMessage = "Queue Message",
    Sql = "SQL",
    Http = "Http",
    Grpc = "GRPC",
    Wcf = "WCF Service",
    mysql = "mysql",
    postgresql = "postgresql",
    mongodb = "mongodb",
    redis = "redis"
}
export declare enum KnownRequestColumns {
    Url = "Url",
    Duration = "Duration",
    ResponseCode = "ResponseCode",
    Success = "Success",
    Name = "Name"
}
export declare enum KnownDependencyColumns {
    Target = "Target",
    Duration = "Duration",
    Success = "Success",
    Name = "Name",
    ResultCode = "ResultCode",
    Type = "Type",
    Data = "Data"
}
/**
 * Legacy HTTP semantic convention values
 * @internal
 */
export declare const legacySemanticValues: string[];
/**
 * HTTP semantic convention values
 * @internal
 */
export declare const httpSemanticValues: ("client.address" | "client.port" | "error.type" | "http.request.method" | "http.response.status_code" | "network.local.address" | "network.local.port" | "network.peer.address" | "network.peer.port" | "network.protocol.name" | "network.protocol.version" | "network.transport" | "server.address" | "server.port" | "url.full" | "url.path" | "url.query" | "url.scheme" | "user_agent.original")[];
//# sourceMappingURL=types.d.ts.map