// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ATTR_CLIENT_ADDRESS, ATTR_CLIENT_PORT, ATTR_ERROR_TYPE, ATTR_HTTP_REQUEST_METHOD, ATTR_HTTP_RESPONSE_STATUS_CODE, ATTR_NETWORK_LOCAL_ADDRESS, ATTR_NETWORK_LOCAL_PORT, ATTR_NETWORK_PEER_ADDRESS, ATTR_NETWORK_PEER_PORT, ATTR_NETWORK_PROTOCOL_NAME, ATTR_NETWORK_PROTOCOL_VERSION, ATTR_NETWORK_TRANSPORT, ATTR_SERVER_ADDRESS, ATTR_SERVER_PORT, ATTR_URL_FULL, ATTR_URL_PATH, ATTR_URL_QUERY, ATTR_URL_SCHEME, ATTR_USER_AGENT_ORIGINAL, SEMATTRS_DB_NAME, SEMATTRS_DB_OPERATION, SEMATTRS_DB_STATEMENT, SEMATTRS_DB_SYSTEM, SEMATTRS_EXCEPTION_MESSAGE, SEMATTRS_EXCEPTION_STACKTRACE, SEMATTRS_EXCEPTION_TYPE, SEMATTRS_HTTP_HOST, SEMATTRS_HTTP_METHOD, SEMATTRS_HTTP_ROUTE, SEMATTRS_HTTP_STATUS_CODE, SEMATTRS_HTTP_URL, SEMATTRS_NET_PEER_IP, SEMATTRS_NET_PEER_NAME, SEMATTRS_PEER_SERVICE, SEMATTRS_RPC_GRPC_STATUS_CODE, SEMATTRS_RPC_SYSTEM, } from "@opentelemetry/semantic-conventions";
export var QuickPulseOpenTelemetryMetricNames;
(function (QuickPulseOpenTelemetryMetricNames) {
    QuickPulseOpenTelemetryMetricNames["PHYSICAL_BYTES"] = "azureMonitor.physicalBytes";
    QuickPulseOpenTelemetryMetricNames["PROCESSOR_TIME_NORMALIZED"] = "azureMonitor.percentProcessorTimeNormalized";
    QuickPulseOpenTelemetryMetricNames["REQUEST_RATE"] = "azureMonitor.requestsSec";
    QuickPulseOpenTelemetryMetricNames["REQUEST_FAILURE_RATE"] = "azureMonitor.requestsFailedSec";
    QuickPulseOpenTelemetryMetricNames["REQUEST_DURATION"] = "azureMonitor.requestDuration";
    QuickPulseOpenTelemetryMetricNames["DEPENDENCY_RATE"] = "azureMonitor.dependencyCallsSec";
    QuickPulseOpenTelemetryMetricNames["DEPENDENCY_FAILURE_RATE"] = "azureMonitor.dependencyCallsFailedSec";
    QuickPulseOpenTelemetryMetricNames["DEPENDENCY_DURATION"] = "azureMonitor.dependencyCallDuration";
    QuickPulseOpenTelemetryMetricNames["EXCEPTION_RATE"] = "azureMonitor.exceptionsSec";
})(QuickPulseOpenTelemetryMetricNames || (QuickPulseOpenTelemetryMetricNames = {}));
export var QuickPulseMetricNames;
(function (QuickPulseMetricNames) {
    // Memory (old)
    QuickPulseMetricNames["COMMITTED_BYTES"] = "\\Memory\\Committed Bytes";
    // Memory (new - current process)
    QuickPulseMetricNames["PHYSICAL_BYTES"] = "\\Process\\Physical Bytes";
    // CPU (old)
    QuickPulseMetricNames["PROCESSOR_TIME"] = "\\Processor(_Total)\\% Processor Time";
    // CPU (new - current process)
    QuickPulseMetricNames["PROCESSOR_TIME_NORMALIZED"] = "\\% Process\\Processor Time Normalized";
    // Request
    QuickPulseMetricNames["REQUEST_RATE"] = "\\ApplicationInsights\\Requests/Sec";
    QuickPulseMetricNames["REQUEST_FAILURE_RATE"] = "\\ApplicationInsights\\Requests Failed/Sec";
    QuickPulseMetricNames["REQUEST_DURATION"] = "\\ApplicationInsights\\Request Duration";
    // Dependency
    QuickPulseMetricNames["DEPENDENCY_RATE"] = "\\ApplicationInsights\\Dependency Calls/Sec";
    QuickPulseMetricNames["DEPENDENCY_FAILURE_RATE"] = "\\ApplicationInsights\\Dependency Calls Failed/Sec";
    QuickPulseMetricNames["DEPENDENCY_DURATION"] = "\\ApplicationInsights\\Dependency Call Duration";
    // Exception
    QuickPulseMetricNames["EXCEPTION_RATE"] = "\\ApplicationInsights\\Exceptions/Sec";
})(QuickPulseMetricNames || (QuickPulseMetricNames = {}));
// copied from exporter constants & added a few more
export var DependencyTypes;
(function (DependencyTypes) {
    DependencyTypes["InProc"] = "InProc";
    DependencyTypes["QueueMessage"] = "Queue Message";
    DependencyTypes["Sql"] = "SQL";
    DependencyTypes["Http"] = "Http";
    DependencyTypes["Grpc"] = "GRPC";
    DependencyTypes["Wcf"] = "WCF Service";
    DependencyTypes["mysql"] = "mysql";
    DependencyTypes["postgresql"] = "postgresql";
    DependencyTypes["mongodb"] = "mongodb";
    DependencyTypes["redis"] = "redis";
})(DependencyTypes || (DependencyTypes = {}));
export var KnownRequestColumns;
(function (KnownRequestColumns) {
    KnownRequestColumns["Url"] = "Url";
    KnownRequestColumns["Duration"] = "Duration";
    KnownRequestColumns["ResponseCode"] = "ResponseCode";
    KnownRequestColumns["Success"] = "Success";
    KnownRequestColumns["Name"] = "Name";
})(KnownRequestColumns || (KnownRequestColumns = {}));
export var KnownDependencyColumns;
(function (KnownDependencyColumns) {
    KnownDependencyColumns["Target"] = "Target";
    KnownDependencyColumns["Duration"] = "Duration";
    KnownDependencyColumns["Success"] = "Success";
    KnownDependencyColumns["Name"] = "Name";
    KnownDependencyColumns["ResultCode"] = "ResultCode";
    KnownDependencyColumns["Type"] = "Type";
    KnownDependencyColumns["Data"] = "Data";
})(KnownDependencyColumns || (KnownDependencyColumns = {}));
/**
 * Legacy HTTP semantic convention values
 * @internal
 */
export const legacySemanticValues = [
    SEMATTRS_NET_PEER_IP,
    SEMATTRS_NET_PEER_NAME,
    SEMATTRS_PEER_SERVICE,
    SEMATTRS_HTTP_METHOD,
    SEMATTRS_HTTP_URL,
    SEMATTRS_HTTP_STATUS_CODE,
    SEMATTRS_HTTP_ROUTE,
    SEMATTRS_HTTP_HOST,
    SEMATTRS_DB_SYSTEM,
    SEMATTRS_DB_STATEMENT,
    SEMATTRS_DB_OPERATION,
    SEMATTRS_DB_NAME,
    SEMATTRS_RPC_SYSTEM,
    SEMATTRS_RPC_GRPC_STATUS_CODE,
    SEMATTRS_EXCEPTION_TYPE,
    SEMATTRS_EXCEPTION_MESSAGE,
    SEMATTRS_EXCEPTION_STACKTRACE,
];
/**
 * HTTP semantic convention values
 * @internal
 */
export const httpSemanticValues = [
    ATTR_CLIENT_ADDRESS,
    ATTR_CLIENT_PORT,
    ATTR_SERVER_ADDRESS,
    ATTR_SERVER_PORT,
    ATTR_URL_FULL,
    ATTR_URL_PATH,
    ATTR_URL_QUERY,
    ATTR_URL_SCHEME,
    ATTR_URL_PATH,
    ATTR_ERROR_TYPE,
    ATTR_NETWORK_LOCAL_ADDRESS,
    ATTR_NETWORK_LOCAL_PORT,
    ATTR_NETWORK_PROTOCOL_NAME,
    ATTR_NETWORK_PEER_ADDRESS,
    ATTR_NETWORK_PEER_PORT,
    ATTR_NETWORK_PROTOCOL_VERSION,
    ATTR_NETWORK_TRANSPORT,
    ATTR_USER_AGENT_ORIGINAL,
    ATTR_HTTP_REQUEST_METHOD,
    ATTR_HTTP_RESPONSE_STATUS_CODE,
];
//# sourceMappingURL=types.js.map