{"version":3,"file":"batchLogRecordProcessor.js","sourceRoot":"","sources":["../../../src/logs/batchLogRecordProcessor.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAEhD,OAAO,EAAE,uBAAuB,EAAE,MAAM,yBAAyB,CAAC;AAElE;;;GAGG;AACH,MAAM,OAAO,4BAA6B,SAAQ,uBAAuB;IAGvE,YACE,QAA2B,EAC3B,OAAiE;QAEjE,KAAK,CAAC,QAAQ,CAAC,CAAC;QAChB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAEM,MAAM,CAAC,SAAoB;QAChC,gCAAgC;QAChC,IAAI,IAAI,CAAC,QAAQ,CAAC,+BAA+B,EAAE,CAAC;YAClD,IAAI,SAAS,CAAC,WAAW,IAAI,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;gBAC1D,wEAAwE;gBACxE,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,KAAK,UAAU,CAAC,OAAO,EAAE,CAAC;oBAC5D,oDAAoD;oBACpD,OAAO;gBACT,CAAC;YACH,CAAC;QACH,CAAC;QACD,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAC1B,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TraceFlags } from \"@opentelemetry/api\";\nimport type { LogRecord, LogRecordExporter } from \"@opentelemetry/sdk-logs\";\nimport { BatchLogRecordProcessor } from \"@opentelemetry/sdk-logs\";\n\n/**\n * Azure Monitor BatchLogRecord Processor.\n * @internal\n */\nexport class AzureBatchLogRecordProcessor extends BatchLogRecordProcessor {\n  private readonly _options: { enableTraceBasedSamplingForLogs: boolean | undefined };\n\n  constructor(\n    exporter: LogRecordExporter,\n    options: { enableTraceBasedSamplingForLogs: boolean | undefined },\n  ) {\n    super(exporter);\n    this._options = options;\n  }\n\n  public onEmit(logRecord: LogRecord): void {\n    // Trace based sampling for logs\n    if (this._options.enableTraceBasedSamplingForLogs) {\n      if (logRecord.spanContext && logRecord.spanContext.spanId) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n        if (logRecord.spanContext.traceFlags !== TraceFlags.SAMPLED) {\n          // Do not export log for spans that were sampled out\n          return;\n        }\n      }\n    }\n    super.onEmit(logRecord);\n  }\n}\n"]}