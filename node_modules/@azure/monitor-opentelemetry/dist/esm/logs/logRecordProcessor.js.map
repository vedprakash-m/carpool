{"version":3,"file":"logRecordProcessor.js","sourceRoot":"","sources":["../../../src/logs/logRecordProcessor.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AAEpD;;;GAGG;AACH,MAAM,OAAO,uBAAuB;IAGlC,YAAY,aAA4B;QACtC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACtC,CAAC;IAEM,MAAM,CAAC,SAAoB;QAChC,IAAI,CAAC;YACH,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC3C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;IAEM,UAAU;QACf,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAEM,QAAQ;QACb,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { MetricHandler } from \"../metrics/handler.js\";\nimport type { LogRecord, LogRecordProcessor } from \"@opentelemetry/sdk-logs\";\nimport { Logger } from \"../shared/logging/index.js\";\n\n/**\n * Azure Monitor LogRecord Processor.\n * @internal\n */\nexport class AzureLogRecordProcessor implements LogRecordProcessor {\n  private readonly _metricHandler: MetricHandler;\n\n  constructor(metricHandler: MetricHandler) {\n    this._metricHandler = metricHandler;\n  }\n\n  public onEmit(logRecord: LogRecord): void {\n    try {\n      this._metricHandler.recordLog(logRecord);\n    } catch (error) {\n      Logger.getInstance().warn(\"Error while recording log\", error);\n    }\n  }\n\n  public forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n"]}