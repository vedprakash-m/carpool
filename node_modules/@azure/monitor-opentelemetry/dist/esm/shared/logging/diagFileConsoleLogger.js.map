{"version":3,"file":"diagFileConsoleLogger.js","sourceRoot":"","sources":["../../../../src/shared/logging/diagFileConsoleLogger.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as fs from \"node:fs\";\nimport * as os from \"node:os\";\nimport * as path from \"node:path\";\nimport type { DiagLogger } from \"@opentelemetry/api\";\nimport {\n  accessAsync,\n  appendFileAsync,\n  confirmDirExists,\n  getShallowFileSize,\n  readdirAsync,\n  readFileAsync,\n  writeFileAsync,\n  unlinkAsync,\n} from \"../../utils/index.js\";\n\nexport class DiagFileConsoleLogger implements DiagLogger {\n  private _TAG = \"DiagFileConsoleLogger:\";\n  private _cleanupTimeOut = 60 * 30 * 1000; // 30 minutes;\n  private _fileCleanupTimer: NodeJS.Timeout | null = null;\n  private _tempDir: string;\n  private _logFileName: string;\n  private _fileFullPath: string;\n  private _backUpNameFormat: string;\n  private _logToFile = false;\n  private _logToConsole = true;\n  private _maxHistory: number;\n  private _maxSizeBytes: number;\n  private _logDestination: string | undefined;\n\n  constructor() {\n    this._logDestination = process.env.APPLICATIONINSIGHTS_LOG_DESTINATION; // destination can be one of file, console or file+console\n    if (this._logDestination === \"file+console\") {\n      this._logToFile = true;\n    }\n    if (this._logDestination === \"file\") {\n      this._logToFile = true;\n      this._logToConsole = false;\n    }\n    this._maxSizeBytes = 50000;\n    this._maxHistory = 1;\n    this._logFileName = \"applicationinsights.log\";\n\n    // If custom path not provided use temp folder, /tmp for *nix and USERDIR/AppData/Local/Temp for Windows\n    const logFilePath = process.env.APPLICATIONINSIGHTS_LOGDIR;\n    if (!logFilePath) {\n      this._tempDir = path.join(os.tmpdir(), \"appInsights-node\");\n    } else {\n      if (path.isAbsolute(logFilePath)) {\n        this._tempDir = logFilePath;\n      } else {\n        this._tempDir = path.join(process.cwd(), logFilePath);\n      }\n    }\n    this._fileFullPath = path.join(this._tempDir, this._logFileName);\n    this._backUpNameFormat = `.${this._logFileName}`; // {currentime}.applicationinsights.log\n\n    if (this._logToFile) {\n      if (!this._fileCleanupTimer) {\n        this._fileCleanupTimer = setInterval(() => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this._fileCleanupTask();\n        }, this._cleanupTimeOut);\n        this._fileCleanupTimer.unref();\n      }\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public error(message?: any, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.logMessage(message, args);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public warn(message?: any, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.logMessage(message, args);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public info(message?: any, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.logMessage(message, args);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public debug(message?: any, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.logMessage(message, args);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public verbose(message?: any, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.logMessage(message, args);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public async logMessage(message?: any, ...optionalParams: any[]): Promise<void> {\n    try {\n      const args = message ? [message, ...optionalParams] : optionalParams;\n      if (this._logToFile) {\n        await this._storeToDisk(args);\n      }\n      if (this._logToConsole) {\n        // eslint-disable-next-line no-console\n        console.log(...args);\n      }\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.log(this._TAG, `Failed to log to file: ${err && err.message}`);\n    }\n  }\n\n  private async _storeToDisk(args: any): Promise<void> {\n    const data = `${args}\\r\\n`;\n\n    try {\n      await confirmDirExists(this._tempDir);\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.log(this._TAG, `Failed to create directory for log file: ${err && err.message}`);\n      return;\n    }\n    try {\n      await accessAsync(this._fileFullPath, fs.constants.F_OK);\n    } catch (err: any) {\n      // No file create one\n      try {\n        await appendFileAsync(this._fileFullPath, data);\n      } catch (appendError: any) {\n        // eslint-disable-next-line no-console\n        console.log(\n          this._TAG,\n          `Failed to put log into file: ${appendError && appendError.message}`,\n        );\n        return;\n      }\n    }\n    // Check size\n    const size = await getShallowFileSize(this._fileFullPath);\n    if (size && size > this._maxSizeBytes) {\n      await this._createBackupFile(data);\n    } else {\n      await appendFileAsync(this._fileFullPath, data);\n    }\n  }\n\n  private async _createBackupFile(data: string): Promise<void> {\n    try {\n      const buffer = await readFileAsync(this._fileFullPath);\n      const backupPath = path.join(this._tempDir, `${new Date().getTime()}.${this._logFileName}`);\n      await writeFileAsync(backupPath, buffer);\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.log(\"Failed to generate backup log file\", err);\n    } finally {\n      // Store logs\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      writeFileAsync(this._fileFullPath, data);\n    }\n  }\n\n  private async _fileCleanupTask(): Promise<void> {\n    try {\n      let files = await readdirAsync(this._tempDir);\n      // Filter only backup files\n      files = files.filter((f) => path.basename(f).indexOf(this._backUpNameFormat) > -1);\n      // Sort by creation date\n      files.sort((a: string, b: string) => {\n        // Check expiration\n        const aCreationDate: Date = new Date(parseInt(a.split(this._backUpNameFormat)[0]));\n        const bCreationDate: Date = new Date(parseInt(b.split(this._backUpNameFormat)[0]));\n        if (aCreationDate < bCreationDate) {\n          return -1;\n        } else {\n          return 1;\n        }\n      });\n      const totalFiles = files.length;\n      for (let i = 0; i < totalFiles - this._maxHistory; i++) {\n        const pathToDelete = path.join(this._tempDir, files[i]);\n        await unlinkAsync(pathToDelete);\n      }\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.log(this._TAG, `Failed to cleanup log files: ${err && err.message}`);\n    }\n  }\n}\n"]}