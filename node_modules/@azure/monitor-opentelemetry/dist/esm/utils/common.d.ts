import type * as http from "node:http";
import type { DetectorSync } from "@opentelemetry/resources";
export declare function ignoreOutgoingRequestHook(request: http.RequestOptions): boolean;
export declare const isWindows: () => boolean;
export declare const isLinux: () => boolean;
export declare const isDarwin: () => boolean;
/**
 * Get prefix for OS
 * Windows system: "w"
 * Linux system: "l"
 * non-Windows and non-Linux system: "u" (unknown)
 */
export declare const getOsPrefix: () => string;
/**
 * Get prefix resource provider, vm will considered as "unknown RP"
 * Web App: "a"
 * Function App: "f"
 * non-Web and non-Function APP: "u" (unknown)
 */
export declare const isAppService: () => boolean;
export declare const isFunctionApp: () => boolean;
export declare const isAks: () => boolean;
/**
 * Get prefix resource provider, vm will considered as "unknown RP"
 * Web App: "a"
 * Function App: "f"
 * AKS: "k"
 * non-Web and non-Function APP: "u" (unknown)
 */
export declare const getResourceProvider: () => string;
/**
 * Convert milliseconds to Breeze expected time.
 * @internal
 */
export declare function msToTimeSpan(ms: number): string;
export declare function parseResourceDetectorsFromEnvVar(): Array<DetectorSync>;
//# sourceMappingURL=common.d.ts.map