{"version":3,"file":"opentelemetryInstrumentationPatcher.js","sourceRoot":"","sources":["../../../src/utils/opentelemetryInstrumentationPatcher.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,gCAAgC,EAAE,2BAA2B,EAAE,MAAM,aAAa,CAAC;AAC5F,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AAEpD;;;GAGG;AACH,MAAM,UAAU,uCAAuC;IACrD,MAAM,oBAAoB,GAAW,IAAI,CAAC,SAAS,CAAC,EAAE,eAAe,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;IACxF,IAAI,CAAC;QACH,OAAO,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;QAClD,iEAAiE;QACjE,MAAM,eAAe,GAAG,OAAO,CAAC,0DAA0D,CAAC,CAAC;QAE5F,MAAM,wBAAwB,GAAG,eAAe,CAAC,sBAAsB,CAAC;QAExE,0GAA0G;QAC1G,eAAe,CAAC,sBAAsB,GAAG,UAAU,gBAAmC;YACpF,IAAI,CAAC;gBACH,MAAM,gBAAgB,GAA+B,IAAI,CAAC,KAAK,CAC7D,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,IAAI,oBAAoB,CACtE,CAAC;gBACF,IAAI,gBAAgB,GAAG,EAAE,CAAC;gBAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACjD,gBAAgB,GAAG;wBACjB,eAAe,EAAE,CAAC,gBAAgB,CAAC,eAAe;4BAChD,2BAA2B,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;wBAChF,OAAO,EAAE,gBAAgB,CAAC,OAAO;qBAClC,CAAC;gBACJ,CAAC;gBACD,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YACnF,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,oDAAoD,CAAC,CAAC;YAClF,CAAC;YACD,mFAAmF;YACnF,OAAO,wBAAwB,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACzD,CAAC,CAAC;IACJ,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,2CAA2C;IAC7C,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Instrumentation } from \"@opentelemetry/instrumentation\";\nimport type { StatsbeatEnvironmentConfig } from \"../types.js\";\nimport { AZURE_MONITOR_STATSBEAT_FEATURES, StatsbeatInstrumentationMap } from \"../types.js\";\nimport { Logger } from \"../shared/logging/index.js\";\n\n/**\n * Patch OpenTelemetry Instrumentation enablement to update the statsbeat environment variable with the enabled instrumentations\n * @internal\n */\nexport function patchOpenTelemetryInstrumentationEnable(): void {\n  const emptyStatsbeatConfig: string = JSON.stringify({ instrumentation: 0, feature: 0 });\n  try {\n    require.resolve(\"@opentelemetry/instrumentation\");\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const autoLoaderUtils = require(\"@opentelemetry/instrumentation/build/src/autoLoaderUtils\");\n\n    const originalModuleDefinition = autoLoaderUtils.enableInstrumentations;\n\n    // Parses the enabled instrumentations and then ammends the statsbeat instrumentation environment variable\n    autoLoaderUtils.enableInstrumentations = function (instrumentations: Instrumentation[]) {\n      try {\n        const statsbeatOptions: StatsbeatEnvironmentConfig = JSON.parse(\n          process.env[AZURE_MONITOR_STATSBEAT_FEATURES] || emptyStatsbeatConfig,\n        );\n        let updatedStatsbeat = {};\n        for (let i = 0; i < instrumentations.length; i++) {\n          updatedStatsbeat = {\n            instrumentation: (statsbeatOptions.instrumentation |=\n              StatsbeatInstrumentationMap.get(instrumentations[i].instrumentationName) || 0),\n            feature: statsbeatOptions.feature,\n          };\n        }\n        process.env[AZURE_MONITOR_STATSBEAT_FEATURES] = JSON.stringify(updatedStatsbeat);\n      } catch (e) {\n        Logger.getInstance().warn(\"Failed to parse the statsbeat environment variable\");\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return, prefer-rest-params\n      return originalModuleDefinition.apply(this, arguments);\n    };\n  } catch (e) {\n    // Fail silently if the module is not found\n  }\n}\n"]}