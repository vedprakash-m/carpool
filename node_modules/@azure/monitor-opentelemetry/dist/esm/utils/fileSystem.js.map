{"version":3,"file":"fileSystem.js","sourceRoot":"","sources":["../../../src/utils/fileSystem.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as fs from \"node:fs\";\nimport * as path from \"node:path\";\nimport { promisify } from \"node:util\";\n\nexport const statAsync = promisify(fs.stat);\nexport const lstatAsync = promisify(fs.lstat);\nexport const mkdirAsync = promisify(fs.mkdir);\nexport const accessAsync = promisify(fs.access);\nexport const appendFileAsync = promisify(fs.appendFile);\nexport const writeFileAsync = promisify(fs.writeFile);\nexport const readFileAsync = promisify(fs.readFile);\nexport const readdirAsync = promisify(fs.readdir);\nexport const unlinkAsync = promisify(fs.unlink);\n\n/**\n * Validate directory exists.\n */\nexport const confirmDirExists = async (directory: string): Promise<void> => {\n  try {\n    const stats = await lstatAsync(directory);\n    if (!stats.isDirectory()) {\n      throw new Error(\"Path existed but was not a directory\");\n    }\n  } catch (err: any) {\n    if (err && err.code === \"ENOENT\") {\n      try {\n        await mkdirAsync(directory);\n      } catch (mkdirErr: any) {\n        if (mkdirErr && mkdirErr.code !== \"EEXIST\") {\n          // Handle race condition by ignoring EEXIST\n          throw mkdirErr;\n        }\n      }\n    }\n  }\n};\n\n/**\n * Computes the size (in bytes) of all files in a directory at the root level. Asynchronously.\n */\nexport const getShallowDirectorySize = async (directory: string): Promise<number> => {\n  // Get the directory listing\n  const files = await readdirAsync(directory);\n  let totalSize = 0;\n  // Query all file sizes\n  for (const file of files) {\n    const fileStats = await statAsync(path.join(directory, file));\n    if (fileStats.isFile()) {\n      totalSize += fileStats.size;\n    }\n  }\n  return totalSize;\n};\n\n/**\n * Computes the size (in bytes) of all files in a directory at the root level. Synchronously.\n */\nexport const getShallowDirectorySizeSync = (directory: string): number => {\n  const files = fs.readdirSync(directory);\n  let totalSize = 0;\n  for (let i = 0; i < files.length; i++) {\n    totalSize += fs.statSync(path.join(directory, files[i])).size;\n  }\n  return totalSize;\n};\n\n/**\n * Computes the size (in bytes) of a file asynchronously.\n */\nexport const getShallowFileSize = async (filePath: string): Promise<number | null> => {\n  const fileStats = await statAsync(filePath);\n  if (fileStats.isFile()) {\n    return fileStats.size;\n  }\n  return null;\n};\n"]}