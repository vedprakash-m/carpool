import * as zlib from "zlib";
import type * as http from "node:http";
export declare enum contentEncodingMethod {
    GZIP = "gzip",
    DEFLATE = "deflate",
    BR = "br"
}
export declare const bufferEncodingTypes: string[];
export declare const isBrotliSupported: () => boolean;
export declare const gzipAsync: typeof zlib.gzip.__promisify__;
export declare const gunzipAsync: typeof zlib.gunzip.__promisify__;
export declare const deflateAsync: typeof zlib.deflate.__promisify__;
export declare const inflateAsync: typeof zlib.inflate.__promisify__;
export declare const getBrotliCompressAsync: (zlibObject: any) => Function | null;
export declare const getBrotliCompressSync: (zlibObject: any) => Function | null;
export declare const getBrotliDecompressAsync: (zlibObject: any) => Function | null;
export declare const getBrotliDecompressSync: (zlibObject: any) => Function | null;
export declare const isBufferType: (buffer: Buffer, type?: string) => boolean | null;
export declare const findBufferEncodingType: (buffer: Buffer) => string | null;
export declare const isSupportedContentEncoding: (encodingMethod: string) => contentEncodingMethod | null;
export declare const getContentEncodingFromHeaders: (response: http.ServerResponse) => contentEncodingMethod[] | null;
export declare const insertBrowserSdkLoaderByIndex: (index: number, html: string, snippet: string) => string | null;
export declare const isContentTypeHeaderHtml: (response: http.ServerResponse) => boolean;
//# sourceMappingURL=browserSdkLoaderHelper.d.ts.map