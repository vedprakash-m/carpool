{"version":3,"file":"azureFnHook.js","sourceRoot":"","sources":["../../../src/traces/azureFnHook.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAKlC,4CAA0D;AAC1D,yDAAoD;AACpD,mDAA4D;AA4B5D,MAAa,kBAAkB;IAI7B;QACE,IAAI,CAAC;YACH,IAAI,CAAC,oBAAoB,GAAG,IAAA,iCAAqB,GAAE,CAAC;YACpD,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,iBAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CACxB,sEAAsE,CACvE,CAAC;QACJ,CAAC;IACH,CAAC;IAEM,QAAQ;QACb,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC5B,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;YAClC,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;QACtC,CAAC;QACD,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;IACxC,CAAC;IAEO,qBAAqB;QAC3B,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC7B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAC9D,eAAe;YACf,4DAA4D;YAC5D,KAAK,EAAE,oBAA0C,EAAE,EAAE;gBACnD,MAAM,aAAa,GAAmB,oBAAoB,CAAC,iBAAiB,CAAC;gBAC7E,MAAM,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC;gBAChD,4CAA4C;gBAC5C,6EAA6E;gBAC7E,IAAI,gBAAgB,GAA+B,IAAI,CAAC;gBACxD,IAAI,CAAC;oBACH,IAAI,YAAY,EAAE,CAAC;wBACjB,gBAAgB,GAAG,iBAAW,CAAC,OAAO,CAAC,aAAO,CAAC,MAAM,EAAE,EAAE;4BACvD,WAAW,EAAE,YAAY,CAAC,WAAW,IAAI,YAAY,CAAC,WAAW;4BACjE,UAAU,EAAE,YAAY,CAAC,UAAU,IAAI,YAAY,CAAC,UAAU;yBAC/D,CAAC,CAAC;oBACL,CAAC;oBACD,MAAM,cAAc,GAAG,gBAAgB,IAAI,aAAO,CAAC,MAAM,EAAE,CAAC;oBAC5D,oBAAoB,CAAC,gBAAgB,GAAG,aAAO,CAAC,IAAI,CAClD,cAAc,EACd,oBAAoB,CAAC,gBAAgB,CACtC,CAAC;gBACJ,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACb,iBAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,gDAAgD,EAAE,GAAG,CAAC,CAAC;gBACpF,CAAC;YACH,CAAC,CACF,CAAC;QACJ,CAAC;IACH,CAAC;CACF;AArDD,gDAqDC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Context as AzureFnV3Context } from \"@azure/functions-old\";\nimport type { InvocationContext as AzureFnV4Context } from \"@azure/functions\";\nimport type { Context as OpenTelemetryContext } from \"@opentelemetry/api\";\nimport { context, propagation } from \"@opentelemetry/api\";\nimport { Logger } from \"../shared/logging/index.js\";\nimport { loadAzureFunctionCore } from \"../shared/module.js\";\n\ntype AzureFnContext = AzureFnV3Context & AzureFnV4Context;\n\ntype FunctionCallback = (context: unknown, ...inputs: unknown[]) => unknown;\n\n/**\n * Context on a function that is about to be executed\n * This object will be passed to all pre invocation hooks\n */\nexport interface PreInvocationContext {\n  /**\n   * The context object passed to the function\n   * This object is readonly. You may modify it, but attempting to overwrite it will throw an error\n   */\n  readonly invocationContext: unknown;\n\n  /**\n   * The input values for this specific invocation. Changes to this array _will_ affect the inputs passed to your function\n   */\n  inputs: any[];\n\n  /**\n   * The function callback for this specific invocation. Changes to this value _will_ affect the function itself\n   */\n  functionCallback: FunctionCallback;\n}\n\nexport class AzureFunctionsHook {\n  private _functionsCoreModule: any;\n  private _preInvocationHook: any;\n\n  constructor() {\n    try {\n      this._functionsCoreModule = loadAzureFunctionCore();\n      this._addPreInvocationHook();\n    } catch (error) {\n      Logger.getInstance().debug(\n        \"@azure/functions-core failed to load, not running in Azure Functions\",\n      );\n    }\n  }\n\n  public shutdown(): void {\n    if (this._preInvocationHook) {\n      this._preInvocationHook.dispose();\n      this._preInvocationHook = undefined;\n    }\n    this._functionsCoreModule = undefined;\n  }\n\n  private _addPreInvocationHook(): void {\n    if (!this._preInvocationHook) {\n      this._preInvocationHook = this._functionsCoreModule.registerHook(\n        \"preInvocation\",\n        // eslint-disable-next-line @typescript-eslint/require-await\n        async (preInvocationContext: PreInvocationContext) => {\n          const sharedContext = <AzureFnContext>preInvocationContext.invocationContext;\n          const traceContext = sharedContext.traceContext;\n          // Update context to use Azure Functions one\n          // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n          let extractedContext: OpenTelemetryContext | any = null;\n          try {\n            if (traceContext) {\n              extractedContext = propagation.extract(context.active(), {\n                traceparent: traceContext.traceparent || traceContext.traceParent,\n                tracestate: traceContext.tracestate || traceContext.traceState,\n              });\n            }\n            const currentContext = extractedContext || context.active();\n            preInvocationContext.functionCallback = context.bind(\n              currentContext,\n              preInvocationContext.functionCallback,\n            );\n          } catch (err) {\n            Logger.getInstance().error(\"Failed to propagate context in Azure Functions\", err);\n          }\n        },\n      );\n    }\n  }\n}\n"]}