{"version":3,"file":"spanProcessor.js","sourceRoot":"","sources":["../../../src/traces/spanProcessor.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAKlC,yDAAoD;AAEpD;;;GAGG;AACH,MAAa,yBAAyB;IAGpC,YAAY,aAA4B;QACtC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACtC,CAAC;IAED,UAAU;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,OAAO,CAAC,IAAU,EAAE,QAAiB;QACnC,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,IAAkB;QACtB,IAAI,CAAC;YACH,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,iBAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IAED,QAAQ;QACN,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AA1BD,8DA0BC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Context } from \"@opentelemetry/api\";\nimport type { ReadableSpan, Span, SpanProcessor } from \"@opentelemetry/sdk-trace-base\";\nimport type { MetricHandler } from \"../metrics/index.js\";\nimport { Logger } from \"../shared/logging/index.js\";\n\n/**\n * Azure Monitor Span Processor.\n * @internal\n */\nexport class AzureMonitorSpanProcessor implements SpanProcessor {\n  private readonly _metricHandler: MetricHandler;\n\n  constructor(metricHandler: MetricHandler) {\n    this._metricHandler = metricHandler;\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  onStart(span: Span, _context: Context): void {\n    this._metricHandler.markSpanAsProcessed(span);\n  }\n\n  onEnd(span: ReadableSpan): void {\n    try {\n      this._metricHandler.recordSpan(span);\n    } catch (error) {\n      Logger.getInstance().warn(\"Error while recording span\", error);\n    }\n  }\n\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n"]}