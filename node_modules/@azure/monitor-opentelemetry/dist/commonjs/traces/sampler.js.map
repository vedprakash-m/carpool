{"version":3,"file":"sampler.js","sourceRoot":"","sources":["../../../src/traces/sampler.ts"],"names":[],"mappings":";;;AAOA,4CAA0C;AAE1C,kEAAiE;AACjE,0CAAqD;AAErD;;;;;GAKG;AACH,MAAa,0BAA0B;IAIrC;;;OAGG;IACH,YAAY,gBAAwB,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IACE,IAAI,CAAC,cAAc,GAAG,CAAC;YACvB,IAAI,CAAC,cAAc,GAAG,CAAC;YACvB,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,EACrC,CAAC;YACD,UAAI,CAAC,IAAI,CAAC,0EAA0E,CAAC,CAAC;QACxF,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,CAAC;IAC3D,CAAC;IAED;;;;;;;;;;;;;OAaG;IACI,YAAY;IACjB,8BAA8B;IAC9B,OAAgB,EAChB,OAAe;IACf,8BAA8B;IAC9B,QAAgB;IAChB,8BAA8B;IAC9B,QAAkB,EAClB,UAAsB;IACtB,8BAA8B;IAC9B,KAAa;QAEb,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI,IAAI,CAAC,WAAW,KAAK,GAAG,EAAE,CAAC;YAC7B,WAAW,GAAG,IAAI,CAAC;QACrB,CAAC;aAAM,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,EAAE,CAAC;YAClC,WAAW,GAAG,KAAK,CAAC;QACtB,CAAC;aAAM,CAAC;YACN,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;QACtE,CAAC;QACD,qDAAqD;QACrD,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;QAC9B,IAAI,IAAI,CAAC,WAAW,KAAK,GAAG,EAAE,CAAC;YAC7B,UAAU,CAAC,iCAAsB,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;QACxD,CAAC;QACD,OAAO,WAAW;YAChB,CAAC,CAAC,EAAE,QAAQ,EAAE,iCAAgB,CAAC,kBAAkB,EAAE,UAAU,EAAE,UAAU,EAAE;YAC3E,CAAC,CAAC,EAAE,QAAQ,EAAE,iCAAgB,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;IACpE,CAAC;IAED;;OAEG;IACI,QAAQ;QACb,OAAO,8BAA8B,IAAI,CAAC,cAAc,GAAG,CAAC;IAC9D,CAAC;IAEO,oBAAoB,CAAC,KAAa;QACxC,MAAM,SAAS,GAAG,CAAC,UAAU,CAAC;QAC9B,MAAM,SAAS,GAAG,UAAU,CAAC;QAC7B,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,CAAC,CAAC;QACX,CAAC;QAED,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACxB,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;QACxB,CAAC;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,uGAAuG;YACvG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,GAAG,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACtD,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,GAAG,CAAC;IAClC,CAAC;CACF;AA5FD,gEA4FC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * TODO: Remove this sampler in favor of the implementation in the AzMon Exporter once we support M2M approach for standard metrics.\n * This sampler specifically marks spans as sampled out and records them instead of dropping the span altogether.\n */\nimport type { Link, Attributes, SpanKind, Context } from \"@opentelemetry/api\";\nimport { diag } from \"@opentelemetry/api\";\nimport type { Sampler, SamplingResult } from \"@opentelemetry/sdk-trace-base\";\nimport { SamplingDecision } from \"@opentelemetry/sdk-trace-base\";\nimport { AzureMonitorSampleRate } from \"../types.js\";\n\n/**\n * ApplicationInsightsSampler is responsible for the following:\n * Implements same trace id hashing algorithm so that traces are sampled the same across multiple nodes\n * Adds item count to span attribute if span is sampled (needed for ingestion service)\n * @param samplingRatio - 0 to 1 value.\n */\nexport class ApplicationInsightsSampler implements Sampler {\n  private readonly _sampleRate: number;\n  private readonly _samplingRatio: number;\n\n  /**\n   * Initializes a new instance of the ApplicationInsightsSampler class.\n   * @param samplingRatio - Value in the range [0,1], 1 meaning all data will sampled and 0 all Tracing data will be sampled out.\n   */\n  constructor(samplingRatio: number = 1) {\n    this._samplingRatio = samplingRatio;\n    if (\n      this._samplingRatio > 1 ||\n      this._samplingRatio < 0 ||\n      !Number.isFinite(this._samplingRatio)\n    ) {\n      diag.warn(\"Invalid sampling rate, sampling rate must be a value in the range [0,1].\");\n    }\n    this._sampleRate = Math.round(this._samplingRatio * 100);\n  }\n\n  /**\n   * Checks whether span needs to be created and tracked.\n   *\n   * @param context - Parent Context which may contain a span.\n   * @param traceId - of the span to be created. It can be different from the\n   *     traceId in the {@link SpanContext}. Typically in situations when the\n   *     span to be created starts a new trace.\n   * @param spanName - of the span to be created.\n   * @param spanKind - of the span to be created.\n   * @param attributes - Initial set of SpanAttributes for the Span being constructed.\n   * @param links - Collection of links that will be associated with the Span to\n   *     be created. Typically useful for batch operations.\n   * @returns a {@link SamplingResult}.\n   */\n  public shouldSample(\n    // @ts-expect-error unused var\n    context: Context,\n    traceId: string,\n    // @ts-expect-error unused var\n    spanName: string,\n    // @ts-expect-error unused var\n    spanKind: SpanKind,\n    attributes: Attributes,\n    // @ts-expect-error unused var\n    links: Link[],\n  ): SamplingResult {\n    let isSampledIn = false;\n    if (this._sampleRate === 100) {\n      isSampledIn = true;\n    } else if (this._sampleRate === 0) {\n      isSampledIn = false;\n    } else {\n      isSampledIn = this._getSamplingHashCode(traceId) < this._sampleRate;\n    }\n    // Add sample rate as span attribute if it is not 100\n    attributes = attributes || {};\n    if (this._sampleRate !== 100) {\n      attributes[AzureMonitorSampleRate] = this._sampleRate;\n    }\n    return isSampledIn\n      ? { decision: SamplingDecision.RECORD_AND_SAMPLED, attributes: attributes }\n      : { decision: SamplingDecision.RECORD, attributes: attributes };\n  }\n\n  /**\n   * Return Sampler description\n   */\n  public toString(): string {\n    return `ApplicationInsightsSampler{${this._samplingRatio}}`;\n  }\n\n  private _getSamplingHashCode(input: string): number {\n    const csharpMin = -2147483648;\n    const csharpMax = 2147483647;\n    let hash = 5381;\n\n    if (!input) {\n      return 0;\n    }\n\n    while (input.length < 8) {\n      input = input + input;\n    }\n\n    for (let i = 0; i < input.length; i++) {\n      // JS doesn't respond to integer overflow by wrapping around. Simulate it with bitwise operators ( | 0)\n      hash = ((((hash << 5) + hash) | 0) + input.charCodeAt(i)) | 0;\n    }\n\n    hash = hash <= csharpMin ? csharpMax : Math.abs(hash);\n    return (hash / csharpMax) * 100;\n  }\n}\n"]}