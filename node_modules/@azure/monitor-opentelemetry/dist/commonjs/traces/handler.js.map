{"version":3,"file":"handler.js","sourceRoot":"","sources":["../../../src/traces/handler.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAGlC,4GAA+F;AAC/F,0FAAkF;AAElF,kEAAmE;AAKnE,8EAA0E;AAC1E,oFAAgF;AAChF,gFAA4E;AAC5E,0EAAsE;AACtE,gFAA4E;AAC5E,oFAAuG;AAIvG,kDAA+D;AAC/D,yDAA+D;AAC/D,qDAAsD;AAEtD,6CAA0D;AAE1D;;GAEG;AACH,MAAa,YAAY;IAUvB;;;;OAIG;IACH,YAAY,MAAsB,EAAE,aAA4B;QAC9D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,IAAI,uCAA0B,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC7E,IAAI,CAAC,cAAc,GAAG,IAAI,0DAAyB,CAAC,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;QAC9F,MAAM,YAAY,GAAiB;YACjC,kBAAkB,EAAE,GAAG;YACvB,oBAAoB,EAAE,IAAI;YAC1B,mBAAmB,EAAE,KAAK;YAC1B,YAAY,EAAE,IAAI;SACnB,CAAC;QACF,IAAI,CAAC,mBAAmB,GAAG,IAAI,mCAAkB,CAAC,IAAI,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;QACrF,IAAI,CAAC,mBAAmB,GAAG,IAAI,4CAAyB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9E,IAAI,CAAC,mBAAmB,GAAG,IAAI,mCAAkB,EAAE,CAAC;QACpD,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAEM,qBAAqB;QAC1B,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAEM,4BAA4B;QACjC,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAEM,mBAAmB;QACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,4DAA4D;IACrD,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC;IACtC,CAAC;IAED;;OAEG;IACK,2BAA2B;;QACjC,IAAI,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,IAAI,0CAAE,OAAO,EAAE,CAAC;YACtD,MAAM,0BAA0B,GAAG,IAAI,CAAC,OAAO,CAAC,sBAAsB;iBACnE,IAAiC,CAAC;YACrC,MAAM,iCAAiC,GACrC,0BAA0B,CAAC,yBAAyB,CAAC;YACvD,MAAM,+BAA+B,GAAkC,CACrE,OAAuB,EACvB,EAAE;gBACF,MAAM,MAAM,GAAG,IAAA,qCAAyB,EAAC,OAAO,CAAC,CAAC;gBAClD,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,oBAAoB;oBACpB,IAAI,iCAAiC,EAAE,CAAC;wBACtC,0BAA0B;wBAC1B,OAAO,iCAAiC,CAAC,OAAO,CAAC,CAAC;oBACpD,CAAC;gBACH,CAAC;gBACD,OAAO,MAAM,CAAC;YAChB,CAAC,CAAC;YACF,0BAA0B,CAAC,yBAAyB,GAAG,+BAA+B,CAAC;YACvF,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACzB,IAAI,0CAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAClE,CAAC;QACJ,CAAC;QACD,IAAI,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,QAAQ,0CAAE,OAAO,EAAE,CAAC;YAC1D,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACzB,IAAA,uEAA6B,EAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAC5E,CAAC;QACJ,CAAC;QACD,IAAI,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,OAAO,0CAAE,OAAO,EAAE,CAAC;YACzD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACzB,IAAI,gDAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,OAAO,CAAC,CACxE,CAAC;QACJ,CAAC;QACD,IAAI,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,KAAK,0CAAE,OAAO,EAAE,CAAC;YACvD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACzB,IAAI,4CAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,KAAK,CAAC,CACpE,CAAC;QACJ,CAAC;QACD,IAAI,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,UAAU,0CAAE,OAAO,EAAE,CAAC;YAC5D,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACzB,IAAI,sCAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,UAAU,CAAC,CACtE,CAAC;QACJ,CAAC;QACD,IAAI,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,KAAK,0CAAE,OAAO,EAAE,CAAC;YACvD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACzB,IAAI,4CAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,KAAK,CAAC,CACpE,CAAC;QACJ,CAAC;QACD,IAAI,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,MAAM,0CAAE,OAAO,EAAE,CAAC;YACxD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACzB,IAAI,8CAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,MAAM,CAAC,CACtE,CAAC;QACJ,CAAC;IACH,CAAC;CACF;AAnHD,oCAmHC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { RequestOptions } from \"node:http\";\nimport { createAzureSdkInstrumentation } from \"@azure/opentelemetry-instrumentation-azure-sdk\";\nimport { AzureMonitorTraceExporter } from \"@azure/monitor-opentelemetry-exporter\";\nimport type { BufferConfig } from \"@opentelemetry/sdk-trace-base\";\nimport { BatchSpanProcessor } from \"@opentelemetry/sdk-trace-base\";\nimport type {\n  HttpInstrumentationConfig,\n  IgnoreOutgoingRequestFunction,\n} from \"@opentelemetry/instrumentation-http\";\nimport { HttpInstrumentation } from \"@opentelemetry/instrumentation-http\";\nimport { MongoDBInstrumentation } from \"@opentelemetry/instrumentation-mongodb\";\nimport { MySQLInstrumentation } from \"@opentelemetry/instrumentation-mysql\";\nimport { PgInstrumentation } from \"@opentelemetry/instrumentation-pg\";\nimport { RedisInstrumentation } from \"@opentelemetry/instrumentation-redis\";\nimport { RedisInstrumentation as Redis4Instrumentation } from \"@opentelemetry/instrumentation-redis-4\";\n\nimport type { InternalConfig } from \"../shared/config.js\";\nimport type { MetricHandler } from \"../metrics/handler.js\";\nimport { ignoreOutgoingRequestHook } from \"../utils/common.js\";\nimport { AzureMonitorSpanProcessor } from \"./spanProcessor.js\";\nimport { AzureFunctionsHook } from \"./azureFnHook.js\";\nimport type { Instrumentation } from \"@opentelemetry/instrumentation\";\nimport { ApplicationInsightsSampler } from \"./sampler.js\";\n\n/**\n * Azure Monitor OpenTelemetry Trace Handler\n */\nexport class TraceHandler {\n  private _batchSpanProcessor: BatchSpanProcessor;\n  private _azureSpanProcessor: AzureMonitorSpanProcessor;\n  private _azureExporter: AzureMonitorTraceExporter;\n  private _instrumentations: Instrumentation[];\n  private _config: InternalConfig;\n  private _metricHandler: MetricHandler;\n  private _azureFunctionsHook: AzureFunctionsHook;\n  private _aiSampler: ApplicationInsightsSampler;\n\n  /**\n   * Initializes a new instance of the TraceHandler class.\n   * @param _config - Configuration.\n   * @param _metricHandler - MetricHandler.\n   */\n  constructor(config: InternalConfig, metricHandler: MetricHandler) {\n    this._config = config;\n    this._metricHandler = metricHandler;\n    this._instrumentations = [];\n    this._aiSampler = new ApplicationInsightsSampler(this._config.samplingRatio);\n    this._azureExporter = new AzureMonitorTraceExporter(this._config.azureMonitorExporterOptions);\n    const bufferConfig: BufferConfig = {\n      maxExportBatchSize: 512,\n      scheduledDelayMillis: 5000,\n      exportTimeoutMillis: 30000,\n      maxQueueSize: 2048,\n    };\n    this._batchSpanProcessor = new BatchSpanProcessor(this._azureExporter, bufferConfig);\n    this._azureSpanProcessor = new AzureMonitorSpanProcessor(this._metricHandler);\n    this._azureFunctionsHook = new AzureFunctionsHook();\n    this._initializeInstrumentations();\n  }\n\n  public getSampler(): ApplicationInsightsSampler {\n    return this._aiSampler;\n  }\n\n  public getBatchSpanProcessor(): BatchSpanProcessor {\n    return this._batchSpanProcessor;\n  }\n\n  public getAzureMonitorSpanProcessor(): AzureMonitorSpanProcessor {\n    return this._azureSpanProcessor;\n  }\n\n  public getInstrumentations(): Instrumentation[] {\n    return this._instrumentations;\n  }\n\n  /**\n   * Shutdown handler\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async shutdown(): Promise<void> {\n    this._azureFunctionsHook.shutdown();\n  }\n\n  /**\n   * Start auto collection of telemetry\n   */\n  private _initializeInstrumentations(): void {\n    if (this._config.instrumentationOptions.http?.enabled) {\n      const httpinstrumentationOptions = this._config.instrumentationOptions\n        .http as HttpInstrumentationConfig;\n      const providedIgnoreOutgoingRequestHook =\n        httpinstrumentationOptions.ignoreOutgoingRequestHook;\n      const mergedIgnoreOutgoingRequestHook: IgnoreOutgoingRequestFunction = (\n        request: RequestOptions,\n      ) => {\n        const result = ignoreOutgoingRequestHook(request);\n        if (!result) {\n          // Not internal call\n          if (providedIgnoreOutgoingRequestHook) {\n            // Provided hook in config\n            return providedIgnoreOutgoingRequestHook(request);\n          }\n        }\n        return result;\n      };\n      httpinstrumentationOptions.ignoreOutgoingRequestHook = mergedIgnoreOutgoingRequestHook;\n      this._instrumentations.push(\n        new HttpInstrumentation(this._config.instrumentationOptions.http),\n      );\n    }\n    if (this._config.instrumentationOptions.azureSdk?.enabled) {\n      this._instrumentations.push(\n        createAzureSdkInstrumentation(this._config.instrumentationOptions.azureSdk),\n      );\n    }\n    if (this._config.instrumentationOptions.mongoDb?.enabled) {\n      this._instrumentations.push(\n        new MongoDBInstrumentation(this._config.instrumentationOptions.mongoDb),\n      );\n    }\n    if (this._config.instrumentationOptions.mySql?.enabled) {\n      this._instrumentations.push(\n        new MySQLInstrumentation(this._config.instrumentationOptions.mySql),\n      );\n    }\n    if (this._config.instrumentationOptions.postgreSql?.enabled) {\n      this._instrumentations.push(\n        new PgInstrumentation(this._config.instrumentationOptions.postgreSql),\n      );\n    }\n    if (this._config.instrumentationOptions.redis?.enabled) {\n      this._instrumentations.push(\n        new RedisInstrumentation(this._config.instrumentationOptions.redis),\n      );\n    }\n    if (this._config.instrumentationOptions.redis4?.enabled) {\n      this._instrumentations.push(\n        new Redis4Instrumentation(this._config.instrumentationOptions.redis4),\n      );\n    }\n  }\n}\n"]}