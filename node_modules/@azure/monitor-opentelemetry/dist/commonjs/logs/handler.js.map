{"version":3,"file":"handler.js","sourceRoot":"","sources":["../../../src/logs/handler.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,0FAAgF;AAEhF,kFAA8E;AAC9E,oFAAgF;AAIhF,mEAAkE;AAClE,6EAA4E;AAC5E,sDAAgE;AAEhE;;GAEG;AACH,MAAa,UAAU;IAQrB;;;;OAIG;IACH,YAAY,MAAsB,EAAE,aAA4B;QAC9D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,IAAI,wDAAuB,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC;QACtF,IAAI,CAAC,6BAA6B,GAAG,IAAI,yDAA4B,CAAC,IAAI,CAAC,cAAc,EAAE;YACzF,+BAA+B,EAAE,IAAI,CAAC,OAAO,CAAC,+BAA+B;SAC9E,CAAC,CAAC;QACH,IAAI,CAAC,wBAAwB,GAAG,IAAI,+CAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACjF,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAEM,0BAA0B;QAC/B,OAAO,IAAI,CAAC,wBAAwB,CAAC;IACvC,CAAC;IAEM,0BAA0B;QAC/B,OAAO,IAAI,CAAC,6BAA6B,CAAC;IAC5C,CAAC;IAEM,mBAAmB;QACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;OAEG;IACK,2BAA2B;;QACjC,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,iDAAiD,CAAC;QAElF,IAAI,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,MAAM,0CAAE,OAAO,EAAE,CAAC;YACxD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACzB,IAAI,8CAAqB,iCACpB,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,MAAM,KAC7C,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC,IAAA,sCAAwB,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,IAC5E,CACH,CAAC;QACJ,CAAC;QACD,IAAI,MAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,OAAO,0CAAE,OAAO,EAAE,CAAC;YACzD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACzB,IAAI,gDAAsB,iCACrB,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,OAAO,KAC9C,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC,IAAA,sCAAwB,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,IAC5E,CACH,CAAC;QACJ,CAAC;IACH,CAAC;CACF;AA5DD,gCA4DC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AzureMonitorLogExporter } from \"@azure/monitor-opentelemetry-exporter\";\nimport type { Instrumentation } from \"@opentelemetry/instrumentation\";\nimport { BunyanInstrumentation } from \"@opentelemetry/instrumentation-bunyan\";\nimport { WinstonInstrumentation } from \"@opentelemetry/instrumentation-winston\";\nimport type { BatchLogRecordProcessor } from \"@opentelemetry/sdk-logs\";\nimport type { InternalConfig } from \"../shared/config.js\";\nimport type { MetricHandler } from \"../metrics/handler.js\";\nimport { AzureLogRecordProcessor } from \"./logRecordProcessor.js\";\nimport { AzureBatchLogRecordProcessor } from \"./batchLogRecordProcessor.js\";\nimport { logLevelToSeverityNumber } from \"../utils/logUtils.js\";\n\n/**\n * Azure Monitor OpenTelemetry Log Handler\n */\nexport class LogHandler {\n  private _azureExporter: AzureMonitorLogExporter;\n  private _azureLogRecordProcessor: AzureLogRecordProcessor;\n  private _azureBatchLogRecordProcessor: AzureBatchLogRecordProcessor;\n  private _metricHandler: MetricHandler;\n  private _config: InternalConfig;\n  private _instrumentations: Instrumentation[];\n\n  /**\n   * Initializes a new instance of the TraceHandler class.\n   * @param _config - Distro configuration.\n   * @param _metricHandler - MetricHandler.\n   */\n  constructor(config: InternalConfig, metricHandler: MetricHandler) {\n    this._config = config;\n    this._metricHandler = metricHandler;\n    this._azureExporter = new AzureMonitorLogExporter(config.azureMonitorExporterOptions);\n    this._azureBatchLogRecordProcessor = new AzureBatchLogRecordProcessor(this._azureExporter, {\n      enableTraceBasedSamplingForLogs: this._config.enableTraceBasedSamplingForLogs,\n    });\n    this._azureLogRecordProcessor = new AzureLogRecordProcessor(this._metricHandler);\n    this._instrumentations = [];\n    this._initializeInstrumentations();\n  }\n\n  public getAzureLogRecordProcessor(): AzureLogRecordProcessor {\n    return this._azureLogRecordProcessor;\n  }\n\n  public getBatchLogRecordProcessor(): BatchLogRecordProcessor {\n    return this._azureBatchLogRecordProcessor;\n  }\n\n  public getInstrumentations(): Instrumentation[] {\n    return this._instrumentations;\n  }\n\n  /**\n   * Start auto collection of telemetry\n   */\n  private _initializeInstrumentations(): void {\n    const logLevelEnv = process.env.APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL;\n\n    if (this._config.instrumentationOptions.bunyan?.enabled) {\n      this._instrumentations.push(\n        new BunyanInstrumentation({\n          ...this._config.instrumentationOptions.bunyan,\n          logSeverity: logLevelEnv ? logLevelToSeverityNumber(logLevelEnv) : undefined,\n        }),\n      );\n    }\n    if (this._config.instrumentationOptions.winston?.enabled) {\n      this._instrumentations.push(\n        new WinstonInstrumentation({\n          ...this._config.instrumentationOptions.winston,\n          logSeverity: logLevelEnv ? logLevelToSeverityNumber(logLevelEnv) : undefined,\n        }),\n      );\n    }\n  }\n}\n"]}