{"version":3,"file":"jsonConfig.js","sourceRoot":"","sources":["../../../src/shared/jsonConfig.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;;AAElC,wCAAwC;AAExC,oDAA8B;AAC9B,wDAAkC;AAOlC,iDAA4C;AAC5C,2CAAsC;AAEtC,MAAM,sBAAsB,GAAG,wCAAwC,CAAC;AACxE,MAAM,WAAW,GAAG,2CAA2C,CAAC;AAEhE;;;GAGG;AACH,MAAa,UAAU;IAwBrB,6BAA6B;IACtB,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;YAC1B,UAAU,CAAC,SAAS,GAAG,IAAI,UAAU,EAAE,CAAC;QAC1C,CAAC;QACD,OAAO,UAAU,CAAC,SAAS,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH;QACE,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACnD,6CAA6C;QAC7C,IAAI,iBAAiB,EAAE,CAAC;YACtB,UAAU,GAAG,iBAAiB,CAAC;QACjC,CAAC;QACD,YAAY;aACP,CAAC;YACJ,MAAM,cAAc,GAAG,0BAA0B,CAAC;YAClD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAA,mBAAO,GAAE,EAAE,WAAW,CAAC,CAAC,CAAC,+CAA+C;YACnG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC,UAAU;YAC/D,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACvD,IAAI,UAAU,EAAE,CAAC;gBACf,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;oBAChC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;gBAC7B,CAAC;qBAAM,CAAC;oBACN,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,8CAA8C;gBACjG,CAAC;YACH,CAAC;YACD,IAAI,CAAC;gBACH,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACtD,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,iBAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,mCAAmC,EAAE,GAAG,CAAC,CAAC;YACtE,CAAC;QACH,CAAC;QACD,IAAI,CAAC;YACH,MAAM,UAAU,GAAqC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC5E,IAAI,CAAC,2BAA2B,GAAG,UAAU,CAAC,2BAA2B,CAAC;YAC1E,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC;YAC9C,IAAI,CAAC,sBAAsB,GAAG,UAAU,CAAC,sBAAsB,CAAC;YAChE,IAAI,CAAC,uBAAuB,GAAG,UAAU,CAAC,uBAAuB,CAAC;YAClE,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,CAAC;YACtD,IAAI,CAAC,qBAAqB,GAAG,UAAU,CAAC,qBAAqB,CAAC;YAC9D,IAAI,CAAC,+BAA+B,GAAG,UAAU,CAAC,+BAA+B,CAAC;QACpF,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,iBAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,uCAAuC,EAAE,GAAG,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;CACF;AA3ED,gCA2EC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/* eslint-disable no-underscore-dangle*/\n\nimport * as fs from \"node:fs\";\nimport * as path from \"node:path\";\nimport type {\n  BrowserSdkLoaderOptions,\n  AzureMonitorOpenTelemetryOptions,\n  InstrumentationOptions,\n} from \"../types.js\";\nimport type { AzureMonitorExporterOptions } from \"@azure/monitor-opentelemetry-exporter\";\nimport { Logger } from \"./logging/index.js\";\nimport { dirName } from \"./module.js\";\n\nconst ENV_CONFIGURATION_FILE = \"APPLICATIONINSIGHTS_CONFIGURATION_FILE\";\nconst ENV_CONTENT = \"APPLICATIONINSIGHTS_CONFIGURATION_CONTENT\";\n\n/**\n * Azure Monitor OpenTelemetry Client Configuration through JSON File\n * @internal\n */\nexport class JsonConfig implements AzureMonitorOpenTelemetryOptions {\n  /** The rate of telemetry items tracked that should be transmitted (Default 1.0) */\n  public samplingRatio?: number;\n  /** Azure Monitor Exporter Configuration */\n  public azureMonitorExporterOptions?: AzureMonitorExporterOptions;\n  /**\n   * OpenTelemetry Instrumentations configuration included as part of Azure Monitor (azureSdk, http, mongoDb, mySql, postgreSql, redis, redis4)\n   */\n  public instrumentationOptions?: InstrumentationOptions;\n  /** Enable Live Metrics feature */\n  public enableLiveMetrics?: boolean;\n  /** Enable Standard Metrics feature */\n  public enableStandardMetrics?: boolean;\n  /** Enable log sampling based on trace (Default true) */\n  public enableTraceBasedSamplingForLogs?: boolean;\n  /** Enable Performance Counter feature */\n  public enablePerformanceCounters?: boolean;\n\n  public browserSdkLoaderOptions?: BrowserSdkLoaderOptions;\n\n  private static _instance: JsonConfig;\n\n  private _tempDir: string;\n\n  /** Get Singleton instance */\n  public static getInstance(): JsonConfig {\n    if (!JsonConfig._instance) {\n      JsonConfig._instance = new JsonConfig();\n    }\n    return JsonConfig._instance;\n  }\n\n  /**\n   * Initializes a new instance of the JsonConfig class.\n   */\n  constructor() {\n    let jsonString = \"\";\n    this._tempDir = \"\";\n    const contentJsonConfig = process.env[ENV_CONTENT];\n    // JSON string added directly in env variable\n    if (contentJsonConfig) {\n      jsonString = contentJsonConfig;\n    }\n    // JSON file\n    else {\n      const configFileName = \"applicationinsights.json\";\n      const rootPath = path.join(dirName(), \"../../../\"); // Root of folder (__dirname = ../dist-esm/src)\n      this._tempDir = path.join(rootPath, configFileName); // default\n      const configFile = process.env[ENV_CONFIGURATION_FILE];\n      if (configFile) {\n        if (path.isAbsolute(configFile)) {\n          this._tempDir = configFile;\n        } else {\n          this._tempDir = path.join(rootPath, configFile); // Relative path to applicationinsights folder\n        }\n      }\n      try {\n        jsonString = fs.readFileSync(this._tempDir, \"utf8\");\n      } catch (err) {\n        Logger.getInstance().info(\"Failed to read JSON config file: \", err);\n      }\n    }\n    try {\n      const jsonConfig: AzureMonitorOpenTelemetryOptions = JSON.parse(jsonString);\n      this.azureMonitorExporterOptions = jsonConfig.azureMonitorExporterOptions;\n      this.samplingRatio = jsonConfig.samplingRatio;\n      this.instrumentationOptions = jsonConfig.instrumentationOptions;\n      this.browserSdkLoaderOptions = jsonConfig.browserSdkLoaderOptions;\n      this.enableLiveMetrics = jsonConfig.enableLiveMetrics;\n      this.enableStandardMetrics = jsonConfig.enableStandardMetrics;\n      this.enableTraceBasedSamplingForLogs = jsonConfig.enableTraceBasedSamplingForLogs;\n    } catch (err) {\n      Logger.getInstance().info(\"Missing or invalid JSON config file: \", err);\n    }\n  }\n}\n"]}