{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../../src/shared/logging/logger.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AzureLogLevel } from \"@azure/logger\";\nimport { AzureLogger, createClientLogger, setLogLevel } from \"@azure/logger\";\nimport type { DiagLogger } from \"@opentelemetry/api\";\nimport { diag, DiagLogLevel } from \"@opentelemetry/api\";\nimport { DiagFileConsoleLogger } from \"./diagFileConsoleLogger.js\";\n\nexport class Logger {\n  private static instance: Logger;\n  private diagLevel: DiagLogLevel;\n  private azureLogger: AzureLogger;\n  private openTelemetryLogger: DiagLogger;\n  private logToAzureLogger: boolean;\n  private logToOpenTelemetry: boolean;\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  constructor() {\n    this.azureLogger = createClientLogger(\"@azure/monitor-opentelemetry\");\n    this.openTelemetryLogger = diag.createComponentLogger({\n      namespace: \"@azure/monitor-opentelemetry\",\n    });\n    this.logToOpenTelemetry = true;\n    this.logToAzureLogger = false;\n    const otelLogLevelEnv =\n      process.env.APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL || process.env.OTEL_LOG_LEVEL;\n    this.diagLevel = DiagLogLevel.WARN; // Default\n    switch (otelLogLevelEnv) {\n      case \"ALL\":\n        this.diagLevel = DiagLogLevel.ALL;\n        break;\n      case \"DEBUG\":\n        this.diagLevel = DiagLogLevel.DEBUG;\n        break;\n      case \"ERROR\":\n        this.diagLevel = DiagLogLevel.ERROR;\n        break;\n      case \"INFO\":\n        this.diagLevel = DiagLogLevel.INFO;\n        break;\n      case \"NONE\":\n        this.diagLevel = DiagLogLevel.NONE;\n        break;\n      case \"VERBOSE\":\n        this.diagLevel = DiagLogLevel.VERBOSE;\n        break;\n      case \"WARN\":\n        this.diagLevel = DiagLogLevel.WARN;\n        break;\n    }\n    // Set OpenTelemetry Logger\n    const fileConsoleLogger = new DiagFileConsoleLogger();\n    diag.setLogger(fileConsoleLogger, {\n      logLevel: this.diagLevel,\n      suppressOverrideMessage: true,\n    });\n\n    const azureLogLevelEnv = process.env.APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL;\n    switch (azureLogLevelEnv) {\n      // Application Insights levels\n      case \"VERBOSE\":\n        setLogLevel(\"verbose\");\n        break;\n      case \"INFO\":\n        setLogLevel(\"info\");\n        break;\n      case \"WARN\":\n        setLogLevel(\"warning\");\n        break;\n      case \"ERROR\":\n        setLogLevel(\"error\");\n        break;\n      default:\n        setLogLevel((process.env.AZURE_LOG_LEVEL as AzureLogLevel) || \"warning\");\n        break;\n    }\n    // Override Azure logger\n    AzureLogger.log = (...args) => {\n      fileConsoleLogger.logMessage(...args);\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public error(message?: any, ...args: any[]): void {\n    if (this.logToAzureLogger) {\n      this.azureLogger.error(message, args);\n    }\n    if (this.logToOpenTelemetry) {\n      this.openTelemetryLogger.error(message, args);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public warn(message?: any, ...args: any[]): void {\n    if (this.logToAzureLogger) {\n      this.azureLogger.warning(message, args);\n    }\n    if (this.logToOpenTelemetry) {\n      this.openTelemetryLogger.warn(message, args);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public info(message?: any, ...args: any[]): void {\n    if (this.logToAzureLogger) {\n      this.azureLogger.info(message, args);\n    }\n    if (this.logToOpenTelemetry) {\n      this.openTelemetryLogger.info(message, args);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public debug(message?: any, ...args: any[]): void {\n    if (this.logToAzureLogger) {\n      this.azureLogger.verbose(message, args);\n    }\n    if (this.logToOpenTelemetry) {\n      this.openTelemetryLogger.debug(message, args);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public verbose(message?: any, ...args: any[]): void {\n    if (this.logToAzureLogger) {\n      this.azureLogger.verbose(message, args);\n    }\n    if (this.logToOpenTelemetry) {\n      this.openTelemetryLogger.verbose(message, args);\n    }\n  }\n\n  public setLogToAzureLogger(value: boolean): void {\n    this.logToAzureLogger = value;\n  }\n\n  public setLogToOpenTelemetry(value: boolean): void {\n    this.logToOpenTelemetry = value;\n  }\n}\n"]}