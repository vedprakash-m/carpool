{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../src/shared/config.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ResourceDetectionConfig } from \"@opentelemetry/resources\";\nimport { Resource, detectResourcesSync, envDetectorSync } from \"@opentelemetry/resources\";\nimport type {\n  BrowserSdkLoaderOptions,\n  AzureMonitorOpenTelemetryOptions,\n  InstrumentationOptions,\n} from \"../types.js\";\nimport type { AzureMonitorExporterOptions } from \"@azure/monitor-opentelemetry-exporter\";\nimport { JsonConfig } from \"./jsonConfig.js\";\nimport { Logger } from \"./logging/index.js\";\nimport {\n  azureAppServiceDetector,\n  azureFunctionsDetector,\n  azureVmDetector,\n} from \"@opentelemetry/resource-detector-azure\";\n\n/**\n * Azure Monitor OpenTelemetry Client Configuration\n */\nexport class InternalConfig implements AzureMonitorOpenTelemetryOptions {\n  /** The rate of telemetry items tracked that should be transmitted (Default 1.0) */\n  public samplingRatio: number;\n  /** Azure Monitor Exporter Configuration */\n  public azureMonitorExporterOptions: AzureMonitorExporterOptions;\n  /**\n   * OpenTelemetry Instrumentations configuration included as part of Azure Monitor (azureSdk, http, mongoDb, mySql, postgreSql, redis, redis4)\n   */\n  public instrumentationOptions: InstrumentationOptions;\n  /** Enable Live Metrics feature */\n  enableLiveMetrics?: boolean;\n  /** Enable Standard Metrics feature */\n  enableStandardMetrics?: boolean;\n  /** Enable log sampling based on trace (Default true) */\n  enableTraceBasedSamplingForLogs?: boolean;\n  /** Enable Performance Counter feature */\n  enablePerformanceCounters?: boolean;\n\n  private _resource: Resource = Resource.empty();\n\n  public set resource(resource: Resource) {\n    this._resource = this._resource.merge(resource);\n  }\n\n  /**\n   *Get OpenTelemetry Resource\n   */\n  public get resource(): Resource {\n    return this._resource;\n  }\n\n  public browserSdkLoaderOptions: BrowserSdkLoaderOptions;\n\n  /**\n   * Initializes a new instance of the AzureMonitorOpenTelemetryOptions class.\n   */\n  constructor(options?: AzureMonitorOpenTelemetryOptions) {\n    // Default values\n    this.azureMonitorExporterOptions = {};\n    this.samplingRatio = 1;\n    this.enableLiveMetrics = true;\n    this.enableStandardMetrics = true;\n    this.enableTraceBasedSamplingForLogs = false;\n    this.enablePerformanceCounters = true;\n    this.instrumentationOptions = {\n      http: { enabled: true },\n      azureSdk: { enabled: false },\n      mongoDb: { enabled: false },\n      mySql: { enabled: false },\n      postgreSql: { enabled: false },\n      redis: { enabled: false },\n      redis4: { enabled: false },\n    };\n    this._setDefaultResource();\n    this.browserSdkLoaderOptions = {\n      enabled: false,\n      connectionString: \"\",\n    };\n\n    if (options) {\n      // Merge default with provided options\n      this.azureMonitorExporterOptions = Object.assign(\n        this.azureMonitorExporterOptions,\n        options.azureMonitorExporterOptions,\n      );\n      this.instrumentationOptions = Object.assign(\n        this.instrumentationOptions,\n        options.instrumentationOptions,\n      );\n      this.resource = Object.assign(this.resource, options.resource);\n      this.samplingRatio =\n        options.samplingRatio !== undefined ? options.samplingRatio : this.samplingRatio;\n      this.browserSdkLoaderOptions = Object.assign(\n        this.browserSdkLoaderOptions,\n        options.browserSdkLoaderOptions,\n      );\n      this.enableLiveMetrics =\n        options.enableLiveMetrics !== undefined\n          ? options.enableLiveMetrics\n          : this.enableLiveMetrics;\n      this.enableStandardMetrics =\n        options.enableStandardMetrics !== undefined\n          ? options.enableStandardMetrics\n          : this.enableStandardMetrics;\n      this.enableTraceBasedSamplingForLogs =\n        options.enableTraceBasedSamplingForLogs !== undefined\n          ? options.enableTraceBasedSamplingForLogs\n          : this.enableTraceBasedSamplingForLogs;\n      this.enablePerformanceCounters =\n        options.enablePerformanceCounters !== undefined\n          ? options.enablePerformanceCounters\n          : this.enablePerformanceCounters;\n    }\n    // JSON configuration will take precedence over other settings\n    this._mergeConfig();\n  }\n\n  private _mergeConfig(): void {\n    try {\n      const jsonConfig = JsonConfig.getInstance();\n      this.samplingRatio =\n        jsonConfig.samplingRatio !== undefined ? jsonConfig.samplingRatio : this.samplingRatio;\n      this.browserSdkLoaderOptions = Object.assign(\n        this.browserSdkLoaderOptions,\n        jsonConfig.browserSdkLoaderOptions,\n      );\n      this.enableLiveMetrics =\n        jsonConfig.enableLiveMetrics !== undefined\n          ? jsonConfig.enableLiveMetrics\n          : this.enableLiveMetrics;\n      this.enableStandardMetrics =\n        jsonConfig.enableStandardMetrics !== undefined\n          ? jsonConfig.enableStandardMetrics\n          : this.enableStandardMetrics;\n      this.enableTraceBasedSamplingForLogs =\n        jsonConfig.enableTraceBasedSamplingForLogs !== undefined\n          ? jsonConfig.enableTraceBasedSamplingForLogs\n          : this.enableTraceBasedSamplingForLogs;\n      this.azureMonitorExporterOptions = Object.assign(\n        this.azureMonitorExporterOptions,\n        jsonConfig.azureMonitorExporterOptions,\n      );\n      this.instrumentationOptions = Object.assign(\n        this.instrumentationOptions,\n        jsonConfig.instrumentationOptions,\n      );\n    } catch (error) {\n      Logger.getInstance().error(\"Failed to load JSON config file values.\", error);\n    }\n  }\n\n  private _setDefaultResource(): void {\n    let resource = Resource.default();\n    // Load resource attributes from env\n    const detectResourceConfig: ResourceDetectionConfig = {\n      detectors: [envDetectorSync],\n    };\n    const envResource = detectResourcesSync(detectResourceConfig);\n    resource = resource.merge(envResource) as Resource;\n\n    // Load resource attributes from Azure\n    const azureResource: Resource = detectResourcesSync({\n      detectors: [azureAppServiceDetector, azureFunctionsDetector],\n    });\n    this._resource = resource.merge(azureResource) as Resource;\n\n    const vmResource = detectResourcesSync({\n      detectors: [azureVmDetector],\n    });\n    if (vmResource.asyncAttributesPending) {\n      vmResource.waitForAsyncAttributes?.().then(() => {\n        this._resource = this._resource.merge(vmResource) as Resource;\n        return;\n      });\n    }\n  }\n}\n"]}