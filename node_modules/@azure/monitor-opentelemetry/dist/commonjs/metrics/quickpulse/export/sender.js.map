{"version":3,"file":"sender.js","sourceRoot":"","sources":["../../../../../src/metrics/quickpulse/export/sender.ts"],"names":[],"mappings":";;;;AAAA,uCAAuC;AACvC,kCAAkC;AAClC,sDAAsB;AAEtB,kEAA+D;AAE/D,4CAA0C;AAQ1C,0DAA+D;AAE/D,MAAM,2BAA2B,GAAG,qCAAqC,CAAC;AAE1E;;;GAGG;AACH,MAAa,gBAAgB;IAM3B,YAAY,OAKX;QACC,gEAAgE;QAChE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,uBAAuB,GAAG;YAC7B,QAAQ,EAAE,IAAI,CAAC,WAAW;SAC3B,CAAC;QAEF,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QAErD,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvB,IAAI,CAAC,uBAAuB,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;YAC7D,uBAAuB;YACvB,IAAI,OAAO,CAAC,gBAAgB,EAAE,CAAC;gBAC7B,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;YAC3E,CAAC;iBAAM,CAAC;gBACN,UAAU;gBACV,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,GAAG,CAAC,2BAA2B,CAAC,CAAC;YAChF,CAAC;QACH,CAAC;QACD,IAAI,CAAC,gBAAgB,GAAG,IAAI,2BAAgB,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAE3E,kCAAkC;QAClC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,uCAAkB,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,YAAY,CAChB,cAA0C;QAE1C,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,YAAY,CACvD,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,kBAAkB,EACvB,cAAc,CACf,CAAC;YACF,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,SAAS,GAAG,KAAkB,CAAC;YACrC,UAAI,CAAC,IAAI,CAAC,mCAAmC,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;QACpE,CAAC;QACD,OAAO;IACT,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO,CAAC,cAAqC;QACjD,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAClD,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,kBAAkB,EACvB,cAAc,CACf,CAAC;YACF,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,SAAS,GAAG,KAAkB,CAAC;YACrC,UAAI,CAAC,IAAI,CAAC,mCAAmC,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;QACpE,CAAC;QACD,OAAO;IACT,CAAC;IAED,uBAAuB,CAAC,QAA4B;QAClD,IAAI,QAAQ,EAAE,CAAC;YACb,MAAM,MAAM,GAAG,IAAI,aAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACrC,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;gBAC1B,IAAI,CAAC,WAAW,GAAG,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;YAC9C,CAAC;QACH,CAAC;IACH,CAAC;CACF;AApFD,4CAoFC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport url from \"url\";\nimport type { RestError } from \"@azure/core-rest-pipeline\";\nimport { redirectPolicyName } from \"@azure/core-rest-pipeline\";\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport { diag } from \"@opentelemetry/api\";\nimport type {\n  IsSubscribedOptionalParams,\n  IsSubscribedResponse,\n  PublishOptionalParams,\n  PublishResponse,\n  QuickpulseClientOptionalParams,\n} from \"../../../generated/index.js\";\nimport { QuickpulseClient } from \"../../../generated/index.js\";\n\nconst applicationInsightsResource = \"https://monitor.azure.com//.default\";\n\n/**\n * Quickpulse sender class\n * @internal\n */\nexport class QuickpulseSender {\n  private readonly quickpulseClient: QuickpulseClient;\n  private quickpulseClientOptions: QuickpulseClientOptionalParams;\n  private instrumentationKey: string;\n  private endpointUrl: string;\n\n  constructor(options: {\n    endpointUrl: string;\n    instrumentationKey: string;\n    credential?: TokenCredential;\n    credentialScopes?: string | string[];\n  }) {\n    // Build endpoint using provided configuration or default values\n    this.endpointUrl = options.endpointUrl;\n    this.quickpulseClientOptions = {\n      endpoint: this.endpointUrl,\n    };\n\n    this.instrumentationKey = options.instrumentationKey;\n\n    if (options.credential) {\n      this.quickpulseClientOptions.credential = options.credential;\n      // Add credentialScopes\n      if (options.credentialScopes) {\n        this.quickpulseClientOptions.credentialScopes = options.credentialScopes;\n      } else {\n        // Default\n        this.quickpulseClientOptions.credentialScopes = [applicationInsightsResource];\n      }\n    }\n    this.quickpulseClient = new QuickpulseClient(this.quickpulseClientOptions);\n\n    // Handle redirects in HTTP Sender\n    this.quickpulseClient.pipeline.removePolicy({ name: redirectPolicyName });\n  }\n\n  /**\n   * isSubscribed Quickpulse service\n   * @internal\n   */\n  async isSubscribed(\n    optionalParams: IsSubscribedOptionalParams,\n  ): Promise<IsSubscribedResponse | undefined> {\n    try {\n      const response = await this.quickpulseClient.isSubscribed(\n        this.endpointUrl,\n        this.instrumentationKey,\n        optionalParams,\n      );\n      return response;\n    } catch (error: any) {\n      const restError = error as RestError;\n      diag.info(\"Failed to ping Quickpulse service\", restError.message);\n    }\n    return;\n  }\n\n  /**\n   * publish Quickpulse service\n   * @internal\n   */\n  async publish(optionalParams: PublishOptionalParams): Promise<PublishResponse | undefined> {\n    try {\n      const response = await this.quickpulseClient.publish(\n        this.endpointUrl,\n        this.instrumentationKey,\n        optionalParams,\n      );\n      return response;\n    } catch (error: any) {\n      const restError = error as RestError;\n      diag.warn(\"Failed to post Quickpulse service\", restError.message);\n    }\n    return;\n  }\n\n  handlePermanentRedirect(location: string | undefined): void {\n    if (location) {\n      const locUrl = new url.URL(location);\n      if (locUrl && locUrl.host) {\n        this.endpointUrl = \"https://\" + locUrl.host;\n      }\n    }\n  }\n}\n"]}