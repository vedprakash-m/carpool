import type { ReadableSpan } from "@opentelemetry/sdk-trace-base";
import type { LogRecord } from "@opentelemetry/sdk-logs";
import type { DocumentIngress, Exception, MonitoringDataPoint, RemoteDependency, Request, Trace, CollectionConfigurationError } from "../../generated/index.js";
import type { Attributes } from "@opentelemetry/api";
import type { ResourceMetrics } from "@opentelemetry/sdk-metrics";
import type { RequestData, DependencyData, ExceptionData, TraceData, TelemetryData } from "./types.js";
/** Get the internal SDK version */
export declare function getSdkVersion(): string;
/** Get the internal SDK version type */
export declare function getSdkVersionType(): string;
/** Set the version prefix to a string in the format "{ResourceProvider}{OS}m_ */
export declare function setSdkPrefix(): void;
export declare function resourceMetricsToQuickpulseDataPoint(metrics: ResourceMetrics, baseMonitoringDataPoint: MonitoringDataPoint, documents: DocumentIngress[], errors: CollectionConfigurationError[], derivedMetricValues: Map<string, number>): MonitoringDataPoint[];
export declare function getSpanData(span: ReadableSpan): RequestData | DependencyData;
export declare function getSpanExceptionColumns(eventAttributes: Attributes, spanAttributes: Attributes): ExceptionData;
export declare function getLogData(log: LogRecord): ExceptionData | TraceData;
export declare function getLogDocument(data: TelemetryData, exceptionType?: string): Trace | Exception;
export declare function isRequestData(data: TelemetryData): data is RequestData;
export declare function isDependencyData(data: TelemetryData): data is DependencyData;
export declare function isTraceData(data: TelemetryData): data is TraceData;
export declare function isExceptionData(data: TelemetryData): data is ExceptionData;
export declare function getSpanDocument(telemetryData: TelemetryData): Request | RemoteDependency;
/**
 * UTC time the request was made. Expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001. This is used for clock skew calculations, so the value can never be stale (cached).
 *
 * @example
 * 8/5/2020 10:15:00 PM UTC =\> 637322625000000000
 * 8/5/2020 10:15:01 PM UTC =\> 637322625010000000
 */
export declare function getTransmissionTime(): number;
export declare function getMsFromFilterTimestampString(timestamp: string): number;
export declare function getPeerIp(attributes: Attributes): string | undefined;
export declare function getUserAgent(attributes: Attributes): string | undefined;
export declare function getHttpUrl(attributes: Attributes): string;
export declare function getHttpMethod(attributes: Attributes): string | undefined;
export declare function getHttpStatusCode(attributes: Attributes): string | undefined;
export declare function getHttpScheme(attributes: Attributes): string | undefined;
export declare function getHttpTarget(attributes: Attributes): string;
export declare function getHttpHost(attributes: Attributes): string | undefined;
export declare function getNetPeerName(attributes: Attributes): string;
export declare function getNetHostPort(attributes: Attributes): string;
export declare function getNetPeerPort(attributes: Attributes): string | undefined;
//# sourceMappingURL=utils.d.ts.map