"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Projection = void 0;
const index_js_1 = require("../../../generated/index.js");
const utils_js_1 = require("../utils.js");
const quickpulseErrors_js_1 = require("./quickpulseErrors.js");
class Projection {
    constructor() {
        this.projectionMap = new Map();
        this.avgMap = new Map();
    }
    // This method is intended to be called upon configuration change for every valid derivedMetricInfo.
    initDerivedMetricProjection(derivedMetricInfo) {
        if (derivedMetricInfo.aggregation === index_js_1.KnownAggregationType.Min.toString()) {
            // set to max value so that the value from the first telemetry item will always be less than it
            this.projectionMap.set(derivedMetricInfo.id, [Number.MAX_VALUE, index_js_1.KnownAggregationType.Min]);
        }
        else if (derivedMetricInfo.aggregation === index_js_1.KnownAggregationType.Max.toString()) {
            // set to min value so that the value from the first telemetry item will always be more than it
            this.projectionMap.set(derivedMetricInfo.id, [Number.MIN_VALUE, index_js_1.KnownAggregationType.Max]);
        }
        else if (derivedMetricInfo.aggregation === index_js_1.KnownAggregationType.Sum.toString()) {
            this.projectionMap.set(derivedMetricInfo.id, [0, index_js_1.KnownAggregationType.Sum]);
        }
        else {
            this.projectionMap.set(derivedMetricInfo.id, [0, index_js_1.KnownAggregationType.Avg]);
            this.avgMap.set(derivedMetricInfo.id, [0, 0]);
        }
    }
    calculateProjection(derivedMetricInfo, data) {
        let incrementBy;
        if (derivedMetricInfo.projection === "Count()") {
            incrementBy = 1;
        }
        else if (derivedMetricInfo.projection === "Duration") {
            if ((0, utils_js_1.isRequestData)(data) || (0, utils_js_1.isDependencyData)(data)) {
                incrementBy = data.Duration;
            }
            else {
                throw new quickpulseErrors_js_1.MetricFailureToCreateError("The projection Duration is not supported for the telemetry type Exception or Trace.");
            }
        }
        else if (derivedMetricInfo.projection.startsWith("CustomDimensions.")) {
            const customDimKey = derivedMetricInfo.projection.replace("CustomDimensions.", "");
            let customDimValue;
            if (data.CustomDimensions.has(customDimKey)) {
                const parsedValue = parseFloat(data.CustomDimensions.get(customDimKey));
                if (isNaN(parsedValue)) {
                    throw new quickpulseErrors_js_1.MetricFailureToCreateError(`Could not calculate the projection because the custom dimension value '${data.CustomDimensions.get(customDimKey)}' for the dimension '${customDimKey}' is not a valid number.`);
                }
                else {
                    customDimValue = parsedValue;
                }
            }
            else {
                throw new quickpulseErrors_js_1.MetricFailureToCreateError(`Could not calculate the projection because the custom dimension '${customDimKey}' was not found in the telemetry data.`);
            }
            incrementBy = customDimValue;
        }
        else {
            throw new quickpulseErrors_js_1.MetricFailureToCreateError(`The projection '${derivedMetricInfo.projection}' is not supported in this SDK.`);
        }
        const projection = this.calculateAggregation(derivedMetricInfo.aggregation, derivedMetricInfo.id, incrementBy);
        this.projectionMap.set(derivedMetricInfo.id, [projection, derivedMetricInfo.aggregation]);
    }
    // This method is intended to be called every second when export() is called.
    getMetricValues() {
        const result = new Map();
        for (const [key, value] of this.projectionMap.entries()) {
            let projection;
            if (value[1] === index_js_1.KnownAggregationType.Min.toString()) {
                projection = value[0] === Number.MAX_VALUE ? 0 : value[0];
                value[0] = Number.MAX_VALUE; // reset for next 1s interval
            }
            else if (value[1] === index_js_1.KnownAggregationType.Max.toString()) {
                projection = value[0] === Number.MIN_VALUE ? 0 : value[0];
                value[0] = Number.MIN_VALUE; // reset for next 1s interval
            }
            else {
                projection = value[0];
                value[0] = 0; // reset for next 1s interval
                if (value[1] === index_js_1.KnownAggregationType.Avg.toString()) {
                    this.avgMap.set(key, [0, 0]); // reset for next 1s interval
                }
            }
            result.set(key, projection);
        }
        return result;
    }
    // This method is intended to be called after upon config change or when we return to ping.
    clearProjectionMaps() {
        this.projectionMap.clear();
        this.avgMap.clear();
    }
    calculateAggregation(aggregation, id, incrementBy) {
        const prevValue = this.projectionMap.get(id)[0];
        switch (aggregation) {
            case index_js_1.KnownAggregationType.Sum.toString():
                return prevValue + incrementBy;
            case index_js_1.KnownAggregationType.Min.toString():
                return Math.min(prevValue, incrementBy);
            case index_js_1.KnownAggregationType.Max.toString():
                return Math.max(prevValue, incrementBy);
            case index_js_1.KnownAggregationType.Avg.toString(): {
                const [prevSum, prevCount] = this.avgMap.get(id);
                this.avgMap.set(id, [prevSum + incrementBy, prevCount + 1]);
                return (prevSum + incrementBy) / (prevCount + 1);
            }
            default:
                throw new quickpulseErrors_js_1.MetricFailureToCreateError(`The aggregation '${aggregation}' is not supported in this SDK.`);
        }
    }
}
exports.Projection = Projection;
//# sourceMappingURL=projection.js.map