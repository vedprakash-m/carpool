{"version":3,"file":"performanceCounters.js","sourceRoot":"","sources":["../../../src/metrics/performanceCounters.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport * as os from \"node:os\";\nimport type {\n  Histogram,\n  Meter,\n  ObservableCallback,\n  ObservableGauge,\n  ObservableResult,\n} from \"@opentelemetry/api\";\nimport { SpanKind, ValueType } from \"@opentelemetry/api\";\nimport { AzureMonitorMetricExporter } from \"@azure/monitor-opentelemetry-exporter\";\nimport type {\n  MeterProviderOptions,\n  PeriodicExportingMetricReaderOptions,\n} from \"@opentelemetry/sdk-metrics\";\nimport { MeterProvider, PeriodicExportingMetricReader } from \"@opentelemetry/sdk-metrics\";\nimport type { ReadableSpan, TimedEvent } from \"@opentelemetry/sdk-trace-base\";\nimport { PerformanceCounterMetricNames } from \"./types.js\";\nimport type { AzureMonitorOpenTelemetryOptions } from \"../types.js\";\nimport { getLogData, isExceptionData } from \"./quickpulse/utils.js\";\nimport type { ExceptionData, TraceData } from \"./quickpulse/types.js\";\nimport type { LogRecord } from \"@opentelemetry/sdk-logs\";\nimport { Logger } from \"../shared/logging/logger.js\";\nimport * as process from \"node:process\";\n\n/**\n * Azure Monitor PerformanceCounter Metrics\n */\nexport class PerformanceCounterMetrics {\n  private internalConfig: AzureMonitorOpenTelemetryOptions;\n  private collectionInterval = 60000; // 60 seconds\n  private meterProvider: MeterProvider;\n  private azureExporter: AzureMonitorMetricExporter;\n  private metricReader: PeriodicExportingMetricReader;\n  private meter: Meter;\n  private requestDurationHistogram: Histogram;\n  private requestRateGauge: ObservableGauge;\n  private requestRateGaugeCallback: ObservableCallback;\n  private memoryPrivateBytesGauge: ObservableGauge;\n  private memoryPrivateBytesGaugeCallback: ObservableCallback;\n  private memoryAvailableBytesGauge: ObservableGauge;\n  private memoryAvailableBytesGaugeCallback: ObservableCallback;\n  private processorTimeGauge: ObservableGauge;\n  private processorTimeGaugeCallback: ObservableCallback;\n  private processTimeNormalizedGauge: ObservableGauge;\n  private processTimeNormalizedGaugeCallback: ObservableCallback;\n  private processTimeGauge: ObservableGauge;\n  private processTimeGaugeCallback: ObservableCallback;\n  private exceptionCountGauge: ObservableGauge;\n  private exceptionCountGaugeCallback: ObservableCallback;\n  private lastExceptionRate: { count: number; time: number } = { count: 0, time: 0 };\n  private totalCount: number = 0;\n  private intervalExecutionTime = 0;\n  private lastRequestRate: { count: number; time: number; executionInterval: number };\n  private lastAppCpuUsage: { user: number; system: number };\n  private lastHrtime: number[];\n  private lastCpus: {\n    model: string;\n    speed: number;\n    times: { user: number; nice: number; sys: number; idle: number; irq: number };\n  }[];\n  private lastCpusProcess: {\n    model: string;\n    speed: number;\n    times: { user: number; nice: number; sys: number; idle: number; irq: number };\n  }[];\n  private totalExceptionCount: number = 0;\n\n  /**\n   * Creates performance counter instruments.\n   * @param options - Distro configuration.\n   * @param config - Application Insights configuration.\n   */\n  constructor(config: AzureMonitorOpenTelemetryOptions, options?: { collectionInterval: number }) {\n    this.internalConfig = config;\n    this.lastCpus = os.cpus();\n    this.lastCpusProcess = os.cpus();\n    this.lastAppCpuUsage = process.cpuUsage();\n    this.lastHrtime = process.hrtime();\n\n    this.lastRequestRate = {\n      count: this.totalCount,\n      time: +new Date(),\n      executionInterval: this.intervalExecutionTime,\n    };\n\n    const meterProviderConfig: MeterProviderOptions = {\n      resource: this.internalConfig.resource,\n    };\n    this.meterProvider = new MeterProvider(meterProviderConfig);\n    this.azureExporter = new AzureMonitorMetricExporter(\n      this.internalConfig.azureMonitorExporterOptions,\n    );\n    const metricReaderOptions: PeriodicExportingMetricReaderOptions = {\n      exporter: this.azureExporter,\n      exportIntervalMillis: options?.collectionInterval || this.collectionInterval,\n    };\n    this.metricReader = new PeriodicExportingMetricReader(metricReaderOptions);\n    this.meterProvider.addMetricReader(this.metricReader);\n    this.meter = this.meterProvider.getMeter(\"AzureMonitorPerformanceCountersMeter\");\n\n    this.lastRequestRate = { count: 0, time: 0, executionInterval: 0 };\n\n    // Create Instruments\n    this.requestDurationHistogram = this.meter.createHistogram(\n      PerformanceCounterMetricNames.REQUEST_DURATION,\n      { valueType: ValueType.DOUBLE },\n    );\n    this.requestRateGauge = this.meter.createObservableGauge(\n      PerformanceCounterMetricNames.REQUEST_RATE,\n      {\n        description: \"Incoming Requests Average Execution Time\",\n        valueType: ValueType.DOUBLE,\n      },\n    );\n    this.memoryPrivateBytesGauge = this.meter.createObservableGauge(\n      PerformanceCounterMetricNames.PRIVATE_BYTES,\n      { description: \"Amount of memory process has used in bytes\", valueType: ValueType.INT },\n    );\n    this.memoryAvailableBytesGauge = this.meter.createObservableGauge(\n      PerformanceCounterMetricNames.AVAILABLE_BYTES,\n      { description: \"Amount of available memory in bytes\", valueType: ValueType.INT },\n    );\n    this.processorTimeGauge = this.meter.createObservableGauge(\n      PerformanceCounterMetricNames.PROCESSOR_TIME,\n      {\n        description: \"Processor time as a percentage\",\n        valueType: ValueType.DOUBLE,\n      },\n    );\n    this.processTimeGauge = this.meter.createObservableGauge(\n      PerformanceCounterMetricNames.PROCESS_TIME_STANDARD,\n      {\n        description: \"Process CPU usage as a percentage\",\n        valueType: ValueType.DOUBLE,\n      },\n    );\n    this.processTimeNormalizedGauge = this.meter.createObservableGauge(\n      PerformanceCounterMetricNames.PROCESS_TIME_NORMALIZED,\n      {\n        description: \"Process CPU usage normalized as a percentage\",\n        valueType: ValueType.DOUBLE,\n      },\n    );\n    this.exceptionCountGauge = this.meter.createObservableGauge(\n      PerformanceCounterMetricNames.EXCEPTION_RATE,\n      {\n        description: \"Exception Rate\",\n        valueType: ValueType.DOUBLE,\n      },\n    );\n\n    // Add callbacks\n    this.requestRateGaugeCallback = this.getRequestRate.bind(this);\n    this.memoryPrivateBytesGaugeCallback = this.getPrivateMemory.bind(this);\n    this.memoryAvailableBytesGaugeCallback = this.getAvailableMemory.bind(this);\n    this.processorTimeGaugeCallback = this.getProcessorTime.bind(this);\n    this.processTimeGaugeCallback = this.getProcessTime.bind(this);\n    this.processTimeNormalizedGaugeCallback = this.getNormalizedProcessTime.bind(this);\n    this.exceptionCountGaugeCallback = this.getExceptionRate.bind(this);\n\n    this.memoryPrivateBytesGauge.addCallback(this.memoryPrivateBytesGaugeCallback);\n    this.memoryAvailableBytesGauge.addCallback(this.memoryAvailableBytesGaugeCallback);\n    this.processTimeGauge.addCallback(this.processTimeGaugeCallback);\n    this.processTimeNormalizedGauge.addCallback(this.processTimeNormalizedGaugeCallback);\n    this.processorTimeGauge.addCallback(this.processorTimeGaugeCallback);\n    this.requestRateGauge.addCallback(this.requestRateGaugeCallback);\n    this.exceptionCountGauge.addCallback(this.exceptionCountGaugeCallback);\n  }\n\n  /**\n   * Shutdown Meter Provider it will return no-op Meters after being called.\n   */\n  public async shutdown(): Promise<void> {\n    return this.meterProvider.shutdown();\n  }\n\n  /**\n   * Force flush Meter Provider.\n   */\n  public async flush(): Promise<void> {\n    return this.meterProvider.forceFlush();\n  }\n\n  /**\n   *Get OpenTelemetry MeterProvider\n   */\n  public getMeterProvider(): MeterProvider {\n    return this.meterProvider;\n  }\n\n  /**\n   * Record Span metrics\n   * @internal\n   */\n  public recordSpan(span: ReadableSpan): void {\n    if (span.kind !== SpanKind.SERVER) {\n      return;\n    }\n    this.totalCount++;\n    const durationMs = span.duration[0];\n    this.intervalExecutionTime += durationMs;\n    this.requestDurationHistogram.record(durationMs);\n    if (span.events) {\n      span.events.forEach((event: TimedEvent) => {\n        event.attributes = event.attributes || {};\n        if (event.name === \"exception\") {\n          this.totalExceptionCount++;\n        }\n      });\n    }\n  }\n\n  /**\n   * Record Log metrics\n   * @internal\n   */\n  public recordLog(logRecord: LogRecord): void {\n    const columns: TraceData | ExceptionData = getLogData(logRecord);\n    if (isExceptionData(columns)) {\n      this.totalExceptionCount++;\n    }\n  }\n\n  private getRequestRate(observableResult: ObservableResult): void {\n    const currentTime = +new Date();\n    const intervalRequests = this.totalCount - this.lastRequestRate.count || 0;\n    const elapsedMs = currentTime - this.lastRequestRate.time;\n    if (elapsedMs > 0) {\n      const elapsedSeconds = elapsedMs / 1000;\n      const requestsPerSec = intervalRequests / elapsedSeconds;\n      observableResult.observe(requestsPerSec);\n    }\n    this.lastRequestRate = {\n      count: this.totalCount,\n      time: currentTime,\n      executionInterval: this.lastRequestRate.executionInterval,\n    };\n  }\n\n  private getPrivateMemory(observableResult: ObservableResult): void {\n    if (process?.memoryUsage) {\n      observableResult.observe(process.memoryUsage().rss);\n    } else {\n      Logger.getInstance().debug(\"Couldn't report Private Memory. Process is not defined.\");\n    }\n  }\n\n  private getAvailableMemory(observableResult: ObservableResult): void {\n    observableResult.observe(os.freemem());\n  }\n\n  private getTotalCombinedCpu(cpus: os.CpuInfo[], lastCpus: os.CpuInfo[]) {\n    let totalUser = 0;\n    let totalSys = 0;\n    let totalNice = 0;\n    let totalIdle = 0;\n    let totalIrq = 0;\n    for (let i = 0; !!cpus && i < cpus.length; i++) {\n      const cpu = cpus[i];\n      const lastCpu = lastCpus[i];\n      const times = cpu.times;\n      const lastTimes = lastCpu.times;\n      // user cpu time (or) % CPU time spent in user space\n      let user = times.user - lastTimes.user;\n      user = user > 0 ? user : 0; // Avoid negative values\n      totalUser += user;\n      // system cpu time (or) % CPU time spent in kernel space\n      let sys = times.sys - lastTimes.sys;\n      sys = sys > 0 ? sys : 0; // Avoid negative values\n      totalSys += sys;\n      // user nice cpu time (or) % CPU time spent on low priority processes\n      let nice = times.nice - lastTimes.nice;\n      nice = nice > 0 ? nice : 0; // Avoid negative values\n      totalNice += nice;\n      // idle cpu time (or) % CPU time spent idle\n      let idle = times.idle - lastTimes.idle;\n      idle = idle > 0 ? idle : 0; // Avoid negative values\n      totalIdle += idle;\n      // irq (or) % CPU time spent servicing/handling hardware interrupts\n      let irq = times.irq - lastTimes.irq;\n      irq = irq > 0 ? irq : 0; // Avoid negative values\n      totalIrq += irq;\n    }\n    const combinedTotal = totalUser + totalSys + totalNice + totalIdle + totalIrq;\n    return {\n      combinedTotal: combinedTotal,\n      totalUser: totalUser,\n      totalIdle: totalIdle,\n    };\n  }\n\n  private getProcessorTime(observableResult: ObservableResult): void {\n    // this reports total ms spent in each category since the OS was booted, to calculate percent it is necessary\n    // to find the delta since the last measurement\n    const cpus = os.cpus();\n    if (cpus && cpus.length && this.lastCpus && cpus.length === this.lastCpus.length) {\n      const cpuTotals = this.getTotalCombinedCpu(cpus, this.lastCpus);\n\n      const value =\n        cpuTotals.combinedTotal > 0\n          ? ((cpuTotals.combinedTotal - cpuTotals.totalIdle) / cpuTotals.combinedTotal) * 100\n          : 0;\n      observableResult.observe(value);\n    }\n    this.lastCpus = cpus;\n  }\n\n  private getNormalizedProcessTime(observableResult: ObservableResult): void {\n    // this reports total ms spent in each category since the OS was booted, to calculate percent it is necessary\n    // to find the delta since the last measurement\n    const cpus = os.cpus();\n    if (\n      cpus &&\n      cpus.length &&\n      this.lastCpusProcess &&\n      cpus.length === this.lastCpusProcess.length\n    ) {\n      // Calculate % of total cpu time (user + system) this App Process used (Only supported by node v6.1.0+)\n      let appCpuPercent: number | undefined = undefined;\n      const appCpuUsage = process.cpuUsage();\n      const hrtime = process.hrtime();\n      const totalApp =\n        appCpuUsage.user -\n          this.lastAppCpuUsage.user +\n          (appCpuUsage.system - this.lastAppCpuUsage.system) || 0;\n\n      if (typeof this.lastHrtime !== \"undefined\" && this.lastHrtime.length === 2) {\n        const elapsedTime =\n          (hrtime[0] - this.lastHrtime[0]) * 1e6 + (hrtime[1] - this.lastHrtime[1]) / 1e3 || 0; // convert to microseconds\n\n        appCpuPercent = (100 * totalApp) / (elapsedTime * cpus.length);\n      }\n      // Set previous\n      this.lastAppCpuUsage = appCpuUsage;\n      this.lastHrtime = hrtime;\n      const cpuTotals = this.getTotalCombinedCpu(cpus, this.lastCpusProcess);\n      let value = 0;\n      if (appCpuPercent !== undefined) {\n        value = appCpuPercent;\n      } else {\n        value = (cpuTotals.totalUser / cpuTotals.combinedTotal) * 100;\n      }\n      observableResult.observe(value);\n    }\n    this.lastCpusProcess = cpus;\n  }\n\n  private getProcessTime(observableResult: ObservableResult): void {\n    // this reports total ms spent in each category since the OS was booted, to calculate percent it is necessary\n    // to find the delta since the last measurement\n    if (process) {\n      const cpus = os.cpus();\n      if (\n        cpus &&\n        cpus.length &&\n        this.lastCpusProcess &&\n        cpus.length === this.lastCpusProcess.length\n      ) {\n        // Calculate % of total cpu time (user + system) this App Process used (Only supported by node v6.1.0+)\n        let appCpuPercent: number | undefined = undefined;\n        const appCpuUsage = process.cpuUsage();\n        const hrtime = process.hrtime();\n        const totalApp =\n          appCpuUsage.user -\n            this.lastAppCpuUsage.user +\n            (appCpuUsage.system - this.lastAppCpuUsage.system) || 0;\n\n        if (typeof this.lastHrtime !== \"undefined\" && this.lastHrtime.length === 2) {\n          const elapsedTime =\n            (hrtime[0] - this.lastHrtime[0]) * 1e6 + (hrtime[1] - this.lastHrtime[1]) / 1e3 || 0; // convert to microseconds\n          appCpuPercent = (100 * totalApp) / elapsedTime;\n        }\n        // Set previous\n        this.lastAppCpuUsage = appCpuUsage;\n        this.lastHrtime = hrtime;\n        const cpuTotals = this.getTotalCombinedCpu(cpus, this.lastCpusProcess);\n        let value = 0;\n        if (appCpuPercent !== undefined) {\n          value = appCpuPercent;\n        } else {\n          value = (cpuTotals.totalUser / cpuTotals.combinedTotal) * 100;\n        }\n        observableResult.observe(value);\n      }\n      this.lastCpusProcess = cpus;\n    } else {\n      Logger.getInstance().debug(\"Couldn't report process time. Process is not defined.\");\n    }\n  }\n\n  private getExceptionRate(observableResult: ObservableResult): void {\n    const currentTime = +new Date();\n    const intervalData = this.totalExceptionCount - this.lastExceptionRate.count || 0;\n    const elapsedMs = currentTime - this.lastExceptionRate.time;\n    if (elapsedMs > 0) {\n      const elapsedSeconds = elapsedMs / 1000;\n      const dataPerSec = intervalData / elapsedSeconds;\n      observableResult.observe(dataPerSec);\n    }\n    this.lastExceptionRate = {\n      count: this.totalExceptionCount,\n      time: currentTime,\n    };\n  }\n\n  // TODO: Add Process I/O Rate\n}\n"]}