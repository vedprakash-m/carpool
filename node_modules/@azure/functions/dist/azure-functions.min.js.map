{"version":3,"file":"azure-functions.min.js","mappings":"sJAIA,eACA,UACA,UACA,UAEA,IAAIA,GAAc,EAClB,uBACIA,GAAc,CAClB,EAEW,EAAAC,kBAAmB,EACjB,EAAAC,aAAuC,CAAC,EAErD,iBAAsBC,GAClB,GAAIH,EACA,MAAM,IAAI,EAAAI,kBAAkB,kEAGhC,GAAID,EAAKF,iBAAkB,CAGvB,MAAMI,GAAU,IAAAC,qBAChB,GAAID,IAAYA,EAAQE,IACpB,MAAM,IAAI,EAAAH,kBAAkB,gE,CAQpC,IAJI,IAAAI,WAAUL,EAAKF,oBACf,EAAAA,iBAAmBE,EAAKF,kBAGxBE,EAAKD,aACL,IAAK,IAAKO,EAAKC,KAAQC,OAAOC,QAAQT,EAAKD,eACnC,IAAAM,WAAUE,KACVA,EAAMG,OAAOH,IACb,IAAAI,iBAAgB,QAAS,cAAcL,YAAcC,MACrD,EAAAR,aAAaO,GAAOC,GAK5B,EAAAT,mBACA,IAAAa,iBAAgB,QAAS,0BAEjC,C,iaC3CA,gBACA,UACA,UACA,SAEA,uCACI,KAAAC,KAAO,mBACP,KAAAC,QAAU,EAAAA,OAkBd,CAhBI,kBAAAC,CAAmBC,GACf,OAAO,IAAI,EAAAC,gBAAgBD,EAC/B,CAEM,eAAAE,CAAgBC,G,yCAGlB,IAFA,IAAAC,aAEI,EAAArB,iBAAkB,CAClB,MAAMsB,QAAgB,IAAAC,kBACtBH,EAAmBI,QAAUF,C,CAKjC,OAFAZ,OAAOe,OAAOL,EAAoB,gBAE3BA,CACX,G,6FCzBJ,gBACA,UAgCA,SAASM,EAAaC,GAClB,IACI,OAAOC,KAAKC,MAAMF,E,CACpB,SACE,OAAOA,C,CAEf,CApCA,4BAAiCA,GAC7B,OAAKA,GAEM,IAAApB,WAAUoB,EAAKG,QACfJ,EAAaC,EAAKG,SAClB,IAAAvB,WAAUoB,EAAKI,MACfH,KAAKC,MAAMF,EAAKI,OAChB,IAAAxB,WAAUoB,EAAKK,OACfC,OAAOC,KAAKP,EAAKK,QACjB,IAAAzB,WAAUoB,EAAKQ,QACfF,OAAOC,KAAKP,EAAKQ,SACjB,IAAA5B,WAAUoB,EAAKS,MACf,IAAI,EAAAC,YAAYV,EAAKS,OACrB,IAAA7B,WAAUoB,EAAKW,KACfX,EAAKW,KACL,IAAA/B,WAAUoB,EAAKY,QACfZ,EAAKY,OACLZ,EAAKa,kBAAmB,IAAAjC,WAAUoB,EAAKa,gBAAgBR,OACvDL,EAAKa,gBAAgBR,MAAMS,KAAKC,GAAMT,OAAOC,KAAKQ,KAClDf,EAAKgB,mBAAoB,IAAApC,WAAUoB,EAAKgB,iBAAiBb,QACzDH,EAAKgB,iBAAiBb,OAAOW,IAAIf,GACjCC,EAAKiB,mBAAoB,IAAArC,WAAUoB,EAAKiB,iBAAiBL,QACzDZ,EAAKiB,iBAAiBL,OACtBZ,EAAKkB,mBAAoB,IAAAtC,WAAUoB,EAAKkB,iBAAiBC,QACzDnB,EAAKkB,iBAAiBC,YAE7B,OAxBA,CA0BR,C,gMCjBA,MAAa3C,UAA0B4C,MAAvC,c,oBACI,KAAAC,6BAA8B,CAClC,EAFA,sBAIA,MAAaC,UAAwBC,UAArC,c,oBACI,KAAAF,6BAA8B,CAClC,EAFA,oBAIA,MAAaG,UAAyBC,WAAtC,c,oBACI,KAAAJ,6BAA8B,CAClC,EAFA,qBAIA,8BAAmCC,EAC/B,WAAAI,CAAYC,GACRC,MAAM,wCAAwCD,KAClD,GAGJ,2BAAgCE,GAC5B,GAAIA,aAAeT,MACf,OAAOS,EACJ,CACH,IAAIC,EAUJ,OARIA,EADAD,QACU,gBACY,iBAARA,EACJA,EACY,iBAARA,EACJ5B,KAAK8B,UAAUF,GAEf5C,OAAO4C,GAEd,IAAIT,MAAMU,E,CAEzB,EAEA,8BAAmCD,EAAYC,GAC3C,IACID,EAAIC,QAAUA,C,CAChB,S,CAGN,EAMA,mBAAwBD,GACpB,OAAOA,OACX,C,8NCrCA,gBA0FA,SAASG,EAAgEC,GACrE,OAAO,IAAAC,gBAAeD,EAAS,SACnC,CA1FA,gBAAqBE,GACjB,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,SAEd,EAEA,uBAA4BD,GACxB,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,SAEd,EAEA,iBAAsBD,GAClB,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,UAEd,EAEA,wBAA6BD,GACzB,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,UAEd,EAEA,2BAAgCD,GAC5B,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,eAEd,EAEA,2BAAgCD,GAC5B,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,eAEd,EAEA,oBAAyBD,GACrB,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,aAEd,EAEA,qBAA0BD,GACtB,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,cAEd,EAEA,oBAAyBD,GACrB,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,aAEd,EAEA,eAAoBD,GAChB,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,QAEd,EAEA,iBAAsBD,GAClB,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,UAEd,EAEA,qBAA0BD,GACtB,OAAOH,EAAqB,OAAD,wBACpBG,GAAO,CACVC,KAAM,cAEd,EAEA,mBAAwBD,GACpB,OAAOH,EAAqBG,EAChC,C,cCtGA,SAAgBE,EAAexD,GAC3B,OAAOA,EAAIyD,OAAO,GAAGC,cAAgB1D,EAAI2D,MAAM,EACnD,C,4FAhBA,4BAAgBC,EAAiBzC,GAC7B,GAAoB,iBAATA,GAA8B,OAATA,EAC5B,OAAOA,EACJ,GAAI0C,MAAMC,QAAQ3C,GACrB,OAAOA,EAAKc,IAAI2B,GACb,CACH,MAAMG,EAAkC,CAAC,EACzC,IAAK,MAAO/D,EAAKgE,KAAU9D,OAAOC,QAAQgB,GACtC4C,EAAOP,EAAexD,IAAQ4D,EAAiBI,GAEnD,OAAOD,C,CAEf,EAEA,kB,WCjBAE,EAAOC,QAAUC,QAAQ,O,WCAzBF,EAAOC,QAAUC,QAAQ,M,oKCIzB,eACA,UAQA,0BAA+BC,EAA+BtB,GAC1D,GAAwB,kBAAbsB,EACP,MAAwB,CACpBJ,MAAOI,GAIf,IAAI,IAAArE,WAAUqE,GACV,MAAM,IAAI,EAAAzE,kBACN,sDAAsDyE,mCAA0CtB,MAK5G,EAQA,4BACIsB,EACAtB,GAEA,GAAwB,iBAAbsB,EACP,MAA0B,CACtBJ,MAAOI,GAER,GAAwB,iBAAbA,IACTC,MAAMC,OAAOF,IAEd,MAA0B,CACtBJ,MAFiBO,WAAWH,IAOxC,IAAI,IAAArE,WAAUqE,GACV,MAAM,IAAI,EAAAzE,kBACN,qDAAqDyE,mCAA0CtB,MAK3G,EAQA,uBAA4BsB,EAA8BtB,GACtD,GAAwB,iBAAbsB,EACP,OAAOA,EAGX,IAAI,IAAArE,WAAUqE,GACV,MAAM,IAAI,EAAAzE,kBACN,qDAAqDyE,mCAA0CtB,OAIvG,MAAO,EACX,EAQA,4BAAiCsB,EAA8BtB,GAC3D,GAAwB,iBAAbsB,EACP,MAA0B,CACtBJ,MAAOI,GAIf,IAAI,IAAArE,WAAUqE,GACV,MAAM,IAAI,EAAAzE,kBACN,qDAAqDyE,mCAA0CtB,MAK3G,EAQA,+BACI0B,EACA1B,GAEA,IAAI,IAAA/C,WAAUyE,GACV,IACI,MAAMC,EAAyC,iBAAbD,EAAwBA,EAAWA,EAASE,UAE9E,GAAID,GAAsBA,GAAsB,EAC5C,MAAO,CACHT,MAAO,CACHW,QAASC,KAAKC,MAAMJ,EAAqB,M,CAIvD,SACE,MAAM,IAAI,EAAA9E,kBACN,gEAAgE6E,8BAAqC1B,M,CAKrH,C,qHC9HA,gBAEA,+BAAoCgC,GAChC,GAAKA,EAEE,CACH,MAAMf,EAAuB,CACzBgB,YAAY,IAAAC,aAAYF,EAAc,cACtCG,eAAe,IAAAD,aAAYF,EAAc,kBAK7C,OAHIA,EAAaI,YACbnB,EAAOmB,UAMnB,SAA0BA,GACtB,MAAMnB,EAAoB,CAAC,EAI3B,OAHA,IAAAoB,mBAAkBD,EAAWnB,EAAQ,YACrC,IAAAoB,mBAAkBD,EAAWnB,EAAQ,WACrC,IAAAoB,mBAAkBD,EAAWnB,EAAQ,cAC9BA,CACX,CAZ+BqB,CAAiBN,EAAaI,YAE9CnB,C,CAEf,EAUA,+BAAoCsB,GAChC,GAAKA,EAEE,CACH,MAAMtB,EAAuB,CAAC,EAM9B,OALA,IAAAoB,mBAAkBE,EAActB,EAAQ,gBACxC,IAAAoB,mBAAkBE,EAActB,EAAQ,cACpCsB,EAAaC,aACbvB,EAAOuB,WAAaD,EAAaC,YAE9BvB,C,CAEf,C,2oBClBA,gBACA,SACA,SACA,UACA,UAEA,eACA,aAAS,uEAAAwB,KAAK,IAEd,IAAIC,GAAc,EAalB,SAASC,EACLC,EACAC,GAEA,MAAMrC,EAC0B,mBAArBoC,EAAkC,CAAEE,QAASF,GAAqBA,EAE7E,OADApC,EAAQuC,QAAU,CAACF,GACZrC,CACX,CAEA,SAASwC,EACLxC,EACAyC,GAIA,MAAM,QAAEH,EAASI,OAAQC,EAAG,QAAEC,EAAO,YAAEC,EAAW,aAAEC,EAAY,MAAEC,GAA6B/C,EAAnBgD,EAAc,EAAKhD,EAAzF,qEACN,MAAO,CACH4C,QAASA,QAAAA,EAAWH,EAAcO,GAClCN,OAAQC,EACRI,QACAF,cACAC,eACAR,UAER,CAsBA,SAAgBhE,EAAKtB,EAAcgD,GAC/BA,EAAQ0C,SAAR1C,EAAQ0C,OAAWO,EAAO3E,KAAK,CAAC,IAChC4E,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQtE,MAC3D,CAmDA,SAAgB4E,EAAQlG,EAAcgD,GAC7BkC,GAlHT,WACI,MAAM5F,GAAU,IAAAC,qBACXD,EAKDA,EAAQ6G,oBAAoB,IAAI,EAAAC,kBAJhCC,QAAQC,KACJ,8IAKRpB,GAAc,CAClB,CAyGQiB,GAGJ,MAAM7G,GAAU,IAAAC,qBACXD,EAKDA,EAAQiH,kBAAiB,IAAAC,wBAAuBxG,EAAMgD,GAA4BA,EAAQsC,SAJ1Fe,QAAQC,KACJ,gDAAgDtG,6DAK5D,CAvFA,eAAoBA,EAAcoF,GAC9B9D,EAAKtB,EAAMmF,EAAqBC,EAAkB,OACtD,EAEA,eAAoBpF,EAAcoF,GAC9B9D,EAAKtB,EAAMmF,EAAqBC,EAAkB,OACtD,EAEA,gBAAqBpF,EAAcoF,GAC/B9D,EAAKtB,EAAMmF,EAAqBC,EAAkB,QACtD,EAEA,iBAAsBpF,EAAcoF,GAChC9D,EAAKtB,EAAMmF,EAAqBC,EAAkB,SACtD,EAEA,yBAA8BpF,EAAcoF,GACxC9D,EAAKtB,EAAMmF,EAAqBC,EAAkB,UACtD,EAEA,SAKA,iBAAsBpF,EAAcgD,GAChCkD,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQa,OAC3D,EAEA,uBAA4BzG,EAAcgD,GACtCkD,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQc,aAC3D,EAEA,wBAA6B1G,EAAcgD,GACvCkD,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQe,cAC3D,EAEA,2BAAgC3G,EAAcgD,GAC1CkD,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQgB,iBAC3D,EAEA,2BAAgC5G,EAAcgD,GAC1CkD,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQiB,iBAC3D,EAEA,oBAAyB7G,EAAcgD,GACnCkD,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQkB,UAC3D,EAEA,qBAA0B9G,EAAcgD,GACpCkD,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQmB,WAC3D,EAEA,oBAAyB/G,EAAcgD,GAEnCkD,EAAQlG,EAAMwF,EAAwBxC,EAAc4C,EAAQoB,UAChE,EAEA,kBAAuBhH,EAAcgD,GACjCkD,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQqB,QAC3D,EAEA,eAAoBjH,EAAcgD,GAC9BkD,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQsB,KAC3D,EAEA,iBAAsBlH,EAAcgD,GAChCkD,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQuB,OAC3D,EAEA,qBAA0BnH,EAAcgD,GACpCkD,EAAQlG,EAAMwF,EAAwBxC,EAAS4C,EAAQwB,WAC3D,EAEA,W,0zBC5IA,MAAaC,EACT,WAAOjG,IAAQkG,GACX,IAAIC,EAA6DD,EACjE,OAAO,IAAID,GAAW,WAClB,GAAIE,EAAa,CACb,IAAK,MAAMC,KAAcD,EACjBC,GAA4C,mBAAvBA,EAAWC,SAChCD,EAAWC,UAGnBF,OAAcG,C,CAEtB,GACJ,CAIA,WAAAnF,CAAYoF,GAFZ,mBAGI,EAAAC,KAAI,EAAkBD,EAAa,IACvC,CAEA,OAAAF,GACuC,mBAAxB,EAAAG,KAAI,SACX,EAAAA,KAAI,OAAe,KAAnBA,MACA,EAAAA,KAAI,OAAkBF,EAAS,KAEvC,EA1BJ,e,69BCJA,gBACA,UACA,UACA,UACA,SACA,UACA,UAGMG,EAAiD,CAAC,EAClDC,EAAiD,CAAC,EAIlDC,EAAsB,IAAI,EAAAC,aAEhC,+BAA0CC,G,yCACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAMR,EAASI,GACjBI,GACAF,EAAQE,UACDR,EAASI,IAEhBF,EAAoBO,KAAKL,GAAc,KACnC,MAAMI,EAAMR,EAASI,GACjBI,IACAF,EAAQE,UACDR,EAASI,G,MAKpC,G,EAEA,MAAMM,EAAqB,qBAC3B,6BAAwCN,EAAsBO,G,qDAC1D,MAAMC,GAAW,IAAA/D,aAAYoD,EAAWG,UACjCH,EAAUG,GACjB,IAAK,MAAOvI,EAAKC,KAAQ6I,EAAQE,QAAQ7I,UACrC4I,EAASE,UAAUjJ,EAAKC,GAS5B,GAPA8I,EAASE,UAAUJ,EAAoBN,GACvCQ,EAASG,WAAaJ,EAAQK,OAE1BL,EAAQM,QAAQC,OAAS,GAYjC,SAAoBP,EAAuBC,GACvC,MAAMO,EAA8BR,EAAQM,QAAQnH,KAAKsH,IACrD,IAAIC,EACJ,OAAQD,EAAEC,UACN,IAAK,MACDA,EAAW,MACX,MACJ,IAAK,OACDA,EAAW,OACX,MACJ,IAAK,SACDA,EAAW,SACX,MACJ,QACIA,EAAWD,EAAEC,SAErB,OAAO,IAAAC,WAAgBF,EAAEjJ,KAAMiJ,EAAEvF,MAAO,CACpC0F,OAAQH,EAAEG,OACVC,KAAMJ,EAAEI,KACRC,QAA8B,iBAAdL,EAAEK,QAAuB,IAAIC,KAAKN,EAAEK,SAAWL,EAAEK,QACjEE,OAAQP,EAAEO,OACVC,SAAUR,EAAEQ,SACZP,SAAUA,EACVQ,OAAQT,EAAES,QACZ,IAENjB,EAASE,UAAU,aAAcK,EACrC,CAtCQW,CAAWnB,EAASC,GAGpBD,EAAQoB,K,IACR,IAA0B,IAAqB,EAArB,SAAApB,EAAQoB,KAAKC,UAAQ,+BAArB,e,IAAf,MAAMC,EAAK,EAClBrB,EAASsB,MAAMD,E,oHAGvBrB,EAASuB,K,KAgCb,4B,yCACI,OAAO,IAAI9B,SAAQ,CAACC,EAAS8B,KACzB,MAAMC,EAAS5I,EAAK6I,eAEpBD,EAAOE,GAAG,WAAW,CAAC/B,EAAKgC,KACvB,MAAMpC,EAAeI,EAAIK,QAAQH,GACL,iBAAjBN,GACPJ,EAASI,GAAgBI,EACzBP,EAAUG,GAAgBoC,EAC1BtC,EAAoBuC,KAAKrC,KAEzB,IAAAlI,iBAAgB,QAAS,qCAAqCwI,I,IAItE2B,EAAOE,GAAG,SAAU1H,IAChBA,GAAM,IAAA6H,iBAAgB7H,IACtB,IAAA3C,iBAAgB,QAAS,qBAAqB2C,EAAI8H,OAAS9H,EAAIC,UAAU,IAG7EuH,EAAOO,QAAO,KACV,MAAMC,EAAUR,EAAOQ,UAEP,OAAZA,GAAuC,iBAAZA,EACN,IAAjBA,EAAQC,OAER,IAAA5K,iBAAgB,QAAS,uCA0B7C,SAAsB6K,GAClB,MAAMV,EAASW,EAAIV,gBAEnB,SAASW,EAAQH,GACb,GAAIA,EAjII,MAmIJ,MAAM,IAAI,EAAAtL,kBACN,iHAIR6K,EAAO5B,KAAK,SAAS,KAEjBwC,EAAQH,EAAO,EAAE,IAIrBT,EAAO5B,KAAK,aAAa,KACrB,MAAMoC,EAAUR,EAAOQ,UACP,OAAZA,GAAuC,iBAAZA,IAC3BC,EAAOD,EAAQC,KACfT,EAAOa,QACPH,EAASD,G,IAKjBT,EAAOO,OAAOE,EAClB,CAGAG,CA7JY,KA8JhB,CAzDoBE,EAAcC,IAEVf,EAAOa,QACPb,EAAOO,OAAOQ,GAAU,MACpB,IAAAlL,iBAAgB,QAAS,+CAA+CkL,IAAW,IAEvF9C,EAAQ,oBAAoB8C,KAAY,OAI5C,IAAAlL,iBAAgB,QAAS,sCAAsC2K,EAAQC,QACvExC,EAAQ,oBAAoBuC,EAAQC,UAGxCV,EAAO,IAAI,EAAA5K,kBAAkB,qD,IAIrC6K,EAAOE,GAAG,SAAS,MACf,IAAArK,iBAAgB,cAAe,qBAAqB,GACtD,GAEV,G,mGCpIA,gBACA,SACA,UACA,UAEA,kCAAuCC,EAAcgD,GACjD,MAAMkI,EAAqD,CAAC,EACtDC,EAAyB,GAEzBvF,EAAU5C,EAAQ4C,QAQxB,GAPAsF,EAAStF,EAAQ5F,MAAQ,OAAH,wBACf4F,GAAO,CACVwF,UAAW,KACXnI,MAAM,IAAAoI,WAAUzF,EAAQ3C,MAAQ2C,EAAQ3C,KAAO2C,EAAQ3C,KAAO,YAElEkI,EAAaG,KAAK1F,EAAQ5F,MAEtBgD,EAAQ6C,YACR,IAAK,MAAM0F,KAASvI,EAAQ6C,YACxBqF,EAASK,EAAMvL,MAAQ,OAAH,wBACbuL,GAAK,CACRH,UAAW,OAEfD,EAAaG,KAAKC,EAAMvL,MAYhC,GARIgD,EAAQ0C,SACRwF,EAAS,EAAAM,kBAAoB,OAAH,wBACnBxI,EAAQ0C,QAAM,CACjB0F,UAAW,QAEfD,EAAaG,KAAK,EAAAE,mBAGlBxI,EAAQ8C,aACR,IAAK,MAAMG,KAAUjD,EAAQ8C,aACzBoF,EAASjF,EAAOjG,MAAQ,OAAH,wBACdiG,GAAM,CACTmF,UAAW,QAEfD,EAAaG,KAAKrF,EAAOjG,MAKjC,GADqBmL,EAAaM,QAAO,CAACC,EAAGC,IAAMR,EAAaS,QAAQF,KAAOC,IAC9D5C,OAAS,EACtB,MAAM,IAAI,EAAA1J,kBACN,0CAA0CW,6FAIlD,IAAI6L,EAiBJ,OAhBI7I,EAAQ+C,QACR8F,EAAe,OAAH,wBACL7I,EAAQ+C,OAAK,CAChB+F,cAAe9I,EAAQ+C,MAAMgG,SAC7BC,eAAe,IAAAC,eAAuCjJ,EAAQ+C,MAAOiG,cAAe,uBACpFE,iBAAiB,IAAAD,eACoBjJ,EAAQ+C,MAAOmG,gBAChD,yBAEJC,iBAAiB,IAAAF,eACoBjJ,EAAQ+C,MAAOoG,gBAChD,4BAKL,CAAEnM,OAAMkL,WAAUW,eAC7B,C,wOC1CA,gBAmGA,SAASO,EAAiEtJ,GACtE,OAAO,IAAAC,gBAAeD,EAAS,UACnC,CAnGA,gBAAqBE,GACjB,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVqJ,UAAWrJ,EAAQqJ,WAAa,YAChC9G,QAASvC,EAAQuC,SAAW,CAAC,MAAO,QACpCtC,KAAM,gBAEd,EAEA,iBAAsBD,GAClB,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,iBAEd,EAEA,uBAA4BD,GACxB,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,gBAEd,EAEA,wBAA6BD,GACzB,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,iBAEd,EAEA,2BAAgCD,GAC5B,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,sBAEd,EAEA,2BAAgCD,GAC5B,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,sBAEd,EAEA,oBAAyBD,GACrB,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,oBAEd,EAEA,qBAA0BD,GACtB,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,qBAEd,EAEA,oBAAyBD,GACrB,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,oBAEd,EAEA,kBAAuBD,GACnB,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,kBAEd,EAEA,eAAoBD,GAChB,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,eAEd,EAEA,iBAAsBD,GAClB,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,iBAEd,EAEA,qBAA0BD,GACtB,OAAOoJ,EAAsB,OAAD,wBACrBpJ,GAAO,CACVC,KAAM,qBAEd,EAEA,mBAAwBD,GACpB,OAAOoJ,EAAsBpJ,EACjC,C,iBC7HA,IAAI1D,E,4EACJ,+BACI,QAAgBoI,IAAZpI,EACA,IAEIA,EAA4B,EAAQ,K,CACtC,SACEA,EAAU,I,CAGlB,OAAOA,CACX,C,WChBAqE,EAAOC,QAAUC,QAAQ,S,8GCGzB,gBAEA,8BAAmCkF,EAAS,IAExC,OADuBuD,EAAOC,YAAYjI,KAAKkI,KAAKzD,EAAS,IAC/C0D,SAAS,OAAOpJ,MAAM,EAAG0F,EAC3C,EAEA,yBAA8BlI,EAAckI,EAAS,IACjD,OAAOuD,EAAOI,WAAW,UAAUC,OAAO9L,GAAM+L,OAAO,OAAOvJ,MAAM,EAAG0F,EAC3E,C,wFCPA,0BAA+BlI,GAC3B,OAAIA,QACOA,EACgB,iBAATA,EACP,CAAEG,OAAQH,GACVM,OAAO0L,SAAShM,GAChB,CAAEK,MAAOL,GACTiM,YAAYC,OAAOlM,GAEnB,CAAEK,MADK,IAAI8L,WAAWnM,EAAKoM,OAAQpM,EAAKqM,WAAYrM,EAAKsM,aAEzDtM,aAAgBiM,YAEhB,CAAE5L,MADK,IAAI8L,WAAWnM,IAEN,iBAATA,EACVmD,OAAOoJ,UAAUvM,GACV,CAAEW,IAAKX,GAEP,CAAEY,OAAQZ,GAGd,CAAEI,KAAMH,KAAK8B,UAAU/B,GAEtC,C,+FCvBA,gBAEA,MAAawM,UAA4B,EAAAC,aAAzC,uB,kGCDA,gBACA,SACA,SAEA,kCACIC,EACAC,GAMA,GAAKD,KAAmB,IAAAE,eAAcD,MAAgB,IAAAE,gBAAeF,GAE9D,CACH,MAAM/J,EAA0B,CAAC,EACjC,IAAK,MAAO/D,EAAKgE,KAAU9D,OAAOC,QAAQ0N,GACtC9J,GAAO,IAAAP,gBAAexD,KAAQ,IAAA4D,mBAAiB,IAAAqK,kBAAiBjK,IAEpE,OAAOD,C,CAEf,C,WC1BAE,EAAOC,QAAUC,QAAQ,S,2KCqBzB,gBAuDA,SAAS+J,EAA+D9K,GACpE,OAAO,IAAAC,gBAAeD,EAAS,QACnC,CAvDA,uBAA4BE,GACxB,OAAO4K,EAAoB,OAAD,wBACnB5K,GAAO,CACVC,KAAM,SAEd,EAEA,iBAAsBD,GAClB,OAAO4K,EAAoB,OAAD,wBACnB5K,GAAO,CACVC,KAAM,UAEd,EAEA,oBAAyBD,GACrB,OAAO4K,EAAoB,OAAD,wBACnB5K,GAAO,CACVC,KAAM,aAEd,EAEA,eAAoBD,GAChB,OAAO4K,EAAoB,OAAD,wBACnB5K,GAAO,CACVC,KAAM,QAEd,EAEA,iBAAsBD,GAClB,OAAO4K,EAAoB,OAAD,wBACnB5K,GAAO,CACVC,KAAM,UAEd,EAEA,+BAAoCD,GAChC,OAAO4K,EAAoB,OAAD,wBACnB5K,GAAO,CACVC,KAAM,wBAEd,EAEA,4BAAiCD,GAC7B,OAAO4K,EAAoB,OAAD,wBACnB5K,GAAO,CACVC,KAAM,qBAEd,EAEA,mBAAwBD,GACpB,OAAO4K,EAAoB5K,EAC/B,C,2FCtEA,gBACA,UACA,UAEA,2BAAgC6K,KAA0BC,GACtD,MAAMxO,GAAU,IAAAC,qBAEZD,GAAWA,EAAQE,IACnBF,EAAQE,IAAIqO,EAAO,UAAU,IAAAE,WAAUD,KAEvC,IAAAE,oBAAmBH,KAAUC,EAErC,C,2ZCZA,eACA,UACA,UACA,SACA,UACA,UAEA,qBAAgC7F,EAAsBpH,G,yCAClD,GAAIA,QACA,OAAOA,EACJ,GAAoB,iBAATA,EACd,MAAM,IAAI,EAAAxB,kBACN,4GAIR,MAAM4O,EAAWpN,aAAgB,EAAAqN,aAAerN,EAAO,IAAI,EAAAqN,aAAarN,GACxE,GAAI,EAAA3B,iBAGA,kBADM,IAAAiP,mBAAkBlG,EAAcgG,IAI1C,MAAMG,EAA2B,CAAC,EAClCA,EAAYxF,WAAaqF,EAASpF,OAAO4D,WAEzC2B,EAAY1F,QAAU,CAAC,EACvB,IAAK,MAAOhJ,EAAKgE,KAAUuK,EAASvF,QAAQ7I,UACxCuO,EAAY1F,QAAQhJ,GAAOgE,EAG/B0K,EAAYtF,QAAU,GACtB,IAAK,MAAMuF,KAAUJ,EAASnF,QAC1BsF,EAAYtF,QAAQwC,MAAK,IAAAgD,iBAAgBD,IAG7CD,EAAYG,yBAA2BN,EAASM,yBAEhD,MAAMC,QAAkBP,EAASQ,cAGjC,OAFAL,EAAYxE,MAAO,IAAA8E,gBAAeF,GAE3B,CAAElN,KAAM8M,EACnB,G,YC9CAzK,EAAOC,QAAUC,QAAQ,S,6FCKzB,+BACI8K,EACAC,G,MAEA,IAAIC,EAAoC,CAAC,EACzC,GAAIF,GAAmB/O,OAAOkP,KAAKH,GAAiB5F,OAAS,EACzD,IAAK,MAAMrJ,KAAOiP,EACdE,EAAUnP,IAA2B,QAApB,EAAAiP,EAAgBjP,UAAI,eAAEgE,QAAS,QAE7CkL,GAAmBhP,OAAOkP,KAAKF,GAAiB7F,OAAS,IAChE8F,EAAYD,GAEhB,OAAOC,CACX,C,4FCbA,8BAAmChB,KAA0BC,GACzD,OAAQD,GACJ,IAAK,QACDxH,QAAQ0I,SAASjB,GACjB,MACJ,IAAK,QACDzH,QAAQ2I,SAASlB,GACjB,MACJ,IAAK,cACDzH,QAAQ4I,QAAQnB,GAChB,MACJ,IAAK,UACDzH,QAAQC,QAAQwH,GAChB,MACJ,IAAK,WACL,IAAK,QACDzH,QAAQ6I,SAASpB,GACjB,MACJ,QACIzH,QAAQ7G,OAAOsO,GAE3B,C,g0BCtBA,eACA,UACA,UAEA,MAAaqB,UAAuB,EAAA7B,YAGhC,WAAA/K,CAAY6M,G,gBACR3M,MAAM2M,GAHV,mBAII,EAAAxH,KAAI,EAASwH,QAAAA,EAAQ,CAAC,EAAC,KACP,QAAhB,OAAAxH,KAAI,QAAOiG,aAAK,UAALA,MAAU,eACH,QAAlB,OAAAjG,KAAI,QAAOjF,eAAO,UAAPA,QAAY,WACJ,QAAnB,OAAAiF,KAAI,QAAOyH,gBAAQ,UAARA,SAAa,OAC5B,CAEA,SAAIxB,GACA,OAAO,IAAAnJ,aAAY,EAAAkD,KAAI,OAAQ,QACnC,CAEA,SAAIiG,CAAMnK,GACN,EAAAkE,KAAI,OAAOiG,MAAQnK,CACvB,CAEA,WAAIf,GACA,OAAO,IAAA+B,aAAY,EAAAkD,KAAI,OAAQ,UACnC,CAEA,WAAIjF,CAAQe,GACR,EAAAkE,KAAI,OAAOjF,QAAUe,CACzB,CAEA,YAAI2L,GACA,OAAO,IAAA3K,aAAY,EAAAkD,KAAI,OAAQ,WACnC,CAEA,YAAIyH,CAASC,GACT,MAAM,IAAI,EAAAC,cAAc,WAC5B,CAEA,qBAAIC,GACA,OAAO,EAAA5H,KAAI,OAAO4H,iBACtB,CAEA,qBAAIA,CAAkBF,GAClB,MAAM,IAAI,EAAAC,cAAc,oBAC5B,EAzCJ,mB,wBCRA5L,EAAOC,QAAUC,QAAQ,S,2FCKzB,gBACA,UACA,UA0BA,SAAS4L,EAAezP,EAAc8C,GAClC,OAAO,OAAP,wBACOA,GAAO,CACVG,MAAM,IAAAyB,aAAY5B,EAAS,QAC3B9C,QAER,CA9BA,2BAAgCkL,GAC5B,IAAItF,EACA8J,EACJ,MAAM7J,EAA+B,GAC/BC,EAAiC,GACvC,IAAK,MAAO9F,EAAM8C,KAAYlD,OAAOC,SAAQ,IAAA8P,cAAazE,EAAU,cAC5D,IAAAG,WAAUvI,EAAQG,MAClB2C,EAAU6J,EAAezP,EAAM8C,GACxB9C,IAAS,EAAAwL,iBAChBkE,EAAgBD,EAAezP,EAAM8C,GACR,OAAtBA,EAAQsI,UACfvF,EAAYyF,KAAKmE,EAAezP,EAAM8C,IACT,QAAtBA,EAAQsI,WACftF,EAAawF,KAAKmE,EAAezP,EAAM8C,IAG/C,MAAO,CACH8C,SAAS,IAAA+J,cAAa/J,EAAS,WAC/BF,OAAQgK,EACR7J,cACAC,eAER,C,6zBC3BA,eACA,UAEA,oBAGI,WAAAvD,CAAY6M,G,QAFZ,mBAGI,EAAAxH,KAAI,EAASwH,QAAAA,EAAQ,CAAC,EAAC,KACJ,QAAnB,OAAAxH,KAAI,QAAOgI,gBAAQ,UAARA,SAAa,CAAC,EAC7B,CAEA,YAAIA,GACA,OAAO,IAAAlL,aAAY,EAAAkD,KAAI,OAAQ,WACnC,CAEA,YAAIgI,CAASN,GACT,MAAM,IAAI,EAAAC,cAAc,WAC5B,G,4pCCRJ,gBACA,UACA,UACA,UACA,UACA,SACA,SACA,UACA,UACA,SACA,UACA,UACA,UACA,SACA,UACA,UAEA,wBAOI,WAAAhN,CAAYpC,G,YANZ,YAAU,GACV,mBACA,mBACA,mBACA,mBAGI,EAAAyH,KAAI,EAAYzH,EAAO,KACvB,EAAAyH,KAAI,GAAiB,IAAAlD,aAAYvE,EAAQ0P,SAAU,QAAO,KAC1D,EAAAjI,KAAI,GAAa,IAAAlD,aAAYvE,EAAQ0P,SAAU,YAAW,KAC1D,MAAMC,GAAiB,IAAAH,cACnB/P,OAAOiK,OAAO,EAAAjC,KAAI,QAAYmI,MAAMC,IAAM,IAAA3E,WAAU2E,EAAE/M,QACtD,kBAEJ,EAAA2E,KAAI,GAAgB,IAAAlD,aAAYoL,EAAgB,QAAO,IAC3D,CAGM,YAAAG,G,yCACF,MAAM5H,EAAM,EAAAT,KAAI,OAAUsI,QAEpBC,EAAU,IAAI,EAAAC,kBAAkB,CAClCnI,cAAc,IAAAvD,aAAY,EAAAkD,KAAI,OAAW,gBACzCyI,aAAc,EAAAzI,KAAI,OAClB0I,WAAY,CAACzC,KAAuBC,IAAoB,EAAAlG,KAAI,SAAS,KAAbA,KAAciG,KAAUC,GAChFtJ,cAAc,IAAA+L,qBAAoBlI,EAAI7D,cACtCO,cAAc,IAAAyL,qBAAoBnI,EAAItD,cACtCwI,iBAAiB,IAAAkD,wBAAuBpI,EAAIkF,gBAAiB,EAAA3F,KAAI,QACjE5E,SAAS,IAAA0N,iBAAgB,EAAA9I,KAAI,UAG3B+I,EAAoB,GAC1B,GAAItI,EAAIuI,UACJ,IAAK,MAAM9N,KAAWuF,EAAIuI,UAAW,CACjC,MAAMC,GAAc,IAAAnM,aAAY5B,EAAS,QAEnCgO,EAAa,EAAAlJ,KAAI,OAAWiJ,GAClC,IAAKC,EACD,MAAM,IAAI,EAAAzR,kBACN,2BAA2BwR,mBAA6BjR,OAAOkP,KAAK,EAAAlH,KAAI,QAAYmJ,KAChF,WAIZ,MAAMC,EAAcF,EAAW7N,KAE/B,IAAIsI,EACJ,IAAI,IAAAkC,eAAcuD,IAAgB,EAAA9R,iBAAkB,CAChD,MAAM+R,QAAqB,IAAAC,qBAAoB,EAAAtJ,KAAI,OAAUK,cAC7DsD,GAAQ,IAAA4F,qBAAoBF,GAAc,IAAAvM,aAAY2D,EAAK,mB,MAE3DkD,GAAQ,IAAAoC,kBAAiB7K,EAAQjC,OAGjC,IAAA6M,gBAAesD,KACfzF,GAAQ,IAAAjI,kBAAiBiI,KAGzB,IAAAF,WAAU2F,GACVL,EAAOrF,KAAKC,GAEZ4E,EAAQtK,YAAYuL,IAAIP,EAAatF,E,CAKjD,MAAO,CAAE4E,UAASQ,SACtB,G,CAEM,cAAAU,CACFlB,EACAQ,EACArL,G,yCAEA,IACI,aAAa4C,QAAQC,QAAQ7C,KAAWqL,EAAQR,G,SAEhD,EAAAvI,KAAI,GAAW,EAAI,I,CAE3B,G,CAEM,WAAA0J,CAAYnB,EAA4B1M,G,yCAC1C,MAAMwK,EAAkC,CAAEhG,aAAc,EAAAL,KAAI,OAAUK,aAEtEgG,WAAsB,IACtB,IAAIsD,GAAkB,EACtB,IAAK,MAAOvR,EAAM8C,KAAYlD,OAAOC,QAAQ,EAAA+H,KAAI,QAC7C,GAA0B,QAAtB9E,EAAQsI,UACR,GAAIpL,IAAS,EAAAwL,iBACTyC,EAASuD,kBAAoB,EAAA5J,KAAI,SAAe,KAAnBA,KAAoBuI,EAAQlI,aAAcnF,EAASW,GAChF8N,GAAkB,MACf,CACH,MAAME,QAAoB,EAAA7J,KAAI,SAAe,KAAnBA,KACtBuI,EAAQlI,aACRnF,EACAqN,EAAQrK,aAAa4L,IAAI1R,KAEzB,IAAAP,WAAUgS,IACVxD,EAAS0D,WAAWrG,KAAK,CAAEtL,OAAMa,KAAM4Q,G,CAcvD,OAJKF,IAAoB,IAAA9D,eAAc,EAAA7F,KAAI,UACvCqG,EAASuD,aAAc,IAAA9C,gBAAejL,IAGnCwK,CACX,G,kGAGIhG,EACAnF,EACAY,G,+CAEA,MAAoC,UAApB,QAAZ,EAAAZ,EAAQG,YAAI,eAAEG,gBACP,IAAAwO,WAAU3J,EAAcvE,IAExB,IAAAgL,gBAAehL,E,gBAIzBmK,EAAoBgE,KAAgC/D,GACrD,EAAAlG,KAAI,OAAUpI,IAAIqO,EAAOgE,GAAa,IAAA9D,WAAUD,GACpD,EAAC,WAEUD,KAAuBC,GAC9B,EAAAlG,KAAI,SAAK,KAATA,KAAUiG,EAAO,YAAaC,EAClC,EAAC,WAEQD,KAAuBC,GAC5B,GAAI,EAAAlG,KAAI,QAAoC,wBAAxB,EAAAA,KAAI,OAAUkK,MAAiC,CAC/D,IAAIC,EACA,6JACJA,GAAe,kBAAkB,EAAAnK,KAAI,0BAAkC,EAAAA,KAAI,OAAUK,gBACrF,EAAAL,KAAI,SAAW,KAAfA,KAAgB,UAAWmK,E,CAE/B,EAAAnK,KAAI,SAAK,KAATA,KAAUiG,EAAO,UAAWC,EAChC,C,0FC3KJ,gBAWA,0BACIhL,EACAkP,GAEA,IAAKlP,EAAQ9C,KAAM,CACf,IAAIgR,EAAclO,EAAQG,KACrB+N,EAAY5N,cAAc6O,SAASD,EAAO5O,iBAC3C4N,GAAegB,GAEnBlP,EAAQ9C,KAAOgR,GAAc,IAAAkB,eAAcpR,KAAK8B,UAAUE,G,CAE9D,OAA6BA,CACjC,C,0ICfA,eACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,SAASqP,EAAaC,EAAkBxH,GACpC,MAAMtL,GAAU,IAAAC,qBAChB,OAAKD,EAUMA,EAAQ6S,aAAaC,EAAUxH,IATtCvE,QAAQC,KACJ,sCAAsC8L,kEAEnC,IAAI,EAAA/K,YAAW,KAClBhB,QAAQC,KACJ,qCAAqC8L,iEACxC,IAKb,CAEA,oBAAyB9M,GACrB,OAAO6M,EAAa,YAAaE,GACtB/M,EAAQ,IAAI,EAAAgN,gBAAgBD,KAE3C,EAEA,wBAA6B/M,GACzB,OAAO6M,EAAa,gBAAiBE,GAC1B/M,EAAQ,IAAI,EAAA+H,oBAAoBgF,KAE/C,EAEA,yBAA8B/M,GAC1B,OAAO6M,EAAa,iBAAkBE,GAC3B/M,EAAQ,IAAI,EAAAiN,qBAAqBF,KAEhD,EAEA,0BAA+B/M,GAC3B,OAAO6M,EAAa,kBAAmBE,GAC5B/M,EAAQ,IAAI,EAAAkN,sBAAsBH,KAEjD,EAEA,eAAoB/M,GAChB,IACI,OAAO6M,EAAa,OAAQE,GACjB/M,EAAQ,IAAI,EAAA6J,eAAekD,K,CAExC,MAAO3P,GACL,MAAMwM,GAAQ,IAAA3E,iBAAgB7H,GAC9B,KAAmB,eAAfwM,EAAMlP,MAAyBkP,EAAMhN,4BAC/B,IAAI,EAAA7C,kBAAkB,2DAEtBqD,C,CAGlB,C,oGCtEa,EAAAzC,QAAU,QAEV,EAAAuL,iBAAmB,S,u0BCDhC,gBAEA,MAAagH,UAA8B,EAAAC,sBAGvC,WAAAlQ,CAAY6M,GACR3M,MAAM2M,GAHV,mBAII,EAAAxH,KAAI,EAASwH,QAAAA,EAAQ,CAAC,EAAC,IAC3B,CAEA,UAAI3L,GACA,OAAO,EAAAmE,KAAI,OAAOnE,MACtB,CAEA,UAAIA,CAAOC,GACP,EAAAkE,KAAI,OAAOnE,OAASC,CACxB,CAEA,SAAIwL,GACA,OAAO,EAAAtH,KAAI,OAAOsH,KACtB,CAEA,SAAIA,CAAMxL,GACN,EAAAkE,KAAI,OAAOsH,MAAQxL,CACvB,EAtBJ,0B,wGCFA,gBAEA,MAAa4O,UAAwB,EAAAhF,aAArC,mB,2FCDA,gBAMA,2BAAgCoF,GAE5B,IAAIC,EAAqC,OACzC,GAAID,GAAeA,EAAYxJ,SAAU,CACrC,MAAMA,EAAWwJ,EAAYxJ,SAAS0J,oBACrB,QAAb1J,EACAyJ,EAAc,MACM,WAAbzJ,EACPyJ,EAAc,SACM,SAAbzJ,IACPyJ,EAAc,e,CAgBtB,MAZiC,CAC7B3S,KAAM0S,IAAe,IAAAG,aAAYH,EAAY1S,KAAM,eACnD0D,MAAOgP,IAAe,IAAAG,aAAYH,EAAYhP,MAAO,gBACrD0F,QAAQ,IAAA0J,kBAAiBJ,GAAeA,EAAYtJ,OAAQ,iBAC5DC,MAAM,IAAAyJ,kBAAiBJ,GAAeA,EAAYrJ,KAAM,eACxDC,SAAS,IAAAyJ,qBAAoBL,GAAeA,EAAYpJ,QAAS,kBACjEE,QAAQ,IAAAwJ,gBAAeN,GAAeA,EAAYlJ,OAAQ,iBAC1DC,UAAU,IAAAuJ,gBAAeN,GAAeA,EAAYjJ,SAAU,mBAC9DP,SAAUyJ,EACVjJ,QAAQ,IAAAuJ,kBAAiBP,GAAeA,EAAYhJ,OAAQ,iBAIpE,C,k/CC5BA,gBACA,UACA,UACA,SACA,SACA,UACA,UAMA,MAAanI,EAQT,WAAAgB,CAAY6M,G,UAJZ,mBACA,mBACA,mBAGI,EAAAxH,KAAI,EAASwH,EAAI,KAEjB,IAAI8D,EAAO9D,EAAK+D,cAChB,IAAKD,EAAM,CACP,MAAME,GAAM,IAAA1O,aAAY0K,EAAM,OAE9B,IAAIxF,GACS,QAAT,EAAAwF,EAAKxF,YAAI,eAAE1I,OACX0I,EAAOzI,OAAOC,KAAc,QAAT,EAAAgO,EAAKxF,YAAI,eAAE1I,QACd,QAAT,EAAAkO,EAAKxF,YAAI,eAAE5I,UAClB4I,EAAOwF,EAAKxF,KAAK5I,QAGrBkS,EAAO,IAAI,UAASE,EAAK,CACrBxJ,OACAvE,QAAQ,IAAAX,aAAY0K,EAAM,UAC1B1G,SAAS,IAAA2K,qBAAoBjE,EAAKkE,gBAAiBlE,EAAK1G,U,CAGhE,EAAAd,KAAI,EAASsL,EAAI,KAEb9D,EAAKmE,eAAiBnE,EAAKoE,MAC3B5L,KAAK4L,MAAQ,IAAI,EAAAC,iBAAgB,IAAAJ,qBAAoBjE,EAAKmE,cAAenE,EAAKoE,QAE9E5L,KAAK4L,MAAQ,IAAIE,IAAI,EAAA9L,KAAI,OAAOwL,KAAKO,aAGzC/L,KAAKgM,QAAS,IAAAP,qBAAoBjE,EAAKyE,eAAgBzE,EAAKwE,OAChE,CAEA,OAAIR,GACA,OAAO,EAAAxL,KAAI,OAAOwL,GACtB,CAEA,UAAI/N,GACA,OAAO,EAAAuC,KAAI,OAAOvC,MACtB,CAEA,WAAIqD,GACA,OAAO,EAAAd,KAAI,OAAOc,OACtB,CAEA,QAAIoL,GAKA,YAJyBpM,IAArB,EAAAE,KAAI,QACJ,EAAAA,KAAI,GAAe,IAAAmM,4BAA2BnM,KAAKc,SAAQ,KAGxD,EAAAd,KAAI,MACf,CAEA,QAAIgC,GACA,OAAO,EAAAhC,KAAI,OAAOgC,IACtB,CAEA,YAAIoK,GACA,OAAO,EAAApM,KAAI,OAAOoM,QACtB,CAEM,WAAAvF,G,yCACF,OAAO,EAAA7G,KAAI,OAAO6G,aACtB,G,CAEM,IAAAwF,G,yCACF,OAAO,EAAArM,KAAI,OAAOqM,MACtB,G,CAEM,QAAAC,G,yCACF,OAAO,EAAAtM,KAAI,OAAOsM,UACtB,G,CAEM,IAAAjT,G,yCACF,OAAO,EAAA2G,KAAI,OAAO3G,MACtB,G,CAEM,IAAAkT,G,yCACF,OAAO,EAAAvM,KAAI,OAAOuM,MACtB,G,CAEA,KAAAC,GACI,MAAMC,EAAUC,gBAAgB,EAAA1M,KAAI,QAEpC,OADAyM,EAAQlB,cAAgB,EAAAvL,KAAI,OAAOwM,QAC5B,IAAI7S,EAAY8S,EAC3B,EA3FJ,gB,0CA8FA,+BACIE,EACAhH,G,MAEA,MAAMiH,EAAiB,mBACjBC,EAAkB,oBAClBC,EAAOH,EAAS7L,QAAQ8L,GACxBG,EAAQJ,EAAS7L,QAAQ+L,GAC/B,GAAoB,iBAATC,GAAsC,iBAAVC,EACnC,MAAM,IAAI,EAAAtV,kBAAkB,qBAAqBmV,WAAwBC,iBAE7E,MAAMrB,EAAM,GAAGuB,OAAWD,KAAO,IAAAhQ,aAAY6P,EAAU,SAEvD,IAAI3K,EACJ,MAAMgL,EAA6B,QAAf,EAAAL,EAASlP,cAAM,eAAEjC,cACjB,QAAhBwR,GAAyC,SAAhBA,IACzBhL,EAAO2K,GAMX,MAAQM,MAAOC,EAAiBC,QAASC,GAA6BzH,EAAd0H,EAAS,EAAK1H,EAAhE,qBAEN,IAAI7E,EACJ,MAAMwM,GAAc,IAAAvH,kBAAiBqH,GACV,iBAAhBE,IAA4B,IAAAzV,WAAUyV,KAC7CxM,EAAuBwM,GAG3B,MAAMhC,EAAO,IAAI,UAASE,EAAK,CAC3BxJ,OACAuL,OAAQ,OACR9P,QAAQ,IAAAX,aAAY6P,EAAU,UAC9B7L,YAGEkL,EAAiC,CAAC,EACxC,IAAK,MAAOlU,EAAK0V,KAAaxV,OAAOC,QAAQoV,IACrC,IAAAxV,WAAU2V,EAASpU,UACnB4S,EAAOlU,GAAO0V,EAASpU,QAI/B,OAAO,IAAIO,EAAY,CACnB4R,cAAeD,EACfU,UAER,C,kWCjKA,cACA,cAAS,iFAAAtB,eAAe,IACxB,cAAS,qFAAAjF,mBAAmB,IAC5B,cAAS,6EAAAC,WAAW,IACpB,cAAS,uFAAAmF,qBAAqB,IAC9B,cAAS,gFAAAtD,cAAc,IACvB,cAAS,uFAAAqD,qBAAqB,IAC9B,cAAS,sFAAAD,oBAAoB,IAC7B,cAAS,6EAAAhR,WAAW,IACpB,cAAS,8EAAA2M,YAAY,IACrB,gBACA,cAAS,mFAAAkC,iBAAiB,IAC1B,gBACA,kBACA,IAQYiF,EANAC,EAFZ,UAAS,4EAAAjO,UAAU,KAEPiO,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAC1B,qBACA,uBACA,wBAGQD,EAAA,EAAAA,uBAAA,EAAAA,qBAAoB,KAC5B,oB,u0BCdJ,gBAEA,0BAWI,WAAA9S,CAAY6M,G,YAFZ,mBAGIA,EAAOA,GAAQ,CAAC,EAChB,MAAMmG,EAAiB,UACvB3N,KAAKK,aAAemH,EAAKnH,cAAgBsN,EACzC3N,KAAKyI,aAAejB,EAAKiB,cAAgBkF,EACzC3N,KAAK/B,YAAc,IAAI2P,EACvB5N,KAAK9B,aAAe,IAAI2P,EACxB7N,KAAKpD,aAAe4K,EAAK5K,aACzBoD,KAAK7C,aAAeqK,EAAKrK,aACzB6C,KAAK2F,gBAAkB6B,EAAK7B,gBAC5B3F,KAAK5E,QAAU,CACX4C,SAAqB,QAAZ,EAAAwJ,EAAKpM,eAAO,eAAE4C,UAAW,CAC9B5F,KAAMuV,EACNtS,KAAMsS,GAEV7P,OAAoB,QAAZ,EAAA0J,EAAKpM,eAAO,eAAE0C,OACtBG,aAAyB,QAAZ,EAAAuJ,EAAKpM,eAAO,eAAE6C,cAAe,GAC1CC,cAA0B,QAAZ,EAAAsJ,EAAKpM,eAAO,eAAE8C,eAAgB,IAEhD,EAAA8B,KAAI,EAAmBwH,EAAKkB,YAAc,EAAAtC,mBAAkB,IAChE,CAEA,GAAAxO,IAAOsO,GACH,EAAAlG,KAAI,OAAgB,KAApBA,KAAqB,iBAAkBkG,EAC3C,CAEA,KAAAiB,IAASjB,GACL,EAAAlG,KAAI,OAAgB,KAApBA,KAAqB,WAAYkG,EACrC,CAEA,KAAAkB,IAASlB,GACL,EAAAlG,KAAI,OAAgB,KAApBA,KAAqB,WAAYkG,EACrC,CAEA,IAAAmB,IAAQnB,GACJ,EAAAlG,KAAI,OAAgB,KAApBA,KAAqB,iBAAkBkG,EAC3C,CAEA,IAAAxH,IAAQwH,GACJ,EAAAlG,KAAI,OAAgB,KAApBA,KAAqB,aAAckG,EACvC,CAEA,KAAAoB,IAASpB,GACL,EAAAlG,KAAI,OAAgB,KAApBA,KAAqB,WAAYkG,EACrC,G,cAGJ,MAAM0H,EAAN,cACI,WAAmC,CAAC,EASxC,CARI,GAAA9D,CAAIgE,GACA,MAAM1V,EAA8B,iBAAhB0V,EAA2BA,EAAcA,EAAY1V,KACzE,OAAO,EAAA4H,KAAI,OAAS5H,EACxB,CACA,GAAAoR,CAAIsE,EAA2ChS,GAC3C,MAAM1D,EAA8B,iBAAhB0V,EAA2BA,EAAcA,EAAY1V,KACzE,EAAA4H,KAAI,OAAS5H,GAAQ0D,CACzB,E,cAGJ,MAAM+R,EAAN,cACI,WAAoC,CAAC,EASzC,CARI,GAAA/D,CAAIiE,GACA,MAAM3V,EAA+B,iBAAjB2V,EAA4BA,EAAeA,EAAa3V,KAC5E,OAAO,EAAA4H,KAAI,OAAU5H,EACzB,CACA,GAAAoR,CAAIuE,EAA6CjS,GAC7C,MAAM1D,EAA+B,iBAAjB2V,EAA4BA,EAAeA,EAAa3V,KAC5E,EAAA4H,KAAI,OAAU5H,GAAQ0D,CAC1B,E,wBC7FJC,EAAOC,QAAUC,QAAQ,O,yFCKzB,eACA,UAEA,yBAA8BK,EAAyC1B,GACnE,IAAI,IAAA/C,WAAUyE,GAAW,CACrB,IACI,IAAIC,EACJ,GAAwB,iBAAbD,EAAuB,CAC9B,MAAM0R,GAAW1R,EAAS0R,SAAW,GAA6B,IAAvB1R,EAAS2R,OAAS,GACvDxR,GAAWH,EAASG,SAAW,GAAe,GAAVuR,EAC1CzR,GAAsBD,EAAS4R,cAAgB,GAAe,IAAVzR,C,KACzB,iBAAbH,IACdC,EAAqBD,GAGzB,IAAI,IAAAzE,WAAU0E,IAAuBA,GAAsB,EACvD,MAAO,CACHE,QAASC,KAAKC,MAAMJ,EAAqB,K,CAGnD,S,CAIF,MAAM,IAAI,EAAA9E,kBACN,qEAAqE6E,8BAAqC1B,M,CAKtH,C,sGC9BA,gBAKA,sCAA2CkG,GACvC,IAAIoL,EAA+B,KAEnC,MAAMiC,EAAkBrN,EAAQgJ,IAAI,yBACpC,GAAIqE,EAAiB,CACjB,MAAMC,EAAsBlV,KAAKC,MAAMI,OAAOC,KAAK2U,EAAiB,UAAUtJ,SAAS,UAGnFqH,EADAkC,EAAsC,iBAC/B,CACH/S,KAAM,gBACNgT,GAAID,EAA4B,OAChCE,SAAUF,EAAiC,YAC3CG,iBAAkBH,EAAsC,iBACxDA,uBAGG,CACH/S,KAAM,aACNgT,IAAI,IAAAtG,cAAajH,EAAQgJ,IAAI,4BAA6B,WAC1DwE,UAAU,IAAAvG,cAAajH,EAAQgJ,IAAI,8BAA+B,aAClEyE,kBAAkB,IAAAxG,cAAajH,EAAQgJ,IAAI,6BAA8B,YACzEsE,sB,CAKZ,OAAOlC,CACX,C,s0BCjCA,gBACA,UAEA,MAAavB,UAA6B,EAAAE,sBAGtC,WAAAlQ,CAAY6M,G,QACR3M,MAAM2M,GAHV,mBAII,EAAAxH,KAAI,EAASwH,QAAAA,EAAQ,CAAC,EAAC,KACI,QAA3B,OAAAxH,KAAI,QAAOwO,wBAAgB,UAAhBA,iBAAqB,OACpC,CAEA,mBAAIC,GACA,OAAO,IAAA3R,aAAY,EAAAkD,KAAI,OAAQ,mBACnC,CAEA,mBAAIyO,CAAgB3S,GAChB,EAAAkE,KAAI,OAAOwO,iBAAmB1S,CAClC,EAfJ,yB,wBCPAC,EAAOC,QAAUC,QAAQ,wB,4nCCOzB,gBACA,UAMA,MAAaqK,EAOT,WAAA3L,CAAY6M,G,MAIR,GAPJ,mBACA,mBAGIA,UAAAA,EAAS,CAAC,GACV,EAAAxH,KAAI,EAASwH,EAAI,KAEbA,EAAKkH,eACL,EAAA1O,KAAI,EAASwH,EAAKkH,eAAc,SAC7B,CACH,MAAMC,EAA0B,CAAE1N,OAAQuG,EAAKvG,OAAQH,QAAS0G,EAAK1G,UACjE,IAAAjJ,WAAU2P,EAAKoH,UACf,EAAA5O,KAAI,EAAS,WAAU3G,KAAKmO,EAAKoH,SAAUD,GAAS,KAEpD,EAAA3O,KAAI,EAAS,IAAI,WAAUwH,EAAKxF,KAAM2M,GAAS,I,CAIvD3O,KAAKkB,QAAsB,QAAZ,EAAAsG,EAAKtG,eAAO,QAAI,GAC/BlB,KAAK2G,2BAA6Ba,EAAKb,wBAC3C,CAEA,UAAI1F,GACA,OAAO,EAAAjB,KAAI,OAAOiB,MACtB,CAEA,WAAIH,GACA,OAAO,EAAAd,KAAI,OAAOc,OACtB,CAEA,QAAIkB,GACA,OAAO,EAAAhC,KAAI,OAAOgC,IACtB,CAEA,YAAIoK,GACA,OAAO,EAAApM,KAAI,OAAOoM,QACtB,CAEM,WAAAvF,G,yCACF,OAAO,EAAA7G,KAAI,OAAO6G,aACtB,G,CAEM,IAAAwF,G,yCACF,OAAO,EAAArM,KAAI,OAAOqM,MACtB,G,CAEM,QAAAC,G,yCACF,OAAO,EAAAtM,KAAI,OAAOsM,UACtB,G,CAEM,IAAAjT,G,yCACF,OAAO,EAAA2G,KAAI,OAAO3G,MACtB,G,CAEM,IAAAkT,G,yCACF,OAAO,EAAAvM,KAAI,OAAOuM,MACtB,G,CAEA,KAAAC,GACI,MAAMC,EAAUC,gBAAgB,EAAA1M,KAAI,QAEpC,OADAyM,EAAQiC,eAAiB,EAAA1O,KAAI,OAAOwM,QAC7B,IAAIlG,EAAamG,EAC5B,EAlEJ,iB,iKCXA,eAiBA,SAAgB1E,EAAgBjM,EAA6B+S,GACzD,GAAI/S,QACA,MAAM,IAAI,EAAArE,kBACN,mEACKoX,EAAwB,KAAKA,IAA0B,KAIpE,OAAO/S,CACX,CApBA,uBACIgT,EACA1W,GAGA,OAAO2P,EAD+D+G,EAAO1W,GAC1CA,EACvC,EAKA,iBAWA,6BAAmE0W,EAAeC,EAAoBjX,GAC9E,OAAhBgX,EAAOhX,SAAiCgI,IAAhBgP,EAAOhX,KAC/BiX,EAAYjX,GAAOgX,EAAOhX,GAElC,EAEA,qBAA6BmB,GACzB,OAAOA,OACX,C,u0BCnCA,eACA,UACA,UACA,UAEA,MAAa4R,UAA8B,EAAAnF,YAGvC,WAAA/K,CAAY6M,G,YACR3M,MAAM2M,GAHV,mBAII,EAAAxH,KAAI,EAASwH,QAAAA,EAAQ,CAAC,EAAC,KACN,QAAjB,OAAAxH,KAAI,QAAO+I,cAAM,UAANA,OAAW,IACM,QAA5B,OAAA/I,KAAI,QAAO4H,yBAAiB,UAAjBA,kBAAsB,IAAI,EAAAY,kBACzC,CAEA,qBAAIZ,GACA,OAAO,IAAA9K,aAAY,EAAAkD,KAAI,OAAQ,oBACnC,CAEA,qBAAI4H,CAAkBF,GAClB,MAAM,IAAI,EAAAC,cAAc,oBAC5B,CAEA,UAAIoB,GACA,OAAO,IAAAjM,aAAY,EAAAkD,KAAI,OAAQ,SACnC,CAEA,UAAI+I,CAAOjN,GACP,EAAAkE,KAAI,OAAO+I,OAASjN,CACxB,EAxBJ,0B,wBCTAC,EAAOC,QAAUC,QAAQ,M,oHCGzB,qBAA0B+S,GACtB,QAASA,GAAY,YAAYC,KAAKD,EAC1C,EAEA,yBAA8BA,GAC1B,MAAmC,iBAA5BA,aAAQ,EAARA,EAAUxT,cACrB,EAEA,0BAA+BwT,GAC3B,MAAmC,kBAA5BA,aAAQ,EAARA,EAAUxT,cACrB,C,GCZI0T,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBvP,IAAjBwP,EACH,OAAOA,EAAatT,QAGrB,IAAID,EAASmT,EAAyBG,GAAY,CAGjDrT,QAAS,CAAC,GAOX,OAHAuT,EAAoBF,GAAUG,KAAKzT,EAAOC,QAASD,EAAQA,EAAOC,QAASoT,GAGpErT,EAAOC,OACf,CCnB0BoT,CAAoB,M","sources":["webpack://@azure/functions/./src/setup.ts","webpack://@azure/functions/./src/ProgrammingModel.ts","webpack://@azure/functions/./src/converters/fromRpcTypedData.ts","webpack://@azure/functions/./src/errors.ts","webpack://@azure/functions/./src/output.ts","webpack://@azure/functions/./src/converters/toCamelCase.ts","webpack://@azure/functions/external commonjs2 \"http\"","webpack://@azure/functions/external commonjs2 \"net\"","webpack://@azure/functions/./src/converters/toRpcNullable.ts","webpack://@azure/functions/./src/converters/fromRpcContext.ts","webpack://@azure/functions/./src/app.ts","webpack://@azure/functions/./src/utils/Disposable.ts","webpack://@azure/functions/./src/http/httpProxy.ts","webpack://@azure/functions/./src/converters/toCoreFunctionMetadata.ts","webpack://@azure/functions/./src/trigger.ts","webpack://@azure/functions/./src/utils/tryGetCoreApiLazy.ts","webpack://@azure/functions/external commonjs2 \"undici\"","webpack://@azure/functions/./src/utils/getRandomHexString.ts","webpack://@azure/functions/./src/converters/toRpcTypedData.ts","webpack://@azure/functions/./src/hooks/AppTerminateContext.ts","webpack://@azure/functions/./src/converters/fromRpcTriggerMetadata.ts","webpack://@azure/functions/external commonjs2 \"events\"","webpack://@azure/functions/./src/input.ts","webpack://@azure/functions/./src/utils/workerSystemLog.ts","webpack://@azure/functions/./src/converters/toRpcHttp.ts","webpack://@azure/functions/external commonjs2 \"cookie\"","webpack://@azure/functions/./src/converters/fromRpcNullable.ts","webpack://@azure/functions/./src/utils/fallbackLogHandler.ts","webpack://@azure/functions/./src/hooks/LogHookContext.ts","webpack://@azure/functions/external commonjs2 \"crypto\"","webpack://@azure/functions/./src/converters/fromRpcBindings.ts","webpack://@azure/functions/./src/hooks/HookContext.ts","webpack://@azure/functions/./src/InvocationModel.ts","webpack://@azure/functions/./src/addBindingName.ts","webpack://@azure/functions/./src/hooks/registerHook.ts","webpack://@azure/functions/./src/constants.ts","webpack://@azure/functions/./src/hooks/PostInvocationContext.ts","webpack://@azure/functions/./src/hooks/AppStartContext.ts","webpack://@azure/functions/./src/converters/toRpcHttpCookie.ts","webpack://@azure/functions/./src/http/HttpRequest.ts","webpack://@azure/functions/./src/index.ts","webpack://@azure/functions/./src/InvocationContext.ts","webpack://@azure/functions/external commonjs2 \"util\"","webpack://@azure/functions/./src/converters/toRpcDuration.ts","webpack://@azure/functions/./src/http/extractHttpUserFromHeaders.ts","webpack://@azure/functions/./src/hooks/PreInvocationContext.ts","webpack://@azure/functions/external commonjs2 \"@azure/functions-core\"","webpack://@azure/functions/./src/http/HttpResponse.ts","webpack://@azure/functions/./src/utils/nonNull.ts","webpack://@azure/functions/./src/hooks/InvocationHookContext.ts","webpack://@azure/functions/external commonjs2 \"url\"","webpack://@azure/functions/./src/utils/isTrigger.ts","webpack://@azure/functions/webpack/bootstrap","webpack://@azure/functions/webpack/startup"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { SetupOptions } from '../types';\r\nimport { AzFuncSystemError } from './errors';\r\nimport { isDefined } from './utils/nonNull';\r\nimport { tryGetCoreApiLazy } from './utils/tryGetCoreApiLazy';\r\nimport { workerSystemLog } from './utils/workerSystemLog';\r\n\r\nlet setupLocked = false;\r\nexport function lockSetup(): void {\r\n    setupLocked = true;\r\n}\r\n\r\nexport let enableHttpStream = false;\r\nexport const capabilities: Record<string, string> = {};\r\n\r\nexport function setup(opts: SetupOptions): void {\r\n    if (setupLocked) {\r\n        throw new AzFuncSystemError(\"Setup options can't be changed after app startup has finished.\");\r\n    }\r\n\r\n    if (opts.enableHttpStream) {\r\n        // NOTE: coreApi.log was coincidentally added the same time as http streaming,\r\n        // so we can use that to validate the host version instead of messing with semver parsing\r\n        const coreApi = tryGetCoreApiLazy();\r\n        if (coreApi && !coreApi.log) {\r\n            throw new AzFuncSystemError(`HTTP streaming requires Azure Functions Host v4.28 or higher.`);\r\n        }\r\n    }\r\n\r\n    if (isDefined(opts.enableHttpStream)) {\r\n        enableHttpStream = opts.enableHttpStream;\r\n    }\r\n\r\n    if (opts.capabilities) {\r\n        for (let [key, val] of Object.entries(opts.capabilities)) {\r\n            if (isDefined(val)) {\r\n                val = String(val);\r\n                workerSystemLog('debug', `Capability ${key} set to ${val}.`);\r\n                capabilities[key] = val;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (enableHttpStream) {\r\n        workerSystemLog('debug', `HTTP streaming enabled.`);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport { CoreInvocationContext, WorkerCapabilities } from '@azure/functions-core';\r\nimport { version } from './constants';\r\nimport { setupHttpProxy } from './http/httpProxy';\r\nimport { InvocationModel } from './InvocationModel';\r\nimport { capabilities as libraryCapabilities, enableHttpStream, lockSetup } from './setup';\r\n\r\nexport class ProgrammingModel implements coreTypes.ProgrammingModel {\r\n    name = '@azure/functions';\r\n    version = version;\r\n\r\n    getInvocationModel(coreCtx: CoreInvocationContext): InvocationModel {\r\n        return new InvocationModel(coreCtx);\r\n    }\r\n\r\n    async getCapabilities(workerCapabilities: WorkerCapabilities): Promise<WorkerCapabilities> {\r\n        lockSetup();\r\n\r\n        if (enableHttpStream) {\r\n            const httpUri = await setupHttpProxy();\r\n            workerCapabilities.HttpUri = httpUri;\r\n        }\r\n\r\n        Object.assign(workerCapabilities, libraryCapabilities);\r\n\r\n        return workerCapabilities;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcTypedData } from '@azure/functions-core';\r\nimport { HttpRequest } from '../http/HttpRequest';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\nexport function fromRpcTypedData(data: RpcTypedData | null | undefined): unknown {\r\n    if (!data) {\r\n        return undefined;\r\n    } else if (isDefined(data.string)) {\r\n        return tryJsonParse(data.string);\r\n    } else if (isDefined(data.json)) {\r\n        return JSON.parse(data.json);\r\n    } else if (isDefined(data.bytes)) {\r\n        return Buffer.from(data.bytes);\r\n    } else if (isDefined(data.stream)) {\r\n        return Buffer.from(data.stream);\r\n    } else if (isDefined(data.http)) {\r\n        return new HttpRequest(data.http);\r\n    } else if (isDefined(data.int)) {\r\n        return data.int;\r\n    } else if (isDefined(data.double)) {\r\n        return data.double;\r\n    } else if (data.collectionBytes && isDefined(data.collectionBytes.bytes)) {\r\n        return data.collectionBytes.bytes.map((d) => Buffer.from(d));\r\n    } else if (data.collectionString && isDefined(data.collectionString.string)) {\r\n        return data.collectionString.string.map(tryJsonParse);\r\n    } else if (data.collectionDouble && isDefined(data.collectionDouble.double)) {\r\n        return data.collectionDouble.double;\r\n    } else if (data.collectionSint64 && isDefined(data.collectionSint64.sint64)) {\r\n        return data.collectionSint64.sint64;\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nfunction tryJsonParse(data: string): unknown {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch {\r\n        return data;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport interface AzFuncError {\r\n    /**\r\n     * System errors can be tracked in our telemetry\r\n     * User errors cannot be tracked in our telemetry because they could have user information (users can still track it themselves in their app insights resource)\r\n     */\r\n    isAzureFunctionsSystemError: boolean;\r\n}\r\n\r\nexport interface ValidatedError extends Error, Partial<AzFuncError> {\r\n    /**\r\n     * Use `trySetErrorMessage` to set the error message\r\n     */\r\n    readonly message: string;\r\n}\r\n\r\nexport class AzFuncSystemError extends Error {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class AzFuncTypeError extends TypeError implements AzFuncError {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class AzFuncRangeError extends RangeError implements AzFuncError {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class ReadOnlyError extends AzFuncTypeError {\r\n    constructor(propertyName: string) {\r\n        super(`Cannot assign to read only property '${propertyName}'`);\r\n    }\r\n}\r\n\r\nexport function ensureErrorType(err: unknown): ValidatedError {\r\n    if (err instanceof Error) {\r\n        return err;\r\n    } else {\r\n        let message: string;\r\n        if (err === undefined || err === null) {\r\n            message = 'Unknown error';\r\n        } else if (typeof err === 'string') {\r\n            message = err;\r\n        } else if (typeof err === 'object') {\r\n            message = JSON.stringify(err);\r\n        } else {\r\n            message = String(err);\r\n        }\r\n        return new Error(message);\r\n    }\r\n}\r\n\r\nexport function trySetErrorMessage(err: Error, message: string): void {\r\n    try {\r\n        err.message = message;\r\n    } catch {\r\n        // If we can't set the message, we'll keep the error as is\r\n    }\r\n}\r\n\r\n/**\r\n * This is mostly for callbacks where `null` or `undefined` indicates there is no error\r\n * By contrast, anything thrown/caught is assumed to be an error regardless of what it is\r\n */\r\nexport function isError(err: unknown): boolean {\r\n    return err !== null && err !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBOutput,\r\n    CosmosDBOutputOptions,\r\n    EventGridOutput,\r\n    EventGridOutputOptions,\r\n    EventHubOutput,\r\n    EventHubOutputOptions,\r\n    FunctionOutput,\r\n    GenericOutputOptions,\r\n    HttpOutput,\r\n    HttpOutputOptions,\r\n    MySqlOutput,\r\n    MySqlOutputOptions,\r\n    ServiceBusQueueOutput,\r\n    ServiceBusQueueOutputOptions,\r\n    ServiceBusTopicOutput,\r\n    ServiceBusTopicOutputOptions,\r\n    SqlOutput,\r\n    SqlOutputOptions,\r\n    StorageBlobOutput,\r\n    StorageBlobOutputOptions,\r\n    StorageQueueOutput,\r\n    StorageQueueOutputOptions,\r\n    TableOutput,\r\n    TableOutputOptions,\r\n    WebPubSubOutput,\r\n    WebPubSubOutputOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function http(options: HttpOutputOptions): HttpOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'http',\r\n    });\r\n}\r\n\r\nexport function storageBlob(options: StorageBlobOutputOptions): StorageBlobOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'blob',\r\n    });\r\n}\r\n\r\nexport function table(options: TableOutputOptions): TableOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'table',\r\n    });\r\n}\r\n\r\nexport function storageQueue(options: StorageQueueOutputOptions): StorageQueueOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'queue',\r\n    });\r\n}\r\n\r\nexport function serviceBusQueue(options: ServiceBusQueueOutputOptions): ServiceBusQueueOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'serviceBus',\r\n    });\r\n}\r\n\r\nexport function serviceBusTopic(options: ServiceBusTopicOutputOptions): ServiceBusTopicOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'serviceBus',\r\n    });\r\n}\r\n\r\nexport function eventHub(options: EventHubOutputOptions): EventHubOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'eventHub',\r\n    });\r\n}\r\n\r\nexport function eventGrid(options: EventGridOutputOptions): EventGridOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'eventGrid',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBOutputOptions): CosmosDBOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'cosmosDB',\r\n    });\r\n}\r\n\r\nexport function sql(options: SqlOutputOptions): SqlOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'sql',\r\n    });\r\n}\r\n\r\nexport function mySql(options: MySqlOutputOptions): MySqlOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'mysql',\r\n    });\r\n}\r\n\r\nexport function webPubSub(options: WebPubSubOutputOptions): WebPubSubOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'webPubSub',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericOutputOptions): FunctionOutput {\r\n    return addOutputBindingName(options);\r\n}\r\n\r\nfunction addOutputBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Output');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport function toCamelCaseValue(data: unknown): unknown {\r\n    if (typeof data !== 'object' || data === null) {\r\n        return data;\r\n    } else if (Array.isArray(data)) {\r\n        return data.map(toCamelCaseValue);\r\n    } else {\r\n        const result: Record<string, unknown> = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            result[toCamelCaseKey(key)] = toCamelCaseValue(value);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function toCamelCaseKey(key: string): string {\r\n    return key.charAt(0).toLowerCase() + key.slice(1);\r\n}\r\n","module.exports = require(\"http\");","module.exports = require(\"net\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcNullableBool, RpcNullableDouble, RpcNullableString, RpcNullableTimestamp } from '@azure/functions-core';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\n/**\r\n * Converts boolean input to an 'INullableBool' to be sent through the RPC layer.\r\n * Input that is not a boolean but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableBool if it is a valid boolean\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableBool(nullable: boolean | undefined, propertyName: string): undefined | RpcNullableBool {\r\n    if (typeof nullable === 'boolean') {\r\n        return <RpcNullableBool>{\r\n            value: nullable,\r\n        };\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'boolean' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts number or string that parses to a number to an 'INullableDouble' to be sent through the RPC layer.\r\n * Input that is not a valid number but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableDouble if it is a valid number\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableDouble(\r\n    nullable: number | string | undefined,\r\n    propertyName: string\r\n): undefined | RpcNullableDouble {\r\n    if (typeof nullable === 'number') {\r\n        return <RpcNullableDouble>{\r\n            value: nullable,\r\n        };\r\n    } else if (typeof nullable === 'string') {\r\n        if (!isNaN(Number(nullable))) {\r\n            const parsedNumber = parseFloat(nullable);\r\n            return <RpcNullableDouble>{\r\n                value: parsedNumber,\r\n            };\r\n        }\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'number' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts string input to an 'INullableString' to be sent through the RPC layer.\r\n * Input that is not a string but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableString if it is a valid string\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toRpcString(nullable: string | undefined, propertyName: string): string {\r\n    if (typeof nullable === 'string') {\r\n        return nullable;\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'string' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\n/**\r\n * Converts string input to an 'INullableString' to be sent through the RPC layer.\r\n * Input that is not a string but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableString if it is a valid string\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableString(nullable: string | undefined, propertyName: string): undefined | RpcNullableString {\r\n    if (typeof nullable === 'string') {\r\n        return <RpcNullableString>{\r\n            value: nullable,\r\n        };\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'string' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts Date or number input to an 'INullableTimestamp' to be sent through the RPC layer.\r\n * Input that is not a Date or number but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableTimestamp if it is valid input\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableTimestamp(\r\n    dateTime: Date | number | undefined,\r\n    propertyName: string\r\n): RpcNullableTimestamp | undefined {\r\n    if (isDefined(dateTime)) {\r\n        try {\r\n            const timeInMilliseconds = typeof dateTime === 'number' ? dateTime : dateTime.getTime();\r\n\r\n            if (timeInMilliseconds && timeInMilliseconds >= 0) {\r\n                return {\r\n                    value: {\r\n                        seconds: Math.round(timeInMilliseconds / 1000),\r\n                    },\r\n                };\r\n            }\r\n        } catch {\r\n            throw new AzFuncSystemError(\r\n                `A 'number' or 'Date' input was expected instead of a '${typeof dateTime}'. Cannot parse value of '${propertyName}'.`\r\n            );\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Exception, RetryContext, TraceContext } from '@azure/functions';\r\nimport { RpcException, RpcRetryContext, RpcTraceContext } from '@azure/functions-core';\r\nimport { copyPropIfDefined, nonNullProp } from '../utils/nonNull';\r\n\r\nexport function fromRpcRetryContext(retryContext: RpcRetryContext | null | undefined): RetryContext | undefined {\r\n    if (!retryContext) {\r\n        return undefined;\r\n    } else {\r\n        const result: RetryContext = {\r\n            retryCount: nonNullProp(retryContext, 'retryCount'),\r\n            maxRetryCount: nonNullProp(retryContext, 'maxRetryCount'),\r\n        };\r\n        if (retryContext.exception) {\r\n            result.exception = fromRpcException(retryContext.exception);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction fromRpcException(exception: RpcException): Exception {\r\n    const result: Exception = {};\r\n    copyPropIfDefined(exception, result, 'message');\r\n    copyPropIfDefined(exception, result, 'source');\r\n    copyPropIfDefined(exception, result, 'stackTrace');\r\n    return result;\r\n}\r\n\r\nexport function fromRpcTraceContext(traceContext: RpcTraceContext | null | undefined): TraceContext | undefined {\r\n    if (!traceContext) {\r\n        return undefined;\r\n    } else {\r\n        const result: TraceContext = {};\r\n        copyPropIfDefined(traceContext, result, 'traceParent');\r\n        copyPropIfDefined(traceContext, result, 'traceState');\r\n        if (traceContext.attributes) {\r\n            result.attributes = traceContext.attributes;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBFunctionOptions,\r\n    EventGridFunctionOptions,\r\n    EventHubFunctionOptions,\r\n    FunctionTrigger,\r\n    GenericFunctionOptions,\r\n    HttpFunctionOptions,\r\n    HttpHandler,\r\n    HttpMethod,\r\n    HttpMethodFunctionOptions,\r\n    MySqlFunctionOptions,\r\n    ServiceBusQueueFunctionOptions,\r\n    ServiceBusTopicFunctionOptions,\r\n    SqlFunctionOptions,\r\n    StorageBlobFunctionOptions,\r\n    StorageQueueFunctionOptions,\r\n    TimerFunctionOptions,\r\n    WarmupFunctionOptions,\r\n    WebPubSubFunctionOptions,\r\n} from '@azure/functions';\r\nimport { FunctionCallback } from '@azure/functions-core';\r\nimport { toCoreFunctionMetadata } from './converters/toCoreFunctionMetadata';\r\nimport * as output from './output';\r\nimport { ProgrammingModel } from './ProgrammingModel';\r\nimport * as trigger from './trigger';\r\nimport { tryGetCoreApiLazy } from './utils/tryGetCoreApiLazy';\r\n\r\nexport * as hook from './hooks/registerHook';\r\nexport { setup } from './setup';\r\n\r\nlet hasSetModel = false;\r\nfunction setProgrammingModel() {\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            'WARNING: Failed to detect the Azure Functions runtime. Switching \"@azure/functions\" package to test mode - not all features are supported.'\r\n        );\r\n    } else {\r\n        coreApi.setProgrammingModel(new ProgrammingModel());\r\n    }\r\n    hasSetModel = true;\r\n}\r\n\r\nfunction convertToHttpOptions(\r\n    optionsOrHandler: HttpFunctionOptions | HttpHandler,\r\n    method: HttpMethod\r\n): HttpFunctionOptions {\r\n    const options: HttpFunctionOptions =\r\n        typeof optionsOrHandler === 'function' ? { handler: optionsOrHandler } : optionsOrHandler;\r\n    options.methods = [method];\r\n    return options;\r\n}\r\n\r\nfunction convertToGenericOptions<T extends Omit<GenericFunctionOptions, 'trigger'> & Partial<GenericFunctionOptions>>(\r\n    options: T,\r\n    triggerMethod: (\r\n        o: Omit<T, 'handler' | 'return' | 'trigger' | 'extraInputs' | 'extraOutputs' | 'retry'>\r\n    ) => FunctionTrigger\r\n): GenericFunctionOptions {\r\n    const { handler, return: ret, trigger, extraInputs, extraOutputs, retry, ...triggerOptions } = options;\r\n    return {\r\n        trigger: trigger ?? triggerMethod(triggerOptions),\r\n        return: ret,\r\n        retry,\r\n        extraInputs,\r\n        extraOutputs,\r\n        handler,\r\n    };\r\n}\r\n\r\nexport function get(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'GET'));\r\n}\r\n\r\nexport function put(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'PUT'));\r\n}\r\n\r\nexport function post(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'POST'));\r\n}\r\n\r\nexport function patch(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'PATCH'));\r\n}\r\n\r\nexport function deleteRequest(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'DELETE'));\r\n}\r\n\r\nexport function http(name: string, options: HttpFunctionOptions): void {\r\n    options.return ||= output.http({});\r\n    generic(name, convertToGenericOptions(options, trigger.http));\r\n}\r\n\r\nexport function timer(name: string, options: TimerFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.timer));\r\n}\r\n\r\nexport function storageBlob(name: string, options: StorageBlobFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.storageBlob));\r\n}\r\n\r\nexport function storageQueue(name: string, options: StorageQueueFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.storageQueue));\r\n}\r\n\r\nexport function serviceBusQueue(name: string, options: ServiceBusQueueFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.serviceBusQueue));\r\n}\r\n\r\nexport function serviceBusTopic(name: string, options: ServiceBusTopicFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.serviceBusTopic));\r\n}\r\n\r\nexport function eventHub(name: string, options: EventHubFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.eventHub));\r\n}\r\n\r\nexport function eventGrid(name: string, options: EventGridFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.eventGrid));\r\n}\r\n\r\nexport function cosmosDB(name: string, options: CosmosDBFunctionOptions): void {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n    generic(name, convertToGenericOptions(options, <any>trigger.cosmosDB));\r\n}\r\n\r\nexport function warmup(name: string, options: WarmupFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.warmup));\r\n}\r\n\r\nexport function sql(name: string, options: SqlFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.sql));\r\n}\r\n\r\nexport function mySql(name: string, options: MySqlFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.mySql));\r\n}\r\n\r\nexport function webPubSub(name: string, options: WebPubSubFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.webPubSub));\r\n}\r\n\r\nexport function generic(name: string, options: GenericFunctionOptions): void {\r\n    if (!hasSetModel) {\r\n        setProgrammingModel();\r\n    }\r\n\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            `WARNING: Skipping call to register function \"${name}\" because the \"@azure/functions\" package is in test mode.`\r\n        );\r\n    } else {\r\n        coreApi.registerFunction(toCoreFunctionMetadata(name, options), <FunctionCallback>options.handler);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Based off of VS Code\r\n * https://github.com/microsoft/vscode/blob/7bed4ce3e9f5059b5fc638c348f064edabcce5d2/src/vs/workbench/api/common/extHostTypes.ts#L65\r\n */\r\nexport class Disposable {\r\n    static from(...inDisposables: { dispose(): any }[]): Disposable {\r\n        let disposables: ReadonlyArray<{ dispose(): any }> | undefined = inDisposables;\r\n        return new Disposable(function () {\r\n            if (disposables) {\r\n                for (const disposable of disposables) {\r\n                    if (disposable && typeof disposable.dispose === 'function') {\r\n                        disposable.dispose();\r\n                    }\r\n                }\r\n                disposables = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    #callOnDispose?: () => any;\r\n\r\n    constructor(callOnDispose: () => any) {\r\n        this.#callOnDispose = callOnDispose;\r\n    }\r\n\r\n    dispose(): any {\r\n        if (typeof this.#callOnDispose === 'function') {\r\n            this.#callOnDispose();\r\n            this.#callOnDispose = undefined;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { serialize as serializeCookie } from 'cookie';\r\nimport { EventEmitter } from 'events';\r\nimport * as http from 'http';\r\nimport * as net from 'net';\r\nimport { AzFuncSystemError, ensureErrorType } from '../errors';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { workerSystemLog } from '../utils/workerSystemLog';\r\nimport { HttpResponse } from './HttpResponse';\r\n\r\nconst requests: Record<string, http.IncomingMessage> = {};\r\nconst responses: Record<string, http.ServerResponse> = {};\r\nconst minPort = 55000;\r\nconst maxPort = 55025;\r\n\r\nconst invocRequestEmitter = new EventEmitter();\r\n\r\nexport async function waitForProxyRequest(invocationId: string): Promise<http.IncomingMessage> {\r\n    return new Promise((resolve, _reject) => {\r\n        const req = requests[invocationId];\r\n        if (req) {\r\n            resolve(req);\r\n            delete requests[invocationId];\r\n        } else {\r\n            invocRequestEmitter.once(invocationId, () => {\r\n                const req = requests[invocationId];\r\n                if (req) {\r\n                    resolve(req);\r\n                    delete requests[invocationId];\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nconst invocationIdHeader = 'x-ms-invocation-id';\r\nexport async function sendProxyResponse(invocationId: string, userRes: HttpResponse): Promise<void> {\r\n    const proxyRes = nonNullProp(responses, invocationId);\r\n    delete responses[invocationId];\r\n    for (const [key, val] of userRes.headers.entries()) {\r\n        proxyRes.setHeader(key, val);\r\n    }\r\n    proxyRes.setHeader(invocationIdHeader, invocationId);\r\n    proxyRes.statusCode = userRes.status;\r\n\r\n    if (userRes.cookies.length > 0) {\r\n        setCookies(userRes, proxyRes);\r\n    }\r\n\r\n    if (userRes.body) {\r\n        for await (const chunk of userRes.body.values()) {\r\n            proxyRes.write(chunk);\r\n        }\r\n    }\r\n    proxyRes.end();\r\n}\r\n\r\nfunction setCookies(userRes: HttpResponse, proxyRes: http.ServerResponse): void {\r\n    const serializedCookies: string[] = userRes.cookies.map((c) => {\r\n        let sameSite: true | false | 'lax' | 'strict' | 'none' | undefined;\r\n        switch (c.sameSite) {\r\n            case 'Lax':\r\n                sameSite = 'lax';\r\n                break;\r\n            case 'None':\r\n                sameSite = 'none';\r\n                break;\r\n            case 'Strict':\r\n                sameSite = 'strict';\r\n                break;\r\n            default:\r\n                sameSite = c.sameSite;\r\n        }\r\n        return serializeCookie(c.name, c.value, {\r\n            domain: c.domain,\r\n            path: c.path,\r\n            expires: typeof c.expires === 'number' ? new Date(c.expires) : c.expires,\r\n            secure: c.secure,\r\n            httpOnly: c.httpOnly,\r\n            sameSite: sameSite,\r\n            maxAge: c.maxAge,\r\n        });\r\n    });\r\n    proxyRes.setHeader('Set-Cookie', serializedCookies);\r\n}\r\n\r\nexport async function setupHttpProxy(): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n        const server = http.createServer();\r\n\r\n        server.on('request', (req, res) => {\r\n            const invocationId = req.headers[invocationIdHeader];\r\n            if (typeof invocationId === 'string') {\r\n                requests[invocationId] = req;\r\n                responses[invocationId] = res;\r\n                invocRequestEmitter.emit(invocationId);\r\n            } else {\r\n                workerSystemLog('error', `Http proxy request missing header ${invocationIdHeader}`);\r\n            }\r\n        });\r\n\r\n        server.on('error', (err) => {\r\n            err = ensureErrorType(err);\r\n            workerSystemLog('error', `Http proxy error: ${err.stack || err.message}`);\r\n        });\r\n\r\n        server.listen(() => {\r\n            const address = server.address();\r\n            // Valid address has been created\r\n            if (address !== null && typeof address === 'object') {\r\n                if (address.port === 0) {\r\n                    // Auto-assigned port is 0, find and bind to an open port\r\n                    workerSystemLog('debug', `Port 0 assigned. Finding open port.`);\r\n                    findOpenPort((openPort: number) => {\r\n                        // Close the server and re-listen on the found open port\r\n                        server.close();\r\n                        server.listen(openPort, () => {\r\n                            workerSystemLog('debug', `Server is now listening on found open port: ${openPort}`);\r\n                        });\r\n                        resolve(`http://localhost:${openPort}/`);\r\n                    });\r\n                } else {\r\n                    // Auto-assigned port is not 0\r\n                    workerSystemLog('debug', `Auto-assigned port is valid. Port: ${address.port}`);\r\n                    resolve(`http://localhost:${address.port}/`);\r\n                }\r\n            } else {\r\n                reject(new AzFuncSystemError('Unexpected server address during http proxy setup'));\r\n            }\r\n        });\r\n\r\n        server.on('close', () => {\r\n            workerSystemLog('information', 'Http proxy closing');\r\n        });\r\n    });\r\n}\r\n\r\n// Function to find an open port starting from a specified port\r\nfunction findOpenPort(callback: (port: number) => void): void {\r\n    const server = net.createServer();\r\n\r\n    function tryPort(port: number) {\r\n        if (port > maxPort) {\r\n            // If we've reached the maximum port, throw an error\r\n            throw new AzFuncSystemError(\r\n                `No available ports found between ${minPort} and ${maxPort}. To enable HTTP streaming, please open a port in this range.`\r\n            );\r\n        }\r\n\r\n        server.once('error', () => {\r\n            // If the port is unavailable, increment and try the next one\r\n            tryPort(port + 1);\r\n        });\r\n\r\n        // If the port is available, return it\r\n        server.once('listening', () => {\r\n            const address = server.address();\r\n            if (address !== null && typeof address === 'object') {\r\n                port = address.port;\r\n                server.close();\r\n                callback(port);\r\n            }\r\n        });\r\n\r\n        // Try binding to the given port\r\n        server.listen(port);\r\n    }\r\n\r\n    // Start trying from the specified starting port\r\n    tryPort(minPort);\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { ExponentialBackoffRetryOptions, FixedDelayRetryOptions, GenericFunctionOptions } from '@azure/functions';\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport { returnBindingKey } from '../constants';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isTrigger } from '../utils/isTrigger';\r\nimport { toRpcDuration } from './toRpcDuration';\r\n\r\nexport function toCoreFunctionMetadata(name: string, options: GenericFunctionOptions): coreTypes.FunctionMetadata {\r\n    const bindings: Record<string, coreTypes.RpcBindingInfo> = {};\r\n    const bindingNames: string[] = [];\r\n\r\n    const trigger = options.trigger;\r\n    bindings[trigger.name] = {\r\n        ...trigger,\r\n        direction: 'in',\r\n        type: isTrigger(trigger.type) ? trigger.type : trigger.type + 'Trigger',\r\n    };\r\n    bindingNames.push(trigger.name);\r\n\r\n    if (options.extraInputs) {\r\n        for (const input of options.extraInputs) {\r\n            bindings[input.name] = {\r\n                ...input,\r\n                direction: 'in',\r\n            };\r\n            bindingNames.push(input.name);\r\n        }\r\n    }\r\n\r\n    if (options.return) {\r\n        bindings[returnBindingKey] = {\r\n            ...options.return,\r\n            direction: 'out',\r\n        };\r\n        bindingNames.push(returnBindingKey);\r\n    }\r\n\r\n    if (options.extraOutputs) {\r\n        for (const output of options.extraOutputs) {\r\n            bindings[output.name] = {\r\n                ...output,\r\n                direction: 'out',\r\n            };\r\n            bindingNames.push(output.name);\r\n        }\r\n    }\r\n\r\n    const dupeBindings = bindingNames.filter((v, i) => bindingNames.indexOf(v) !== i);\r\n    if (dupeBindings.length > 0) {\r\n        throw new AzFuncSystemError(\r\n            `Duplicate bindings found for function \"${name}\". Remove a duplicate binding or manually specify the \"name\" property to make it unique.`\r\n        );\r\n    }\r\n\r\n    let retryOptions: coreTypes.RpcRetryOptions | undefined;\r\n    if (options.retry) {\r\n        retryOptions = {\r\n            ...options.retry,\r\n            retryStrategy: options.retry.strategy,\r\n            delayInterval: toRpcDuration((<FixedDelayRetryOptions>options.retry).delayInterval, 'retry.delayInterval'),\r\n            maximumInterval: toRpcDuration(\r\n                (<ExponentialBackoffRetryOptions>options.retry).maximumInterval,\r\n                'retry.maximumInterval'\r\n            ),\r\n            minimumInterval: toRpcDuration(\r\n                (<ExponentialBackoffRetryOptions>options.retry).minimumInterval,\r\n                'retry.minimumInterval'\r\n            ),\r\n        };\r\n    }\r\n\r\n    return { name, bindings, retryOptions };\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBTrigger,\r\n    CosmosDBTriggerOptions,\r\n    EventGridTrigger,\r\n    EventGridTriggerOptions,\r\n    EventHubTrigger,\r\n    EventHubTriggerOptions,\r\n    FunctionTrigger,\r\n    GenericTriggerOptions,\r\n    HttpTrigger,\r\n    HttpTriggerOptions,\r\n    MySqlTrigger,\r\n    MySqlTriggerOptions,\r\n    ServiceBusQueueTrigger,\r\n    ServiceBusQueueTriggerOptions,\r\n    ServiceBusTopicTrigger,\r\n    ServiceBusTopicTriggerOptions,\r\n    SqlTrigger,\r\n    SqlTriggerOptions,\r\n    StorageBlobTrigger,\r\n    StorageBlobTriggerOptions,\r\n    StorageQueueTrigger,\r\n    StorageQueueTriggerOptions,\r\n    TimerTrigger,\r\n    TimerTriggerOptions,\r\n    WarmupTrigger,\r\n    WarmupTriggerOptions,\r\n    WebPubSubTrigger,\r\n    WebPubSubTriggerOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function http(options: HttpTriggerOptions): HttpTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        authLevel: options.authLevel || 'anonymous',\r\n        methods: options.methods || ['GET', 'POST'],\r\n        type: 'httpTrigger',\r\n    });\r\n}\r\n\r\nexport function timer(options: TimerTriggerOptions): TimerTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'timerTrigger',\r\n    });\r\n}\r\n\r\nexport function storageBlob(options: StorageBlobTriggerOptions): StorageBlobTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'blobTrigger',\r\n    });\r\n}\r\n\r\nexport function storageQueue(options: StorageQueueTriggerOptions): StorageQueueTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'queueTrigger',\r\n    });\r\n}\r\n\r\nexport function serviceBusQueue(options: ServiceBusQueueTriggerOptions): ServiceBusQueueTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'serviceBusTrigger',\r\n    });\r\n}\r\n\r\nexport function serviceBusTopic(options: ServiceBusTopicTriggerOptions): ServiceBusTopicTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'serviceBusTrigger',\r\n    });\r\n}\r\n\r\nexport function eventHub(options: EventHubTriggerOptions): EventHubTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'eventHubTrigger',\r\n    });\r\n}\r\n\r\nexport function eventGrid(options: EventGridTriggerOptions): EventGridTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'eventGridTrigger',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBTriggerOptions): CosmosDBTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'cosmosDBTrigger',\r\n    });\r\n}\r\n\r\nexport function warmup(options: WarmupTriggerOptions): WarmupTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'warmupTrigger',\r\n    });\r\n}\r\n\r\nexport function sql(options: SqlTriggerOptions): SqlTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'sqlTrigger',\r\n    });\r\n}\r\n\r\nexport function mySql(options: MySqlTriggerOptions): MySqlTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'mysqlTrigger',\r\n    });\r\n}\r\n\r\nexport function webPubSub(options: WebPubSubTriggerOptions): WebPubSubTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'webPubSubTrigger',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericTriggerOptions): FunctionTrigger {\r\n    return addTriggerBindingName(options);\r\n}\r\n\r\nfunction addTriggerBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Trigger');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as coreTypes from '@azure/functions-core';\r\n\r\nlet coreApi: typeof coreTypes | undefined | null;\r\nexport function tryGetCoreApiLazy(): typeof coreTypes | null {\r\n    if (coreApi === undefined) {\r\n        try {\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            coreApi = <typeof coreTypes>require('@azure/functions-core');\r\n        } catch {\r\n            coreApi = null;\r\n        }\r\n    }\r\n    return coreApi;\r\n}\r\n","module.exports = require(\"undici\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as crypto from 'crypto';\r\n\r\nexport function getRandomHexString(length = 10): string {\r\n    const buffer: Buffer = crypto.randomBytes(Math.ceil(length / 2));\r\n    return buffer.toString('hex').slice(0, length);\r\n}\r\n\r\nexport function getStringHash(data: string, length = 10): string {\r\n    return crypto.createHash('sha256').update(data).digest('hex').slice(0, length);\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcTypedData } from '@azure/functions-core';\r\n\r\nexport function toRpcTypedData(data: unknown): RpcTypedData | null | undefined {\r\n    if (data === null || data === undefined) {\r\n        return data;\r\n    } else if (typeof data === 'string') {\r\n        return { string: data };\r\n    } else if (Buffer.isBuffer(data)) {\r\n        return { bytes: data };\r\n    } else if (ArrayBuffer.isView(data)) {\r\n        const bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n        return { bytes: bytes };\r\n    } else if (data instanceof ArrayBuffer) {\r\n        const bytes = new Uint8Array(data);\r\n        return { bytes: bytes };\r\n    } else if (typeof data === 'number') {\r\n        if (Number.isInteger(data)) {\r\n            return { int: data };\r\n        } else {\r\n            return { double: data };\r\n        }\r\n    } else {\r\n        return { json: JSON.stringify(data) };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class AppTerminateContext extends HookContext implements types.AppTerminateContext {}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { TriggerMetadata } from '@azure/functions';\r\nimport { RpcTypedData } from '@azure/functions-core';\r\nimport { isHttpTrigger, isTimerTrigger } from '../utils/isTrigger';\r\nimport { fromRpcTypedData } from './fromRpcTypedData';\r\nimport { toCamelCaseKey, toCamelCaseValue } from './toCamelCase';\r\n\r\nexport function fromRpcTriggerMetadata(\r\n    triggerMetadata: Record<string, RpcTypedData> | null | undefined,\r\n    triggerType: string\r\n): TriggerMetadata | undefined {\r\n    // For http and timer triggers, we will avoid using `triggerMetadata` for a few reasons:\r\n    // 1. It uses `toCamelCase` methods, which can lead to weird casing bugs\r\n    // 2. It's generally a large medley of properties that is difficult for us to document/type\r\n    // 3. We can represent that information on the request & timer objects instead\r\n    if (!triggerMetadata || isHttpTrigger(triggerType) || isTimerTrigger(triggerType)) {\r\n        return undefined;\r\n    } else {\r\n        const result: TriggerMetadata = {};\r\n        for (const [key, value] of Object.entries(triggerMetadata)) {\r\n            result[toCamelCaseKey(key)] = toCamelCaseValue(fromRpcTypedData(value));\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","module.exports = require(\"events\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBInput,\r\n    CosmosDBInputOptions,\r\n    FunctionInput,\r\n    GenericInputOptions,\r\n    MySqlInput,\r\n    MySqlInputOptions,\r\n    SqlInput,\r\n    SqlInputOptions,\r\n    StorageBlobInput,\r\n    StorageBlobInputOptions,\r\n    TableInput,\r\n    TableInputOptions,\r\n    WebPubSubConnectionInput,\r\n    WebPubSubConnectionInputOptions,\r\n    WebPubSubContextInput,\r\n    WebPubSubContextInputOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function storageBlob(options: StorageBlobInputOptions): StorageBlobInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'blob',\r\n    });\r\n}\r\n\r\nexport function table(options: TableInputOptions): TableInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'table',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBInputOptions): CosmosDBInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'cosmosDB',\r\n    });\r\n}\r\n\r\nexport function sql(options: SqlInputOptions): SqlInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'sql',\r\n    });\r\n}\r\n\r\nexport function mySql(options: MySqlInputOptions): MySqlInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'mysql',\r\n    });\r\n}\r\n\r\nexport function webPubSubConnection(options: WebPubSubConnectionInputOptions): WebPubSubConnectionInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'webPubSubConnection',\r\n    });\r\n}\r\n\r\nexport function webPubSubContext(options: WebPubSubContextInputOptions): WebPubSubContextInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'webPubSubContext',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericInputOptions): FunctionInput {\r\n    return addInputBindingName(options);\r\n}\r\n\r\nfunction addInputBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Input');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { format } from 'util';\r\nimport { fallbackLogHandler } from './fallbackLogHandler';\r\nimport { tryGetCoreApiLazy } from './tryGetCoreApiLazy';\r\n\r\nexport function workerSystemLog(level: types.LogLevel, ...args: unknown[]): void {\r\n    const coreApi = tryGetCoreApiLazy();\r\n    // NOTE: coreApi.log doesn't exist on older versions of the worker\r\n    if (coreApi && coreApi.log) {\r\n        coreApi.log(level, 'system', format(...args));\r\n    } else {\r\n        fallbackLogHandler(level, ...args);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcHttpData, RpcTypedData } from '@azure/functions-core';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { sendProxyResponse } from '../http/httpProxy';\r\nimport { HttpResponse } from '../http/HttpResponse';\r\nimport { enableHttpStream } from '../setup';\r\nimport { toRpcHttpCookie } from './toRpcHttpCookie';\r\nimport { toRpcTypedData } from './toRpcTypedData';\r\n\r\nexport async function toRpcHttp(invocationId: string, data: unknown): Promise<RpcTypedData | null | undefined> {\r\n    if (data === null || data === undefined) {\r\n        return data;\r\n    } else if (typeof data !== 'object') {\r\n        throw new AzFuncSystemError(\r\n            'The HTTP response must be an object with optional properties \"body\", \"status\", \"headers\", and \"cookies\".'\r\n        );\r\n    }\r\n\r\n    const response = data instanceof HttpResponse ? data : new HttpResponse(data);\r\n    if (enableHttpStream) {\r\n        // send http data over http proxy instead of rpc\r\n        await sendProxyResponse(invocationId, response);\r\n        return;\r\n    }\r\n\r\n    const rpcResponse: RpcHttpData = {};\r\n    rpcResponse.statusCode = response.status.toString();\r\n\r\n    rpcResponse.headers = {};\r\n    for (const [key, value] of response.headers.entries()) {\r\n        rpcResponse.headers[key] = value;\r\n    }\r\n\r\n    rpcResponse.cookies = [];\r\n    for (const cookie of response.cookies) {\r\n        rpcResponse.cookies.push(toRpcHttpCookie(cookie));\r\n    }\r\n\r\n    rpcResponse.enableContentNegotiation = response.enableContentNegotiation;\r\n\r\n    const bodyBytes = await response.arrayBuffer();\r\n    rpcResponse.body = toRpcTypedData(bodyBytes);\r\n\r\n    return { http: rpcResponse };\r\n}\r\n","module.exports = require(\"cookie\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcNullableString } from '@azure/functions-core';\r\n\r\nexport function fromNullableMapping(\r\n    nullableMapping: Record<string, RpcNullableString> | null | undefined,\r\n    originalMapping?: Record<string, string> | null\r\n): Record<string, string> {\r\n    let converted: Record<string, string> = {};\r\n    if (nullableMapping && Object.keys(nullableMapping).length > 0) {\r\n        for (const key in nullableMapping) {\r\n            converted[key] = nullableMapping[key]?.value || '';\r\n        }\r\n    } else if (originalMapping && Object.keys(originalMapping).length > 0) {\r\n        converted = originalMapping;\r\n    }\r\n    return converted;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\n\r\nexport function fallbackLogHandler(level: types.LogLevel, ...args: unknown[]): void {\r\n    switch (level) {\r\n        case 'trace':\r\n            console.trace(...args);\r\n            break;\r\n        case 'debug':\r\n            console.debug(...args);\r\n            break;\r\n        case 'information':\r\n            console.info(...args);\r\n            break;\r\n        case 'warning':\r\n            console.warn(...args);\r\n            break;\r\n        case 'critical':\r\n        case 'error':\r\n            console.error(...args);\r\n            break;\r\n        default:\r\n            console.log(...args);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { ReadOnlyError } from '../errors';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class LogHookContext extends HookContext implements types.LogHookContext {\r\n    #init: types.LogHookContextInit;\r\n\r\n    constructor(init?: types.LogHookContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n        this.#init.level ??= 'information';\r\n        this.#init.message ??= 'unknown';\r\n        this.#init.category ??= 'user';\r\n    }\r\n\r\n    get level(): types.LogLevel {\r\n        return nonNullProp(this.#init, 'level');\r\n    }\r\n\r\n    set level(value: types.LogLevel) {\r\n        this.#init.level = value;\r\n    }\r\n\r\n    get message(): string {\r\n        return nonNullProp(this.#init, 'message');\r\n    }\r\n\r\n    set message(value: string) {\r\n        this.#init.message = value;\r\n    }\r\n\r\n    get category(): types.LogCategory {\r\n        return nonNullProp(this.#init, 'category');\r\n    }\r\n\r\n    set category(_value: types.LogCategory) {\r\n        throw new ReadOnlyError('category');\r\n    }\r\n\r\n    get invocationContext(): types.InvocationContext | undefined {\r\n        return this.#init.invocationContext;\r\n    }\r\n\r\n    set invocationContext(_value: types.InvocationContext | undefined) {\r\n        throw new ReadOnlyError('invocationContext');\r\n    }\r\n}\r\n","module.exports = require(\"crypto\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { EffectiveFunctionOptions, FunctionInput, FunctionOutput, FunctionTrigger } from '@azure/functions';\r\nimport { RpcBindingInfo } from '@azure/functions-core';\r\nimport { returnBindingKey } from '../constants';\r\nimport { isTrigger } from '../utils/isTrigger';\r\nimport { nonNullProp, nonNullValue } from '../utils/nonNull';\r\n\r\nexport function fromRpcBindings(bindings: Record<string, RpcBindingInfo> | null | undefined): EffectiveFunctionOptions {\r\n    let trigger: FunctionTrigger | undefined;\r\n    let returnBinding: FunctionOutput | undefined;\r\n    const extraInputs: FunctionInput[] = [];\r\n    const extraOutputs: FunctionOutput[] = [];\r\n    for (const [name, binding] of Object.entries(nonNullValue(bindings, 'bindings'))) {\r\n        if (isTrigger(binding.type)) {\r\n            trigger = fromRpcBinding(name, binding);\r\n        } else if (name === returnBindingKey) {\r\n            returnBinding = fromRpcBinding(name, binding);\r\n        } else if (binding.direction === 'in') {\r\n            extraInputs.push(fromRpcBinding(name, binding));\r\n        } else if (binding.direction === 'out') {\r\n            extraOutputs.push(fromRpcBinding(name, binding));\r\n        }\r\n    }\r\n    return {\r\n        trigger: nonNullValue(trigger, 'trigger'),\r\n        return: returnBinding,\r\n        extraInputs,\r\n        extraOutputs,\r\n    };\r\n}\r\n\r\nfunction fromRpcBinding(name: string, binding: RpcBindingInfo): FunctionTrigger | FunctionInput | FunctionOutput {\r\n    return {\r\n        ...binding,\r\n        type: nonNullProp(binding, 'type'),\r\n        name,\r\n    };\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { ReadOnlyError } from '../errors';\r\nimport { nonNullProp } from '../utils/nonNull';\r\n\r\nexport class HookContext implements types.HookContext {\r\n    #init: types.HookContextInit;\r\n\r\n    constructor(init?: types.HookContextInit) {\r\n        this.#init = init ?? {};\r\n        this.#init.hookData ??= {};\r\n    }\r\n\r\n    get hookData(): Record<string, unknown> {\r\n        return nonNullProp(this.#init, 'hookData');\r\n    }\r\n\r\n    set hookData(_value: unknown) {\r\n        throw new ReadOnlyError('hookData');\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport {\r\n    CoreInvocationContext,\r\n    InvocationArguments,\r\n    RpcBindingInfo,\r\n    RpcInvocationResponse,\r\n    RpcLogCategory,\r\n    RpcLogLevel,\r\n    RpcTypedData,\r\n} from '@azure/functions-core';\r\nimport { format } from 'util';\r\nimport { returnBindingKey } from './constants';\r\nimport { fromRpcBindings } from './converters/fromRpcBindings';\r\nimport { fromRpcRetryContext, fromRpcTraceContext } from './converters/fromRpcContext';\r\nimport { fromRpcTriggerMetadata } from './converters/fromRpcTriggerMetadata';\r\nimport { fromRpcTypedData } from './converters/fromRpcTypedData';\r\nimport { toCamelCaseValue } from './converters/toCamelCase';\r\nimport { toRpcHttp } from './converters/toRpcHttp';\r\nimport { toRpcTypedData } from './converters/toRpcTypedData';\r\nimport { AzFuncSystemError } from './errors';\r\nimport { waitForProxyRequest } from './http/httpProxy';\r\nimport { createStreamRequest } from './http/HttpRequest';\r\nimport { InvocationContext } from './InvocationContext';\r\nimport { enableHttpStream } from './setup';\r\nimport { isHttpTrigger, isTimerTrigger, isTrigger } from './utils/isTrigger';\r\nimport { isDefined, nonNullProp, nonNullValue } from './utils/nonNull';\r\n\r\nexport class InvocationModel implements coreTypes.InvocationModel {\r\n    #isDone = false;\r\n    #coreCtx: CoreInvocationContext;\r\n    #functionName: string;\r\n    #bindings: Record<string, RpcBindingInfo>;\r\n    #triggerType: string;\r\n\r\n    constructor(coreCtx: CoreInvocationContext) {\r\n        this.#coreCtx = coreCtx;\r\n        this.#functionName = nonNullProp(coreCtx.metadata, 'name');\r\n        this.#bindings = nonNullProp(coreCtx.metadata, 'bindings');\r\n        const triggerBinding = nonNullValue(\r\n            Object.values(this.#bindings).find((b) => isTrigger(b.type)),\r\n            'triggerBinding'\r\n        );\r\n        this.#triggerType = nonNullProp(triggerBinding, 'type');\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    async getArguments(): Promise<InvocationArguments> {\r\n        const req = this.#coreCtx.request;\r\n\r\n        const context = new InvocationContext({\r\n            invocationId: nonNullProp(this.#coreCtx, 'invocationId'),\r\n            functionName: this.#functionName,\r\n            logHandler: (level: RpcLogLevel, ...args: unknown[]) => this.#userLog(level, ...args),\r\n            retryContext: fromRpcRetryContext(req.retryContext),\r\n            traceContext: fromRpcTraceContext(req.traceContext),\r\n            triggerMetadata: fromRpcTriggerMetadata(req.triggerMetadata, this.#triggerType),\r\n            options: fromRpcBindings(this.#bindings),\r\n        });\r\n\r\n        const inputs: unknown[] = [];\r\n        if (req.inputData) {\r\n            for (const binding of req.inputData) {\r\n                const bindingName = nonNullProp(binding, 'name');\r\n\r\n                const rpcBinding = this.#bindings[bindingName];\r\n                if (!rpcBinding) {\r\n                    throw new AzFuncSystemError(\r\n                        `Failed to find binding \"${bindingName}\" in bindings \"${Object.keys(this.#bindings).join(\r\n                            ', '\r\n                        )}\".`\r\n                    );\r\n                }\r\n                const bindingType = rpcBinding.type;\r\n\r\n                let input: unknown;\r\n                if (isHttpTrigger(bindingType) && enableHttpStream) {\r\n                    const proxyRequest = await waitForProxyRequest(this.#coreCtx.invocationId);\r\n                    input = createStreamRequest(proxyRequest, nonNullProp(req, 'triggerMetadata'));\r\n                } else {\r\n                    input = fromRpcTypedData(binding.data);\r\n                }\r\n\r\n                if (isTimerTrigger(bindingType)) {\r\n                    input = toCamelCaseValue(input);\r\n                }\r\n\r\n                if (isTrigger(bindingType)) {\r\n                    inputs.push(input);\r\n                } else {\r\n                    context.extraInputs.set(bindingName, input);\r\n                }\r\n            }\r\n        }\r\n\r\n        return { context, inputs };\r\n    }\r\n\r\n    async invokeFunction(\r\n        context: InvocationContext,\r\n        inputs: unknown[],\r\n        handler: coreTypes.FunctionCallback\r\n    ): Promise<unknown> {\r\n        try {\r\n            return await Promise.resolve(handler(...inputs, context));\r\n        } finally {\r\n            this.#isDone = true;\r\n        }\r\n    }\r\n\r\n    async getResponse(context: InvocationContext, result: unknown): Promise<RpcInvocationResponse> {\r\n        const response: RpcInvocationResponse = { invocationId: this.#coreCtx.invocationId };\r\n\r\n        response.outputData = [];\r\n        let usedReturnValue = false;\r\n        for (const [name, binding] of Object.entries(this.#bindings)) {\r\n            if (binding.direction === 'out') {\r\n                if (name === returnBindingKey) {\r\n                    response.returnValue = await this.#convertOutput(context.invocationId, binding, result);\r\n                    usedReturnValue = true;\r\n                } else {\r\n                    const outputValue = await this.#convertOutput(\r\n                        context.invocationId,\r\n                        binding,\r\n                        context.extraOutputs.get(name)\r\n                    );\r\n                    if (isDefined(outputValue)) {\r\n                        response.outputData.push({ name, data: outputValue });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // This allows the return value of non-HTTP triggered functions to be passed back\r\n        // to the host, even if no explicit output binding is set. In most cases, this is ignored,\r\n        // but e.g., Durable uses this to pass orchestrator state back to the Durable extension, w/o\r\n        // an explicit output binding. See here for more details: https://github.com/Azure/azure-functions-nodejs-library/pull/25\r\n        if (!usedReturnValue && !isHttpTrigger(this.#triggerType)) {\r\n            response.returnValue = toRpcTypedData(result);\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    async #convertOutput(\r\n        invocationId: string,\r\n        binding: RpcBindingInfo,\r\n        value: unknown\r\n    ): Promise<RpcTypedData | null | undefined> {\r\n        if (binding.type?.toLowerCase() === 'http') {\r\n            return toRpcHttp(invocationId, value);\r\n        } else {\r\n            return toRpcTypedData(value);\r\n        }\r\n    }\r\n\r\n    #log(level: RpcLogLevel, logCategory: RpcLogCategory, ...args: unknown[]): void {\r\n        this.#coreCtx.log(level, logCategory, format(...args));\r\n    }\r\n\r\n    #systemLog(level: RpcLogLevel, ...args: unknown[]) {\r\n        this.#log(level, 'system', ...args);\r\n    }\r\n\r\n    #userLog(level: RpcLogLevel, ...args: unknown[]): void {\r\n        if (this.#isDone && this.#coreCtx.state !== 'postInvocationHooks') {\r\n            let badAsyncMsg =\r\n                \"Warning: Unexpected call to 'log' on the context object after function execution has completed. Please check for asynchronous calls that are not awaited. \";\r\n            badAsyncMsg += `Function name: ${this.#functionName}. Invocation Id: ${this.#coreCtx.invocationId}.`;\r\n            this.#systemLog('warning', badAsyncMsg);\r\n        }\r\n        this.#log(level, 'user', ...args);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { getStringHash } from './utils/getRandomHexString';\r\n\r\n/**\r\n * If the host spawns multiple workers, it expects the metadata (including binding name) to be the same across workers.\r\n * That means we need to generate binding names in a deterministic fashion, so we'll do that using a string hash of the binding data\r\n * A few considerations:\r\n * 1. We will include the binding type in the name to make it more readable\r\n * 2. Users can manually specify the name themselves and we will respect that\r\n * 3. The only time the hash should cause a conflict is if a single function has duplicate bindings. Not sure why someone would do that, but we will throw an error at function registration time\r\n * More info here: https://github.com/Azure/azure-functions-nodejs-worker/issues/638\r\n */\r\nexport function addBindingName<T extends { type: string; name?: string }>(\r\n    binding: T,\r\n    suffix: string\r\n): T & { name: string } {\r\n    if (!binding.name) {\r\n        let bindingType = binding.type;\r\n        if (!bindingType.toLowerCase().endsWith(suffix.toLowerCase())) {\r\n            bindingType += suffix;\r\n        }\r\n        binding.name = bindingType + getStringHash(JSON.stringify(binding));\r\n    }\r\n    return <T & { name: string }>binding;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    AppStartHandler,\r\n    AppTerminateHandler,\r\n    LogHookHandler,\r\n    PostInvocationHandler,\r\n    PreInvocationHandler,\r\n} from '@azure/functions';\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport { AzFuncSystemError, ensureErrorType } from '../errors';\r\nimport { Disposable } from '../utils/Disposable';\r\nimport { tryGetCoreApiLazy } from '../utils/tryGetCoreApiLazy';\r\nimport { AppStartContext } from './AppStartContext';\r\nimport { AppTerminateContext } from './AppTerminateContext';\r\nimport { LogHookContext } from './LogHookContext';\r\nimport { PostInvocationContext } from './PostInvocationContext';\r\nimport { PreInvocationContext } from './PreInvocationContext';\r\n\r\nfunction registerHook(hookName: string, callback: coreTypes.HookCallback): coreTypes.Disposable {\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            `WARNING: Skipping call to register ${hookName} hook because the \"@azure/functions\" package is in test mode.`\r\n        );\r\n        return new Disposable(() => {\r\n            console.warn(\r\n                `WARNING: Skipping call to dispose ${hookName} hook because the \"@azure/functions\" package is in test mode.`\r\n            );\r\n        });\r\n    } else {\r\n        return coreApi.registerHook(hookName, callback);\r\n    }\r\n}\r\n\r\nexport function appStart(handler: AppStartHandler): Disposable {\r\n    return registerHook('appStart', (coreContext) => {\r\n        return handler(new AppStartContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function appTerminate(handler: AppTerminateHandler): Disposable {\r\n    return registerHook('appTerminate', (coreContext) => {\r\n        return handler(new AppTerminateContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function preInvocation(handler: PreInvocationHandler): Disposable {\r\n    return registerHook('preInvocation', (coreContext) => {\r\n        return handler(new PreInvocationContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function postInvocation(handler: PostInvocationHandler): Disposable {\r\n    return registerHook('postInvocation', (coreContext) => {\r\n        return handler(new PostInvocationContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function log(handler: LogHookHandler): Disposable {\r\n    try {\r\n        return registerHook('log', (coreContext) => {\r\n            return handler(new LogHookContext(coreContext));\r\n        });\r\n    } catch (err) {\r\n        const error = ensureErrorType(err);\r\n        if (error.name === 'RangeError' && error.isAzureFunctionsSystemError) {\r\n            throw new AzFuncSystemError(`Log hooks require Azure Functions Host v4.34 or higher.`);\r\n        } else {\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport const version = '4.7.2';\r\n\r\nexport const returnBindingKey = '$return';\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { InvocationHookContext } from './InvocationHookContext';\r\n\r\nexport class PostInvocationContext extends InvocationHookContext implements types.PostInvocationContext {\r\n    #init: types.PostInvocationContextInit;\r\n\r\n    constructor(init?: types.PostInvocationContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n    }\r\n\r\n    get result(): unknown {\r\n        return this.#init.result;\r\n    }\r\n\r\n    set result(value: unknown) {\r\n        this.#init.result = value;\r\n    }\r\n\r\n    get error(): unknown {\r\n        return this.#init.error;\r\n    }\r\n\r\n    set error(value: unknown) {\r\n        this.#init.error = value;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class AppStartContext extends HookContext implements types.AppStartContext {}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Cookie } from '@azure/functions';\r\nimport { RpcHttpCookie, RpcHttpCookieSameSite } from '@azure/functions-core';\r\nimport { toNullableBool, toNullableDouble, toNullableString, toNullableTimestamp, toRpcString } from './toRpcNullable';\r\n\r\n/**\r\n * From RFC specifications for 'Set-Cookie' response header: https://www.rfc-editor.org/rfc/rfc6265.txt\r\n * @param inputCookie\r\n */\r\nexport function toRpcHttpCookie(inputCookie: Cookie): RpcHttpCookie {\r\n    // Resolve RpcHttpCookie.SameSite enum, a one-off\r\n    let rpcSameSite: RpcHttpCookieSameSite = 'none';\r\n    if (inputCookie && inputCookie.sameSite) {\r\n        const sameSite = inputCookie.sameSite.toLocaleLowerCase();\r\n        if (sameSite === 'lax') {\r\n            rpcSameSite = 'lax';\r\n        } else if (sameSite === 'strict') {\r\n            rpcSameSite = 'strict';\r\n        } else if (sameSite === 'none') {\r\n            rpcSameSite = 'explicitNone';\r\n        }\r\n    }\r\n\r\n    const rpcCookie: RpcHttpCookie = {\r\n        name: inputCookie && toRpcString(inputCookie.name, 'cookie.name'),\r\n        value: inputCookie && toRpcString(inputCookie.value, 'cookie.value'),\r\n        domain: toNullableString(inputCookie && inputCookie.domain, 'cookie.domain'),\r\n        path: toNullableString(inputCookie && inputCookie.path, 'cookie.path'),\r\n        expires: toNullableTimestamp(inputCookie && inputCookie.expires, 'cookie.expires'),\r\n        secure: toNullableBool(inputCookie && inputCookie.secure, 'cookie.secure'),\r\n        httpOnly: toNullableBool(inputCookie && inputCookie.httpOnly, 'cookie.httpOnly'),\r\n        sameSite: rpcSameSite,\r\n        maxAge: toNullableDouble(inputCookie && inputCookie.maxAge, 'cookie.maxAge'),\r\n    };\r\n\r\n    return rpcCookie;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HttpRequestParams, HttpRequestUser } from '@azure/functions';\r\nimport { RpcHttpData, RpcTypedData } from '@azure/functions-core';\r\nimport { Blob } from 'buffer';\r\nimport { IncomingMessage } from 'http';\r\nimport * as stream from 'stream';\r\nimport { ReadableStream } from 'stream/web';\r\nimport { FormData, Headers, HeadersInit, Request as uRequest } from 'undici';\r\nimport { URLSearchParams } from 'url';\r\nimport { fromNullableMapping } from '../converters/fromRpcNullable';\r\nimport { fromRpcTypedData } from '../converters/fromRpcTypedData';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isDefined, nonNullProp } from '../utils/nonNull';\r\nimport { extractHttpUserFromHeaders } from './extractHttpUserFromHeaders';\r\n\r\ninterface InternalHttpRequestInit extends RpcHttpData {\r\n    undiciRequest?: uRequest;\r\n}\r\n\r\nexport class HttpRequest implements types.HttpRequest {\r\n    readonly query: URLSearchParams;\r\n    readonly params: HttpRequestParams;\r\n\r\n    #cachedUser?: HttpRequestUser | null;\r\n    #uReq: uRequest;\r\n    #init: InternalHttpRequestInit;\r\n\r\n    constructor(init: InternalHttpRequestInit) {\r\n        this.#init = init;\r\n\r\n        let uReq = init.undiciRequest;\r\n        if (!uReq) {\r\n            const url = nonNullProp(init, 'url');\r\n\r\n            let body: Buffer | string | undefined;\r\n            if (init.body?.bytes) {\r\n                body = Buffer.from(init.body?.bytes);\r\n            } else if (init.body?.string) {\r\n                body = init.body.string;\r\n            }\r\n\r\n            uReq = new uRequest(url, {\r\n                body,\r\n                method: nonNullProp(init, 'method'),\r\n                headers: fromNullableMapping(init.nullableHeaders, init.headers),\r\n            });\r\n        }\r\n        this.#uReq = uReq;\r\n\r\n        if (init.nullableQuery || init.query) {\r\n            this.query = new URLSearchParams(fromNullableMapping(init.nullableQuery, init.query));\r\n        } else {\r\n            this.query = new URL(this.#uReq.url).searchParams;\r\n        }\r\n\r\n        this.params = fromNullableMapping(init.nullableParams, init.params);\r\n    }\r\n\r\n    get url(): string {\r\n        return this.#uReq.url;\r\n    }\r\n\r\n    get method(): string {\r\n        return this.#uReq.method;\r\n    }\r\n\r\n    get headers(): Headers {\r\n        return this.#uReq.headers;\r\n    }\r\n\r\n    get user(): HttpRequestUser | null {\r\n        if (this.#cachedUser === undefined) {\r\n            this.#cachedUser = extractHttpUserFromHeaders(this.headers);\r\n        }\r\n\r\n        return this.#cachedUser;\r\n    }\r\n\r\n    get body(): ReadableStream<any> | null {\r\n        return this.#uReq.body;\r\n    }\r\n\r\n    get bodyUsed(): boolean {\r\n        return this.#uReq.bodyUsed;\r\n    }\r\n\r\n    async arrayBuffer(): Promise<ArrayBuffer> {\r\n        return this.#uReq.arrayBuffer();\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return this.#uReq.blob();\r\n    }\r\n\r\n    async formData(): Promise<FormData> {\r\n        return this.#uReq.formData();\r\n    }\r\n\r\n    async json(): Promise<unknown> {\r\n        return this.#uReq.json();\r\n    }\r\n\r\n    async text(): Promise<string> {\r\n        return this.#uReq.text();\r\n    }\r\n\r\n    clone(): HttpRequest {\r\n        const newInit = structuredClone(this.#init);\r\n        newInit.undiciRequest = this.#uReq.clone();\r\n        return new HttpRequest(newInit);\r\n    }\r\n}\r\n\r\nexport function createStreamRequest(\r\n    proxyReq: IncomingMessage,\r\n    triggerMetadata: Record<string, RpcTypedData>\r\n): HttpRequest {\r\n    const hostHeaderName = 'x-forwarded-host';\r\n    const protoHeaderName = 'x-forwarded-proto';\r\n    const host = proxyReq.headers[hostHeaderName];\r\n    const proto = proxyReq.headers[protoHeaderName];\r\n    if (typeof host !== 'string' || typeof proto !== 'string') {\r\n        throw new AzFuncSystemError(`Expected headers \"${hostHeaderName}\" and \"${protoHeaderName}\" to be set.`);\r\n    }\r\n    const url = `${proto}://${host}${nonNullProp(proxyReq, 'url')}`;\r\n\r\n    let body: stream.Readable | undefined;\r\n    const lowerMethod = proxyReq.method?.toLowerCase();\r\n    if (lowerMethod !== 'get' && lowerMethod !== 'head') {\r\n        body = proxyReq;\r\n    }\r\n\r\n    // Get headers and params from trigger metadata\r\n    // See here for more info: https://github.com/Azure/azure-functions-host/issues/9840\r\n    // NOTE: We ignore query info because it has this bug: https://github.com/Azure/azure-functions-nodejs-library/issues/168\r\n    const { Query: rpcQueryIgnored, Headers: rpcHeaders, ...rpcParams } = triggerMetadata;\r\n\r\n    let headers: HeadersInit | undefined;\r\n    const headersData = fromRpcTypedData(rpcHeaders);\r\n    if (typeof headersData === 'object' && isDefined(headersData)) {\r\n        headers = <HeadersInit>headersData;\r\n    }\r\n\r\n    const uReq = new uRequest(url, {\r\n        body,\r\n        duplex: 'half',\r\n        method: nonNullProp(proxyReq, 'method'),\r\n        headers,\r\n    });\r\n\r\n    const params: Record<string, string> = {};\r\n    for (const [key, rpcValue] of Object.entries(rpcParams)) {\r\n        if (isDefined(rpcValue.string)) {\r\n            params[key] = rpcValue.string;\r\n        }\r\n    }\r\n\r\n    return new HttpRequest({\r\n        undiciRequest: uReq,\r\n        params,\r\n    });\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport * as app from './app';\r\nexport { AppStartContext } from './hooks/AppStartContext';\r\nexport { AppTerminateContext } from './hooks/AppTerminateContext';\r\nexport { HookContext } from './hooks/HookContext';\r\nexport { InvocationHookContext } from './hooks/InvocationHookContext';\r\nexport { LogHookContext } from './hooks/LogHookContext';\r\nexport { PostInvocationContext } from './hooks/PostInvocationContext';\r\nexport { PreInvocationContext } from './hooks/PreInvocationContext';\r\nexport { HttpRequest } from './http/HttpRequest';\r\nexport { HttpResponse } from './http/HttpResponse';\r\nexport * as input from './input';\r\nexport { InvocationContext } from './InvocationContext';\r\nexport * as output from './output';\r\nexport * as trigger from './trigger';\r\nexport { Disposable } from './utils/Disposable';\r\n\r\nexport enum SqlChangeOperation {\r\n    Insert = 0,\r\n    Update = 1,\r\n    Delete = 2,\r\n}\r\n\r\nexport enum MySqlChangeOperation {\r\n    Update = 0,\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport {\r\n    EffectiveFunctionOptions,\r\n    InvocationContextInit,\r\n    LogHandler,\r\n    RetryContext,\r\n    TraceContext,\r\n    TriggerMetadata,\r\n} from '@azure/functions';\r\nimport { fallbackLogHandler } from './utils/fallbackLogHandler';\r\n\r\nexport class InvocationContext implements types.InvocationContext {\r\n    invocationId: string;\r\n    functionName: string;\r\n    extraInputs: InvocationContextExtraInputs;\r\n    extraOutputs: InvocationContextExtraOutputs;\r\n    retryContext?: RetryContext;\r\n    traceContext?: TraceContext;\r\n    triggerMetadata?: TriggerMetadata;\r\n    options: EffectiveFunctionOptions;\r\n    #userLogHandler: LogHandler;\r\n\r\n    constructor(init?: InvocationContextInit) {\r\n        init = init || {};\r\n        const fallbackString = 'unknown';\r\n        this.invocationId = init.invocationId || fallbackString;\r\n        this.functionName = init.functionName || fallbackString;\r\n        this.extraInputs = new InvocationContextExtraInputs();\r\n        this.extraOutputs = new InvocationContextExtraOutputs();\r\n        this.retryContext = init.retryContext;\r\n        this.traceContext = init.traceContext;\r\n        this.triggerMetadata = init.triggerMetadata;\r\n        this.options = {\r\n            trigger: init.options?.trigger || {\r\n                name: fallbackString,\r\n                type: fallbackString,\r\n            },\r\n            return: init.options?.return,\r\n            extraInputs: init.options?.extraInputs || [],\r\n            extraOutputs: init.options?.extraOutputs || [],\r\n        };\r\n        this.#userLogHandler = init.logHandler || fallbackLogHandler;\r\n    }\r\n\r\n    log(...args: unknown[]): void {\r\n        this.#userLogHandler('information', ...args);\r\n    }\r\n\r\n    trace(...args: unknown[]): void {\r\n        this.#userLogHandler('trace', ...args);\r\n    }\r\n\r\n    debug(...args: unknown[]): void {\r\n        this.#userLogHandler('debug', ...args);\r\n    }\r\n\r\n    info(...args: unknown[]): void {\r\n        this.#userLogHandler('information', ...args);\r\n    }\r\n\r\n    warn(...args: unknown[]): void {\r\n        this.#userLogHandler('warning', ...args);\r\n    }\r\n\r\n    error(...args: unknown[]): void {\r\n        this.#userLogHandler('error', ...args);\r\n    }\r\n}\r\n\r\nclass InvocationContextExtraInputs implements types.InvocationContextExtraInputs {\r\n    #inputs: Record<string, unknown> = {};\r\n    get(inputOrName: types.FunctionInput | string): any {\r\n        const name = typeof inputOrName === 'string' ? inputOrName : inputOrName.name;\r\n        return this.#inputs[name];\r\n    }\r\n    set(inputOrName: types.FunctionInput | string, value: unknown): void {\r\n        const name = typeof inputOrName === 'string' ? inputOrName : inputOrName.name;\r\n        this.#inputs[name] = value;\r\n    }\r\n}\r\n\r\nclass InvocationContextExtraOutputs implements types.InvocationContextExtraOutputs {\r\n    #outputs: Record<string, unknown> = {};\r\n    get(outputOrName: types.FunctionOutput | string): unknown {\r\n        const name = typeof outputOrName === 'string' ? outputOrName : outputOrName.name;\r\n        return this.#outputs[name];\r\n    }\r\n    set(outputOrName: types.FunctionOutput | string, value: unknown): void {\r\n        const name = typeof outputOrName === 'string' ? outputOrName : outputOrName.name;\r\n        this.#outputs[name] = value;\r\n    }\r\n}\r\n","module.exports = require(\"util\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcDuration } from '@azure/functions-core';\r\nimport { Duration } from '../../types';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\nexport function toRpcDuration(dateTime: Duration | number | undefined, propertyName: string): RpcDuration | undefined {\r\n    if (isDefined(dateTime)) {\r\n        try {\r\n            let timeInMilliseconds: number | undefined;\r\n            if (typeof dateTime === 'object') {\r\n                const minutes = (dateTime.minutes || 0) + (dateTime.hours || 0) * 60;\r\n                const seconds = (dateTime.seconds || 0) + minutes * 60;\r\n                timeInMilliseconds = (dateTime.milliseconds || 0) + seconds * 1000;\r\n            } else if (typeof dateTime === 'number') {\r\n                timeInMilliseconds = dateTime;\r\n            }\r\n\r\n            if (isDefined(timeInMilliseconds) && timeInMilliseconds >= 0) {\r\n                return {\r\n                    seconds: Math.round(timeInMilliseconds / 1000),\r\n                };\r\n            }\r\n        } catch {\r\n            // fall through\r\n        }\r\n\r\n        throw new AzFuncSystemError(\r\n            `A 'number' or 'Duration' object was expected instead of a '${typeof dateTime}'. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { HttpRequestUser } from '@azure/functions';\r\nimport { Headers } from 'undici';\r\nimport { nonNullValue } from '../utils/nonNull';\r\n\r\n/* grandfathered in. Should fix when possible */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access */\r\n\r\nexport function extractHttpUserFromHeaders(headers: Headers): HttpRequestUser | null {\r\n    let user: HttpRequestUser | null = null;\r\n\r\n    const clientPrincipal = headers.get('x-ms-client-principal');\r\n    if (clientPrincipal) {\r\n        const claimsPrincipalData = JSON.parse(Buffer.from(clientPrincipal, 'base64').toString('utf-8'));\r\n\r\n        if (claimsPrincipalData['identityProvider']) {\r\n            user = {\r\n                type: 'StaticWebApps',\r\n                id: claimsPrincipalData['userId'],\r\n                username: claimsPrincipalData['userDetails'],\r\n                identityProvider: claimsPrincipalData['identityProvider'],\r\n                claimsPrincipalData,\r\n            };\r\n        } else {\r\n            user = {\r\n                type: 'AppService',\r\n                id: nonNullValue(headers.get('x-ms-client-principal-id'), 'user-id'),\r\n                username: nonNullValue(headers.get('x-ms-client-principal-name'), 'user-name'),\r\n                identityProvider: nonNullValue(headers.get('x-ms-client-principal-idp'), 'user-idp'),\r\n                claimsPrincipalData,\r\n            };\r\n        }\r\n    }\r\n\r\n    return user;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { InvocationHookContext } from './InvocationHookContext';\r\n\r\nexport class PreInvocationContext extends InvocationHookContext implements types.PreInvocationContext {\r\n    #init: types.PreInvocationContextInit;\r\n\r\n    constructor(init?: types.PreInvocationContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n        this.#init.functionCallback ??= () => {};\r\n    }\r\n\r\n    get functionHandler(): types.FunctionHandler {\r\n        return nonNullProp(this.#init, 'functionCallback');\r\n    }\r\n\r\n    set functionHandler(value: types.FunctionHandler) {\r\n        this.#init.functionCallback = value;\r\n    }\r\n}\r\n","module.exports = require(\"@azure/functions-core\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HttpResponseInit } from '@azure/functions';\r\nimport { Blob } from 'buffer';\r\nimport { ReadableStream } from 'stream/web';\r\nimport { FormData, Headers, Response as uResponse, ResponseInit as uResponseInit } from 'undici';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\ninterface InternalHttpResponseInit extends HttpResponseInit {\r\n    undiciResponse?: uResponse;\r\n}\r\n\r\nexport class HttpResponse implements types.HttpResponse {\r\n    readonly cookies: types.Cookie[];\r\n    readonly enableContentNegotiation: boolean;\r\n\r\n    #uRes: uResponse;\r\n    #init: InternalHttpResponseInit;\r\n\r\n    constructor(init?: InternalHttpResponseInit) {\r\n        init ??= {};\r\n        this.#init = init;\r\n\r\n        if (init.undiciResponse) {\r\n            this.#uRes = init.undiciResponse;\r\n        } else {\r\n            const uResInit: uResponseInit = { status: init.status, headers: init.headers };\r\n            if (isDefined(init.jsonBody)) {\r\n                this.#uRes = uResponse.json(init.jsonBody, uResInit);\r\n            } else {\r\n                this.#uRes = new uResponse(init.body, uResInit);\r\n            }\r\n        }\r\n\r\n        this.cookies = init.cookies ?? [];\r\n        this.enableContentNegotiation = !!init.enableContentNegotiation;\r\n    }\r\n\r\n    get status(): number {\r\n        return this.#uRes.status;\r\n    }\r\n\r\n    get headers(): Headers {\r\n        return this.#uRes.headers;\r\n    }\r\n\r\n    get body(): ReadableStream<any> | null {\r\n        return this.#uRes.body;\r\n    }\r\n\r\n    get bodyUsed(): boolean {\r\n        return this.#uRes.bodyUsed;\r\n    }\r\n\r\n    async arrayBuffer(): Promise<ArrayBuffer> {\r\n        return this.#uRes.arrayBuffer();\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return this.#uRes.blob();\r\n    }\r\n\r\n    async formData(): Promise<FormData> {\r\n        return this.#uRes.formData();\r\n    }\r\n\r\n    async json(): Promise<unknown> {\r\n        return this.#uRes.json();\r\n    }\r\n\r\n    async text(): Promise<string> {\r\n        return this.#uRes.text();\r\n    }\r\n\r\n    clone(): HttpResponse {\r\n        const newInit = structuredClone(this.#init);\r\n        newInit.undiciResponse = this.#uRes.clone();\r\n        return new HttpResponse(newInit);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { AzFuncSystemError } from '../errors';\r\n\r\n/**\r\n * Retrieves a property by name from an object and checks that it's not null and not undefined.  It is strongly typed\r\n * for the property and will give a compile error if the given name is not a property of the source.\r\n */\r\nexport function nonNullProp<TSource, TKey extends keyof TSource>(\r\n    source: TSource,\r\n    name: TKey\r\n): NonNullable<TSource[TKey]> {\r\n    const value: NonNullable<TSource[TKey]> = <NonNullable<TSource[TKey]>>source[name];\r\n    return nonNullValue(value, <string>name);\r\n}\r\n\r\n/**\r\n * Validates that a given value is not null and not undefined.\r\n */\r\nexport function nonNullValue<T>(value: T | undefined | null, propertyNameOrMessage?: string): T {\r\n    if (value === null || value === undefined) {\r\n        throw new AzFuncSystemError(\r\n            'Internal error: Expected value to be neither null nor undefined' +\r\n                (propertyNameOrMessage ? `: ${propertyNameOrMessage}` : '')\r\n        );\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nexport function copyPropIfDefined<TData, TKey extends keyof TData>(source: TData, destination: TData, key: TKey): void {\r\n    if (source[key] !== null && source[key] !== undefined) {\r\n        destination[key] = source[key];\r\n    }\r\n}\r\n\r\nexport function isDefined<T>(data: T | undefined | null): data is T {\r\n    return data !== null && data !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { ReadOnlyError } from '../errors';\r\nimport { InvocationContext } from '../InvocationContext';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class InvocationHookContext extends HookContext implements types.InvocationHookContext {\r\n    #init: types.InvocationHookContextInit;\r\n\r\n    constructor(init?: types.InvocationHookContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n        this.#init.inputs ??= [];\r\n        this.#init.invocationContext ??= new InvocationContext();\r\n    }\r\n\r\n    get invocationContext(): types.InvocationContext {\r\n        return nonNullProp(this.#init, 'invocationContext');\r\n    }\r\n\r\n    set invocationContext(_value: types.InvocationContext) {\r\n        throw new ReadOnlyError('invocationContext');\r\n    }\r\n\r\n    get inputs(): unknown[] {\r\n        return nonNullProp(this.#init, 'inputs');\r\n    }\r\n\r\n    set inputs(value: unknown[]) {\r\n        this.#init.inputs = value;\r\n    }\r\n}\r\n","module.exports = require(\"url\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport function isTrigger(typeName: string | undefined | null): boolean {\r\n    return !!typeName && /trigger$/i.test(typeName);\r\n}\r\n\r\nexport function isHttpTrigger(typeName: string | undefined | null): boolean {\r\n    return typeName?.toLowerCase() === 'httptrigger';\r\n}\r\n\r\nexport function isTimerTrigger(typeName: string | undefined | null): boolean {\r\n    return typeName?.toLowerCase() === 'timertrigger';\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(8156);\n"],"names":["setupLocked","enableHttpStream","capabilities","opts","AzFuncSystemError","coreApi","tryGetCoreApiLazy","log","isDefined","key","val","Object","entries","String","workerSystemLog","name","version","getInvocationModel","coreCtx","InvocationModel","getCapabilities","workerCapabilities","lockSetup","httpUri","setupHttpProxy","HttpUri","assign","tryJsonParse","data","JSON","parse","string","json","bytes","Buffer","from","stream","http","HttpRequest","int","double","collectionBytes","map","d","collectionString","collectionDouble","collectionSint64","sint64","Error","isAzureFunctionsSystemError","AzFuncTypeError","TypeError","AzFuncRangeError","RangeError","constructor","propertyName","super","err","message","stringify","addOutputBindingName","binding","addBindingName","options","type","toCamelCaseKey","charAt","toLowerCase","slice","toCamelCaseValue","Array","isArray","result","value","module","exports","require","nullable","isNaN","Number","parseFloat","dateTime","timeInMilliseconds","getTime","seconds","Math","round","retryContext","retryCount","nonNullProp","maxRetryCount","exception","copyPropIfDefined","fromRpcException","traceContext","attributes","setup","hasSetModel","convertToHttpOptions","optionsOrHandler","method","handler","methods","convertToGenericOptions","triggerMethod","return","ret","trigger","extraInputs","extraOutputs","retry","triggerOptions","output","generic","setProgrammingModel","ProgrammingModel","console","warn","registerFunction","toCoreFunctionMetadata","timer","storageBlob","storageQueue","serviceBusQueue","serviceBusTopic","eventHub","eventGrid","cosmosDB","warmup","sql","mySql","webPubSub","Disposable","inDisposables","disposables","disposable","dispose","undefined","callOnDispose","this","requests","responses","invocRequestEmitter","EventEmitter","invocationId","Promise","resolve","_reject","req","once","invocationIdHeader","userRes","proxyRes","headers","setHeader","statusCode","status","cookies","length","serializedCookies","c","sameSite","serialize","domain","path","expires","Date","secure","httpOnly","maxAge","setCookies","body","values","chunk","write","end","reject","server","createServer","on","res","emit","ensureErrorType","stack","listen","address","port","callback","net","tryPort","close","findOpenPort","openPort","bindings","bindingNames","direction","isTrigger","push","input","returnBindingKey","filter","v","i","indexOf","retryOptions","retryStrategy","strategy","delayInterval","toRpcDuration","maximumInterval","minimumInterval","addTriggerBindingName","authLevel","crypto","randomBytes","ceil","toString","createHash","update","digest","isBuffer","ArrayBuffer","isView","Uint8Array","buffer","byteOffset","byteLength","isInteger","AppTerminateContext","HookContext","triggerMetadata","triggerType","isHttpTrigger","isTimerTrigger","fromRpcTypedData","addInputBindingName","level","args","format","fallbackLogHandler","response","HttpResponse","sendProxyResponse","rpcResponse","cookie","toRpcHttpCookie","enableContentNegotiation","bodyBytes","arrayBuffer","toRpcTypedData","nullableMapping","originalMapping","converted","keys","trace","debug","info","error","LogHookContext","init","category","_value","ReadOnlyError","invocationContext","fromRpcBinding","returnBinding","nonNullValue","hookData","metadata","triggerBinding","find","b","getArguments","request","context","InvocationContext","functionName","logHandler","fromRpcRetryContext","fromRpcTraceContext","fromRpcTriggerMetadata","fromRpcBindings","inputs","inputData","bindingName","rpcBinding","join","bindingType","proxyRequest","waitForProxyRequest","createStreamRequest","set","invokeFunction","getResponse","usedReturnValue","returnValue","outputValue","get","outputData","toRpcHttp","logCategory","state","badAsyncMsg","suffix","endsWith","getStringHash","registerHook","hookName","coreContext","AppStartContext","PreInvocationContext","PostInvocationContext","InvocationHookContext","inputCookie","rpcSameSite","toLocaleLowerCase","toRpcString","toNullableString","toNullableTimestamp","toNullableBool","toNullableDouble","uReq","undiciRequest","url","fromNullableMapping","nullableHeaders","nullableQuery","query","URLSearchParams","URL","searchParams","params","nullableParams","user","extractHttpUserFromHeaders","bodyUsed","blob","formData","text","clone","newInit","structuredClone","proxyReq","hostHeaderName","protoHeaderName","host","proto","lowerMethod","Query","rpcQueryIgnored","Headers","rpcHeaders","rpcParams","headersData","duplex","rpcValue","MySqlChangeOperation","SqlChangeOperation","fallbackString","InvocationContextExtraInputs","InvocationContextExtraOutputs","inputOrName","outputOrName","minutes","hours","milliseconds","clientPrincipal","claimsPrincipalData","id","username","identityProvider","functionCallback","functionHandler","undiciResponse","uResInit","jsonBody","propertyNameOrMessage","source","destination","typeName","test","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}