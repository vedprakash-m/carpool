name: Simple Deploy

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**" 
      - "shared/**"
      - "infra/**"
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "20"
  AZURE_LOCATION: "eastus"

permissions:
  contents: read
  id-token: write

jobs:
  pre-deployment-validation:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy-backend: ${{ steps.changes.outputs.backend }}
      deploy-frontend: ${{ steps.changes.outputs.frontend }}
      deploy-infra: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Check for changes
        id: changes
        run: |
          # Check what components need deployment based on changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 || echo "")
          
          if echo "$CHANGED_FILES" | grep -E "^(backend|shared)/" > /dev/null; then
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "üì¶ Backend changes detected"
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CHANGED_FILES" | grep -E "^(frontend|shared)/" > /dev/null; then
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "üåê Frontend changes detected"
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CHANGED_FILES" | grep -E "^infra/" > /dev/null; then
            echo "infra=true" >> $GITHUB_OUTPUT
            echo "üèóÔ∏è Infrastructure changes detected"
          else
            echo "infra=false" >> $GITHUB_OUTPUT
          fi

  # Run quality checks before deployment
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          
      - name: Install dependencies
        run: npm ci --ignore-scripts
        
      - name: Quick lint check
        run: npm run lint --workspaces --if-present
        
      - name: Quick tests
        run: |
          # Run only critical tests to save time
          npm --workspace backend run test -- --testPathPattern="auth|user" --maxWorkers=2
        continue-on-error: true

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, quality-gate]
    if: always() && needs.pre-deployment-validation.outputs.deploy-infra == 'true' && (needs.quality-gate.result == 'success' || needs.quality-gate.result == 'skipped')
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy infrastructure (single region)
        run: |
          echo "üèóÔ∏è Deploying minimal infrastructure..."
          
          # Deploy database resources first
          az deployment group create \
            --resource-group vcarpool-db-rg \
            --template-file infra/database.bicep \
            --parameters @infra/database.parameters.json \
            --mode Incremental
          
          # Deploy compute resources
          az deployment group create \
            --resource-group vcarpool-rg \
            --template-file infra/main-compute.bicep \
            --parameters @infra/main-compute.parameters.json \
            --parameters databaseResourceGroup=vcarpool-db-rg \
            --mode Incremental

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, run-tests, deploy-infrastructure]
    if: always() && needs.pre-deployment-validation.outputs.deploy-backend == 'true' && (needs.run-tests.result == 'success' || needs.run-tests.result == 'skipped')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies and build
        run: |
          echo "üì¶ Building backend..."
          npm ci --ignore-scripts
          npm run build:shared
          npm run build:backend

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Functions (single slot)
        run: |
          cd backend
          echo "üöÄ Deploying backend to production slot..."
          
          # Install Azure Functions Core Tools if not cached
          npm install -g azure-functions-core-tools@4 --unsafe-perm true
          
          # Simple direct deployment to production
          func azure functionapp publish vcarpool-api --typescript
          
          echo "‚úÖ Backend deployment completed"

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, run-tests, deploy-infrastructure]
    if: always() && needs.pre-deployment-validation.outputs.deploy-frontend == 'true' && (needs.run-tests.result == 'success' || needs.run-tests.result == 'skipped')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies and build
        run: |
          echo "üåê Building frontend..."
          npm ci --ignore-scripts
          npm run build:shared
          npm run build:frontend

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend"
          output_location: ".next"

  post-deployment-validation:
    name: Basic Health Check
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success')
    steps:
      - name: Wait for deployment propagation
        run: |
          echo "‚è≥ Waiting for deployment to propagate..."
          sleep 60

      - name: Basic health check
        run: |
          echo "üè• Running basic health checks..."
          
          # Simple health check with retries
          check_endpoint() {
            local url=$1
            local name=$2
            local max_attempts=5
            
            for i in $(seq 1 $max_attempts); do
              if curl -f -s --max-time 10 "$url" > /dev/null; then
                echo "‚úÖ $name: OK"
                return 0
              fi
              echo "‚è≥ $name: Attempt $i/$max_attempts failed, retrying..."
              sleep 30
            done
            
            echo "‚ùå $name: Failed after $max_attempts attempts"
            return 1
          }
          
          # Check backend health
          if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
            check_endpoint "https://vcarpool-api.azurewebsites.net/api/health" "Backend API"
          fi
          
          # Check frontend
          if [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
            check_endpoint "https://vcarpool.azurestaticapps.net" "Frontend App"
          fi
          
          echo "üéâ Deployment validation completed!"

  notify-deployment:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, post-deployment-validation]
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          echo "üìä Deployment Summary"
          echo "===================="
          echo "Timestamp: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          
          if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
            echo "‚úÖ Backend: Deployed successfully"
          elif [[ "${{ needs.deploy-backend.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è Backend: No changes, skipped"
          else
            echo "‚ùå Backend: Deployment failed"
          fi
          
          if [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
            echo "‚úÖ Frontend: Deployed successfully"
          elif [[ "${{ needs.deploy-frontend.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è Frontend: No changes, skipped"
          else
            echo "‚ùå Frontend: Deployment failed"
          fi
          
          if [{{ "${{ needs.post-deployment-validation.result }}" == "success" ]]; then
            echo "‚úÖ Health Check: Passed"
          else
            echo "‚ö†Ô∏è Health Check: Failed or skipped"
          fi
          
          echo ""
          echo "üîó Application URLs:"
          echo "- Frontend: https://vcarpool.azurestaticapps.net"
          echo "- Backend API: https://vcarpool-api.azurewebsites.net"
