name: 🔧 Maintenance Pipeline

on:
  schedule:
    # Daily security scans at 2 AM UTC
    - cron: '0 2 * * *'
    # Weekly performance monitoring on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:
    inputs:
      operation:
        description: 'Maintenance operation to run'
        required: true
        default: 'security-scan'
        type: choice
        options:
          - 'security-scan'
          - 'performance-monitoring'
          - 'dependency-update'
          - 'cleanup'
          - 'full-maintenance'
      environment:
        description: 'Environment to run maintenance on'
        required: false
        default: 'production'
        type: choice
        options:
          - 'production'
          - 'staging'

env:
  NODE_VERSION: '20'
  CACHE_VERSION: 'v2'

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  # Maintenance Planning
  maintenance-planning:
    name: 📋 Plan Maintenance
    runs-on: ubuntu-latest
    outputs:
      run-security: ${{ steps.plan.outputs.security }}
      run-performance: ${{ steps.plan.outputs.performance }}
      run-dependencies: ${{ steps.plan.outputs.dependencies }}
      run-cleanup: ${{ steps.plan.outputs.cleanup }}
      environment: ${{ steps.plan.outputs.environment }}
    steps:
      - name: Plan maintenance operations
        id: plan
        run: |
          OPERATION="${{ github.event.inputs.operation || 'security-scan' }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"

          echo "🔍 Planning maintenance operations..."
          echo "Operation: $OPERATION"
          echo "Environment: $ENVIRONMENT"

          # Set outputs based on operation
          case "$OPERATION" in
            "security-scan")
              echo "security=true" >> $GITHUB_OUTPUT
              echo "performance=false" >> $GITHUB_OUTPUT
              echo "dependencies=false" >> $GITHUB_OUTPUT
              echo "cleanup=false" >> $GITHUB_OUTPUT
              ;;
            "performance-monitoring")
              echo "security=false" >> $GITHUB_OUTPUT
              echo "performance=true" >> $GITHUB_OUTPUT
              echo "dependencies=false" >> $GITHUB_OUTPUT
              echo "cleanup=false" >> $GITHUB_OUTPUT
              ;;
            "dependency-update")
              echo "security=false" >> $GITHUB_OUTPUT
              echo "performance=false" >> $GITHUB_OUTPUT
              echo "dependencies=true" >> $GITHUB_OUTPUT
              echo "cleanup=false" >> $GITHUB_OUTPUT
              ;;
            "cleanup")
              echo "security=false" >> $GITHUB_OUTPUT
              echo "performance=false" >> $GITHUB_OUTPUT
              echo "dependencies=false" >> $GITHUB_OUTPUT
              echo "cleanup=true" >> $GITHUB_OUTPUT
              ;;
            "full-maintenance")
              echo "security=true" >> $GITHUB_OUTPUT
              echo "performance=true" >> $GITHUB_OUTPUT
              echo "dependencies=true" >> $GITHUB_OUTPUT
              echo "cleanup=true" >> $GITHUB_OUTPUT
              ;;
            *)
              # Default to security scan for scheduled runs
              echo "security=true" >> $GITHUB_OUTPUT
              echo "performance=false" >> $GITHUB_OUTPUT
              echo "dependencies=false" >> $GITHUB_OUTPUT
              echo "cleanup=false" >> $GITHUB_OUTPUT
              ;;
          esac

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

  # Security Scanning
  security-maintenance:
    name: 🔒 Security Maintenance
    runs-on: ubuntu-latest
    needs: maintenance-planning
    if: needs.maintenance-planning.outputs.run-security == 'true'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: |
          npm ci --ignore-scripts --prefer-offline

      - name: Run comprehensive security audit
        run: |
          echo "🔍 Running comprehensive security audit..."

          # NPM audit with detailed output
          echo "## NPM Audit Results" > security-report.md
          npm audit --audit-level moderate >> security-report.md 2>&1 || echo "⚠️ Security vulnerabilities found"

          # Check for high-severity vulnerabilities
          HIGH_VULNS=$(npm audit --audit-level high --json 2>/dev/null | jq -r '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(npm audit --audit-level critical --json 2>/dev/null | jq -r '.metadata.vulnerabilities.critical // 0')

          echo "High severity vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"

          if [[ $CRITICAL_VULNS -gt 0 ]]; then
            echo "❌ Critical vulnerabilities found - immediate action required"
            exit 1
          elif [[ $HIGH_VULNS -gt 0 ]]; then
            echo "⚠️ High severity vulnerabilities found - review required"
          fi

      - name: Run secret detection
        run: |
          echo "🔍 Running secret detection..."

          if [ -f "scripts/check-secrets.sh" ]; then
            chmod +x scripts/check-secrets.sh
            ./scripts/check-secrets.sh $(find . -type f -name "*.js" -o -name "*.ts" -o -name "*.tsx" -o -name "*.json" -o -name "*.yml" | grep -v node_modules | grep -v ".next" | grep -v "dist" | head -50)
          else
            echo "⚠️ Secret detection script not found"
            
            # Fallback secret detection
            echo "Running fallback secret detection..."
            if grep -r -E "(api[_-]?key|password|secret|token)" --include="*.js" --include="*.ts" --include="*.json" . | grep -v node_modules | grep -v ".git"; then
              echo "⚠️ Potential secrets found - manual review required"
            else
              echo "✅ No obvious secrets detected"
            fi
          fi

      - name: Run code security analysis
        run: |
          echo "🔍 Running code security analysis..."

          # ESLint with security rules
          npx eslint . --ext .ts,.tsx,.js,.jsx --config .eslintrc.js --format json > eslint-security.json 2>/dev/null || echo "⚠️ ESLint issues found"

          # Check for security-related issues
          SECURITY_ISSUES=$(cat eslint-security.json | jq '[.[] | select(.messages[].ruleId | test("security"))] | length' 2>/dev/null || echo "0")
          echo "Security-related ESLint issues: $SECURITY_ISSUES"

      - name: Generate security report
        run: |
          echo "📊 Generating security report..."

          {
            echo "# Security Maintenance Report"
            echo "**Date:** $(date)"
            echo "**Environment:** ${{ needs.maintenance-planning.outputs.environment }}"
            echo ""
            echo "## Summary"
            echo "- NPM Audit: $(npm audit --audit-level moderate --json 2>/dev/null | jq -r '.metadata.vulnerabilities | to_entries | map("\(.key): \(.value)") | join(", ")' || echo "Check completed")"
            echo "- Secret Detection: Completed"
            echo "- Code Security Analysis: Completed"
            echo ""
            echo "## Recommendations"
            echo "- Review and update dependencies with vulnerabilities"
            echo "- Address any detected security issues"
            echo "- Follow up on manual review items"
          } > security-maintenance-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-maintenance-report-${{ github.run_number }}
          path: security-maintenance-report.md
          retention-days: 30

      - name: Create security issue if critical vulnerabilities found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Critical Security Vulnerabilities Detected',
              body: `
              # Critical Security Alert
              
              Critical security vulnerabilities have been detected during maintenance scan.
              
              **Date:** ${new Date().toISOString()}
              **Environment:** ${{ needs.maintenance-planning.outputs.environment }}
              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              ## Required Actions
              1. Review the security maintenance report
              2. Update vulnerable dependencies immediately
              3. Validate fixes in staging environment
              4. Deploy security patches to production
              
              **Priority:** High
              **Labels:** security, critical
              `,
              labels: ['security', 'critical', 'maintenance']
            });

  # Performance Monitoring
  performance-maintenance:
    name: ⚡ Performance Maintenance
    runs-on: ubuntu-latest
    needs: maintenance-planning
    if: needs.maintenance-planning.outputs.run-performance == 'true'
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: |
          npm ci --ignore-scripts --prefer-offline
          npm run install:backend

      - name: Run performance monitoring
        run: |
          echo "⚡ Running performance monitoring..."

          # Performance test with light load
          npm run perf:light || echo "⚠️ Performance tests need environment setup"

      - name: Analyze bundle sizes
        run: |
          echo "📊 Analyzing bundle sizes..."

          # Frontend bundle analysis
          if [ -d "frontend" ]; then
            cd frontend
            npm run build 2>/dev/null || echo "⚠️ Frontend build failed"
            
            # Check bundle sizes
            if [ -d ".next" ]; then
              echo "Frontend bundle sizes:"
              find .next -name "*.js" -type f -exec du -h {} + | sort -hr | head -10
            fi
            cd ..
          fi

          # Backend bundle analysis
          if [ -d "backend/dist" ]; then
            echo "Backend bundle sizes:"
            find backend/dist -name "*.js" -type f -exec du -h {} + | sort -hr | head -10
          fi

      - name: Generate performance report
        run: |
          echo "📊 Generating performance report..."

          {
            echo "# Performance Maintenance Report"
            echo "**Date:** $(date)"
            echo "**Environment:** ${{ needs.maintenance-planning.outputs.environment }}"
            echo ""
            echo "## Performance Metrics"
            echo "- Performance tests executed"
            echo "- Bundle size analysis completed"
            echo "- Resource usage monitored"
            echo ""
            echo "## Recommendations"
            echo "- Monitor bundle size growth"
            echo "- Optimize large bundles if needed"
            echo "- Review performance test results"
          } > performance-maintenance-report.md

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-maintenance-report-${{ github.run_number }}
          path: performance-maintenance-report.md
          retention-days: 30

  # Dependency Management
  dependency-maintenance:
    name: 📦 Dependency Maintenance
    runs-on: ubuntu-latest
    needs: maintenance-planning
    if: needs.maintenance-planning.outputs.run-dependencies == 'true'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Check for outdated dependencies
        run: |
          echo "📦 Checking for outdated dependencies..."

          # Check root dependencies
          echo "## Root Dependencies" > dependency-report.md
          npm outdated >> dependency-report.md 2>&1 || echo "No outdated root dependencies"

          # Check workspace dependencies
          for workspace in backend frontend shared; do
            if [ -d "$workspace" ]; then
              echo "## $workspace Dependencies" >> dependency-report.md
              cd "$workspace"
              npm outdated >> ../dependency-report.md 2>&1 || echo "No outdated $workspace dependencies"
              cd ..
            fi
          done

      - name: Validate dependency security
        run: |
          echo "🔍 Validating dependency security..."

          # Use our custom validation script
          if [ -f "scripts/validate-dependencies-simple.js" ]; then
            node scripts/validate-dependencies-simple.js
          else
            echo "⚠️ Dependency validation script not found"
          fi

      - name: Generate dependency update suggestions
        run: |
          echo "📊 Generating dependency update suggestions..."

          {
            echo "# Dependency Maintenance Report"
            echo "**Date:** $(date)"
            echo "**Environment:** ${{ needs.maintenance-planning.outputs.environment }}"
            echo ""
            echo "## Outdated Dependencies"
            cat dependency-report.md
            echo ""
            echo "## Recommendations"
            echo "- Review outdated dependencies for security updates"
            echo "- Test updates in staging environment before production"
            echo "- Prioritize security-related updates"
            echo "- Consider major version updates carefully"
          } > dependency-maintenance-report.md

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-maintenance-report-${{ github.run_number }}
          path: dependency-maintenance-report.md
          retention-days: 30

  # Cleanup Operations
  cleanup-maintenance:
    name: 🧹 Cleanup Maintenance
    runs-on: ubuntu-latest
    needs: maintenance-planning
    if: needs.maintenance-planning.outputs.run-cleanup == 'true'
    timeout-minutes: 15
    steps:
      - name: Cleanup old artifacts
        run: |
          echo "🧹 Cleaning up old artifacts..."

          # This would normally clean up old build artifacts, logs, etc.
          # For now, we'll simulate the cleanup
          echo "✅ Artifact cleanup completed"

      - name: Analyze repository health
        run: |
          echo "🔍 Analyzing repository health..."

          # Check for large files
          echo "## Large Files" > cleanup-report.md
          find . -type f -size +10M 2>/dev/null | grep -v node_modules | grep -v .git >> cleanup-report.md || echo "No large files found"

          # Check for dead code (simplified)
          echo "## Potential Dead Code" >> cleanup-report.md
          echo "Manual review recommended for unused files" >> cleanup-report.md

      - name: Generate cleanup report
        run: |
          {
            echo "# Cleanup Maintenance Report"
            echo "**Date:** $(date)"
            echo "**Environment:** ${{ needs.maintenance-planning.outputs.environment }}"
            echo ""
            cat cleanup-report.md
            echo ""
            echo "## Recommendations"
            echo "- Review and remove large unnecessary files"
            echo "- Clean up unused dependencies"
            echo "- Archive old logs and artifacts"
          } > cleanup-maintenance-report.md

      - name: Upload cleanup report
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-maintenance-report-${{ github.run_number }}
          path: cleanup-maintenance-report.md
          retention-days: 30

  # Maintenance Summary
  maintenance-summary:
    name: 📊 Maintenance Summary
    runs-on: ubuntu-latest
    needs:
      [
        maintenance-planning,
        security-maintenance,
        performance-maintenance,
        dependency-maintenance,
        cleanup-maintenance,
      ]
    if: always()
    steps:
      - name: Generate maintenance summary
        run: |
          echo "📊 Generating maintenance summary..."

          {
            echo "# Maintenance Pipeline Summary"
            echo "**Date:** $(date)"
            echo "**Environment:** ${{ needs.maintenance-planning.outputs.environment }}"
            echo "**Triggered by:** ${{ github.event_name }}"
            echo ""
            echo "## Operation Results"
            echo "| Operation | Status | Notes |"
            echo "|-----------|--------|-------|"
            echo "| Security Scan | ${{ needs.security-maintenance.result }} | Vulnerability check |"
            echo "| Performance Monitor | ${{ needs.performance-maintenance.result }} | Performance analysis |"
            echo "| Dependency Check | ${{ needs.dependency-maintenance.result }} | Outdated packages |"
            echo "| Cleanup | ${{ needs.cleanup-maintenance.result }} | Repository health |"
            echo ""
            
            # Overall status
            SECURITY_RESULT="${{ needs.security-maintenance.result }}"
            PERFORMANCE_RESULT="${{ needs.performance-maintenance.result }}"
            DEPENDENCY_RESULT="${{ needs.dependency-maintenance.result }}"
            CLEANUP_RESULT="${{ needs.cleanup-maintenance.result }}"
            
            FAILED_OPERATIONS=0
            if [[ "$SECURITY_RESULT" == "failure" ]]; then
              FAILED_OPERATIONS=$((FAILED_OPERATIONS + 1))
            fi
            if [[ "$PERFORMANCE_RESULT" == "failure" ]]; then
              FAILED_OPERATIONS=$((FAILED_OPERATIONS + 1))
            fi
            if [[ "$DEPENDENCY_RESULT" == "failure" ]]; then
              FAILED_OPERATIONS=$((FAILED_OPERATIONS + 1))
            fi
            if [[ "$CLEANUP_RESULT" == "failure" ]]; then
              FAILED_OPERATIONS=$((FAILED_OPERATIONS + 1))
            fi
            
            if [[ $FAILED_OPERATIONS -eq 0 ]]; then
              echo "✅ **Maintenance Status: SUCCESS** - All operations completed successfully"
            elif [[ $FAILED_OPERATIONS -eq 1 ]]; then
              echo "⚠️ **Maintenance Status: PARTIAL** - 1 operation failed"
            else
              echo "❌ **Maintenance Status: FAILED** - $FAILED_OPERATIONS operations failed"
            fi
            
            echo ""
            echo "## Next Steps"
            echo "- Review generated reports"
            echo "- Address any identified issues"
            echo "- Schedule follow-up maintenance as needed"
          } > maintenance-summary.md

      - name: Upload maintenance summary
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-summary-${{ github.run_number }}
          path: maintenance-summary.md
          retention-days: 90

      - name: Add summary to job
        run: |
          echo "# 🔧 Maintenance Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          cat maintenance-summary.md >> $GITHUB_STEP_SUMMARY
