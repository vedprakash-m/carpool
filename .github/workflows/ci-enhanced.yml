name: Enhanced CI Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  COVERAGE_THRESHOLD: 65 # Realistic threshold to start

jobs:
  dependency-validation:
    name: Validate Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Validate package.json versions
        run: |
          echo "üîç Validating dependency versions..."
          # Check for invalid versions before installing
          node -e "
            const pkg = require('./package.json');
            const invalidVersions = [];
            
            // Check known problematic versions
            if (pkg.devDependencies?.madge?.includes('6.3.1')) {
              invalidVersions.push('madge@6.3.1 does not exist');
            }
            
            if (invalidVersions.length > 0) {
              console.error('‚ùå Invalid dependencies found:', invalidVersions);
              process.exit(1);
            }
            
            console.log('‚úÖ All dependency versions are valid');
          "

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Check for security vulnerabilities
        run: npm audit --audit-level moderate
        continue-on-error: true

  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: dependency-validation
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Lint all workspaces
        run: npm run lint --workspaces --if-present

      - name: Type check all workspaces
        run: npm run type-check --workspaces --if-present

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: dependency-validation
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run backend tests with coverage
        run: npm --workspace backend run test -- --coverage --maxWorkers=2

      - name: Enforce coverage threshold
        run: |
          COVERAGE=$(node -e "
            try {
              const r=require('./backend/coverage/coverage-summary.json');
              console.log(r.total.lines.pct);
            } catch(e) {
              console.log('0');
            }
          ")
          echo "Backend coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "‚ùå Coverage $COVERAGE% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi
          echo "‚úÖ Coverage threshold met"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: backend/coverage
          flags: backend
          fail_ci_if_error: false

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: dependency-validation
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run frontend tests
        run: npm --workspace frontend run test -- --watchAll=false --coverage
        continue-on-error: true

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend
          fail_ci_if_error: false

  build-packages:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-backend]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Build shared package
        run: npm run build:shared

      - name: Build backend
        run: npm run build:backend

      - name: Build frontend
        run: npm run build:frontend

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist
          retention-days: 7

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/.next
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-packages
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

      - name: Start backend for integration tests
        run: |
          cd backend
          npm run func:start:ci &
          npx wait-port 7071 --timeout 60000
        env:
          OTEL_ENABLED: 'false'

      - name: Run integration tests
        run: npm --workspace backend run test:integration
        continue-on-error: true

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, build-packages]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.test-backend.result }}" == "failure" ]]; then
            echo "‚ùå Backend tests failed"
            exit 1
          fi
          if [[ "${{ needs.build-packages.result }}" == "failure" ]]; then
            echo "‚ùå Build failed"
            exit 1
          fi
          echo "‚úÖ All quality checks passed"
