name: Performance & Security

on:
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'shared/**'
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'shared/**'
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Start backend for performance testing
        run: |
          cd backend
          npm run func:start:ci &
          npx wait-port 7071 --timeout 60000
        env:
          OTEL_ENABLED: 'false'

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          cd backend
          # Light performance test for PR
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PERF_VUS=10 PERF_DURATION_SEC=30 PERF_LATENCY_MS=200 npm run perf:phase2
          else
            # Full performance test for main branch
            PERF_VUS=50 PERF_DURATION_SEC=60 PERF_LATENCY_MS=150 npm run perf:phase2
          fi

      - name: Lighthouse CI (Frontend Performance)
        if: github.event_name == 'pull_request'
        run: |
          cd frontend
          npm install -g @lhci/cli@0.12.x

          # Start frontend dev server
          npm run dev &
          npx wait-port 3000 --timeout 60000

          # Run Lighthouse CI
          lhci autorun --config=.lighthouserc.json || echo "‚ö†Ô∏è Lighthouse CI not configured"
        continue-on-error: true

      - name: Bundle size analysis
        run: |
          cd frontend
          npm run build

          # Analyze bundle size
          npx next-bundle-analyzer || echo "‚ö†Ô∏è Bundle analyzer not configured"
        continue-on-error: true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Secret detection
        run: |
          if [ -f "scripts/check-secrets.sh" ]; then
            chmod +x scripts/check-secrets.sh
            ./scripts/check-secrets.sh $(find . -type f -name "*.js" -o -name "*.ts" -o -name "*.tsx" | grep -v node_modules | head -20)
          else
            echo "‚ö†Ô∏è Secret detection script not found"
          fi

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Dependency vulnerability scan
        run: |
          # Check for known vulnerabilities
          npm audit --audit-level moderate

          # Check for outdated packages
          npm outdated || echo "‚ö†Ô∏è Some packages are outdated"

      - name: SAST with CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  accessibility-tests:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Start frontend
        run: |
          cd frontend
          npm run dev &
          npx wait-port 3000 --timeout 60000

      - name: Run accessibility tests
        run: |
          cd frontend
          # Install axe-core CLI
          npm install -g @axe-core/cli

          # Test key pages for accessibility
          axe http://localhost:3000 --exit || echo "‚ö†Ô∏è Accessibility issues found"
          axe http://localhost:3000/login --exit || echo "‚ö†Ô∏è Login page accessibility issues"
          axe http://localhost:3000/dashboard --exit || echo "‚ö†Ô∏è Dashboard accessibility issues"
        continue-on-error: true

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Start backend
        run: |
          cd backend
          npm run func:start:ci &
          npx wait-port 7071 --timeout 60000
        env:
          OTEL_ENABLED: 'false'

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          cd backend
          # Heavy load test for main branch
          PERF_VUS=100 PERF_DURATION_SEC=300 PERF_LATENCY_MS=100 npm run perf:phase2

          # Check if latency requirements are met
          echo "‚ö° Load testing completed. Review results for performance regression."

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: GDPR compliance check
        run: |
          echo "üîí Checking GDPR compliance..."

          # Check for proper data handling
          if grep -r "personal.*data\|PII\|sensitive" --include="*.ts" --include="*.js" backend/src/; then
            echo "‚ö†Ô∏è Found potential PII handling - ensure GDPR compliance"
          fi

          # Check for data retention policies
          if ! grep -r "retention\|delete\|purge" --include="*.ts" --include="*.js" backend/src/; then
            echo "‚ö†Ô∏è No data retention policies found - review GDPR requirements"
          fi

      - name: Security headers check
        run: |
          echo "üõ°Ô∏è Checking security headers..."

          # Check for security header configurations
          if ! grep -r "helmet\|security.*headers" --include="*.ts" --include="*.js" backend/src/; then
            echo "‚ö†Ô∏è Security headers not configured"
          fi

  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs: [performance-tests, security-scan, accessibility-tests]
    if: always()
    steps:
      - name: Generate quality report
        run: |
          echo "üìä Quality Report Summary:"
          echo "========================="

          if [[ "${{ needs.performance-tests.result }}" == "success" ]]; then
            echo "‚úÖ Performance tests: PASSED"
          else
            echo "‚ùå Performance tests: FAILED"
          fi

          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "‚úÖ Security scan: PASSED"
          else
            echo "‚ùå Security scan: FAILED"
          fi

          if [[ "${{ needs.accessibility-tests.result }}" == "success" ]]; then
            echo "‚úÖ Accessibility tests: PASSED"
          else
            echo "‚ùå Accessibility tests: FAILED"
          fi

          echo "========================="
          echo "üìà Next steps:"
          echo "- Review failed tests and implement fixes"
          echo "- Monitor performance metrics in production"
          echo "- Schedule security review if issues found"
