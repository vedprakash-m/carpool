name: Robust CI Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      run_e2e:
        description: 'Run E2E tests'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip test execution (for urgent deployments)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "20"
  COVERAGE_THRESHOLD: 70
  CACHE_VERSION: "v1"

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  # Fast validation to catch issues early and fail fast
  quick-validation:
    name: 🔍 Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      has-backend-changes: ${{ steps.changes.outputs.backend }}
      has-frontend-changes: ${{ steps.changes.outputs.frontend }}
      has-shared-changes: ${{ steps.changes.outputs.shared }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 2>/dev/null || echo "")
          else
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD 2>/dev/null || echo "")
          fi
          
          echo "Changed files: $CHANGED_FILES"
          
          if echo "$CHANGED_FILES" | grep -E "^(backend|scripts)" >/dev/null; then
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "🔄 Backend changes detected"
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CHANGED_FILES" | grep -E "^frontend" >/dev/null; then
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "🔄 Frontend changes detected"  
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CHANGED_FILES" | grep -E "^shared" >/dev/null; then
            echo "shared=true" >> $GITHUB_OUTPUT
            echo "🔄 Shared package changes detected"
          else
            echo "shared=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json
          
      - name: Validate dependencies
        run: |
          # Quick dependency validation using our custom script
          if [ -f "scripts/validate-dependencies-simple.js" ]; then
            node scripts/validate-dependencies-simple.js
          else
            echo "⚠️ Dependency validation script not found, using fallback"
            # Fallback validation
            node -e "
              const pkg = require('./package.json');
              const problematic = [
                { name: 'madge', version: '6.3.1' },
                { name: '@azure/web-pubsub', version: '1.2.1' }
              ];
              
              for (const dep of problematic) {
                const allDeps = {...pkg.dependencies, ...pkg.devDependencies};
                if (allDeps[dep.name]?.includes(dep.version)) {
                  console.error(\`❌ Invalid dependency: \${dep.name}@\${dep.version}\`);
                  process.exit(1);
                }
              }
              console.log('✅ Dependencies validated');
            "
          fi

  # Comprehensive backend testing and building
  backend-pipeline:
    name: 🚀 Backend Pipeline
    runs-on: ubuntu-latest
    needs: quick-validation
    if: always() && (needs.quick-validation.outputs.has-backend-changes == 'true' || needs.quick-validation.outputs.has-shared-changes == 'true' || github.event.inputs.skip_tests != 'true')
    timeout-minutes: 15
    outputs:
      build-success: ${{ steps.build-status.outputs.success }}
      coverage: ${{ steps.coverage.outputs.percentage }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js with enhanced caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
            shared/package-lock.json
          
      - name: Cache backend dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            backend/node_modules
            shared/node_modules
            node_modules
          key: ${{ runner.os }}-backend-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/package-lock.json', 'shared/package-lock.json', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-backend-
            
      - name: Install dependencies
        run: |
          npm ci --ignore-scripts --prefer-offline
          npm run install:backend --if-present || echo "Using workspace setup"
        
      - name: Lint backend code
        run: |
          echo "🔍 Running backend linting..."
          npm run lint:backend
        
      - name: Type check backend
        run: |
          echo "🔍 Running backend type checking..."
          npm run type-check:backend
        
      - name: Build shared package
        run: |
          echo "📦 Building shared package..."
          npm run build:shared
        
      - name: Run backend unit tests with coverage
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "🧪 Running backend unit tests..."
          cd backend
          npm run test:ci
        
      - name: Check test coverage
        if: github.event.inputs.skip_tests != 'true'
        id: coverage
        run: |
          COVERAGE=$(node -e "
            try {
              const r=require('./backend/coverage/coverage-summary.json');
              console.log(Math.round(r.total.lines.pct));
            } catch(e) {
              console.log('0');
            }
          ")
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "📊 Backend coverage: $COVERAGE%"
          
          if (( COVERAGE < ${{ env.COVERAGE_THRESHOLD }} )); then
            echo "❌ Coverage $COVERAGE% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          else
            echo "✅ Coverage threshold met"
          fi
          
      - name: Run backend integration tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "🔗 Running backend integration tests..."
          cd backend
          npm run test:integration || echo "⚠️ Integration tests failed or not configured"
          
      - name: Build backend
        id: build-status
        run: |
          echo "🏗️ Building backend..."
          npm run build:backend
          echo "success=true" >> $GITHUB_OUTPUT
        
      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main' && steps.build-status.outputs.success == 'true'
        with:
          name: backend-dist-${{ github.sha }}
          path: backend/dist
          retention-days: 7
          compression-level: 6
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: github.event.inputs.skip_tests != 'true'
        with:
          name: backend-coverage-${{ github.sha }}
          path: backend/coverage
          retention-days: 5

  # Comprehensive frontend testing and building
  frontend-pipeline:
    name: 🌐 Frontend Pipeline
    runs-on: ubuntu-latest
    needs: quick-validation
    if: always() && (needs.quick-validation.outputs.has-frontend-changes == 'true' || needs.quick-validation.outputs.has-shared-changes == 'true' || github.event.inputs.skip_tests != 'true')
    timeout-minutes: 12
    outputs:
      build-success: ${{ steps.build-status.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js with enhanced caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            shared/package-lock.json
            
      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/node_modules
            frontend/.next/cache
            shared/node_modules
            node_modules
          key: ${{ runner.os }}-frontend-${{ env.CACHE_VERSION }}-${{ hashFiles('frontend/package-lock.json', 'shared/package-lock.json', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-frontend-
            
      - name: Install dependencies
        run: |
          npm ci --ignore-scripts --prefer-offline
          npm run install:frontend --if-present || echo "Using workspace setup"
        
      - name: Lint frontend code
        run: |
          echo "🔍 Running frontend linting..."
          npm run lint:frontend
        
      - name: Type check frontend
        run: |
          echo "🔍 Running frontend type checking..."
          npm run type-check:frontend
        
      - name: Build shared package
        run: |
          echo "📦 Building shared package..."
          npm run build:shared
        
      - name: Run frontend unit tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "🧪 Running frontend unit tests..."
          cd frontend
          npm run test -- --watchAll=false --coverage --maxWorkers=2
        
      - name: Build frontend
        id: build-status
        run: |
          echo "🏗️ Building frontend..."
          npm run build:frontend
          echo "success=true" >> $GITHUB_OUTPUT
        
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main' && steps.build-status.outputs.success == 'true'
        with:
          name: frontend-dist-${{ github.sha }}
          path: |
            frontend/.next
            frontend/out
          retention-days: 7
          compression-level: 6

  # E2E tests with backend service running
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-pipeline, frontend-pipeline]
    if: always() && (github.event.inputs.run_e2e == 'true' || (github.ref == 'refs/heads/main' && github.event.inputs.skip_tests != 'true'))
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          
      - name: Install dependencies
        run: npm ci --ignore-scripts
        
      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install chromium --with-deps
        
      - name: Build shared package
        run: npm run build:shared
        
      - name: Start backend service for E2E
        run: |
          echo "🚀 Starting backend service..."
          cd backend
          npm run build
          # Use CI-friendly start command that doesn't block
          timeout 60s npm run func:start:ci &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          sleep 15 # Wait for backend to be ready
        
      - name: Start frontend service for E2E
        run: |
          echo "🌐 Starting frontend service..."
          cd frontend
          npm run build
          npm run start &
          FRONTEND_PID=$!
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
          sleep 10 # Wait for frontend to be ready
        
      - name: Wait for services to be ready
        run: |
          echo "⏳ Waiting for services to be ready..."
          # Wait for backend
          for i in {1..12}; do
            if curl -f -s http://localhost:7071/api/health > /dev/null 2>&1; then
              echo "✅ Backend is ready"
              break
            fi
            echo "⏳ Waiting for backend... (attempt $i/12)"
            sleep 5
          done
          
          # Wait for frontend
          for i in {1..12}; do
            if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Frontend is ready"
              break
            fi
            echo "⏳ Waiting for frontend... (attempt $i/12)"
            sleep 5
          done
        
      - name: Run E2E tests
        run: |
          echo "🎭 Running E2E tests..."
          cd frontend
          E2E_TEST_URL=http://localhost:3000 npm run test:e2e
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ github.sha }}
          path: |
            frontend/playwright-report/
            frontend/e2e/test-results/
          retention-days: 5
        
      - name: Cleanup services
        if: always()
        run: |
          echo "🧹 Cleaning up services..."
          if [ -n "$BACKEND_PID" ]; then
            kill $BACKEND_PID 2>/dev/null || true
          fi
          if [ -n "$FRONTEND_PID" ]; then
            kill $FRONTEND_PID 2>/dev/null || true
          fi

  # Enhanced security scanning with conditional execution
  security-scan:
    name: 🔒 Security & Quality Scan
    runs-on: ubuntu-latest
    needs: quick-validation
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    timeout-minutes: 8
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          
      - name: Install dependencies (security scan only)
        run: npm ci --ignore-scripts --audit-level moderate
        
      - name: Run secret detection
        run: |
          echo "🔍 Running secret detection..."
          if [ -f "scripts/check-secrets.sh" ]; then
            chmod +x scripts/check-secrets.sh
            ./scripts/check-secrets.sh $(find . -name "*.ts" -o -name "*.js" -o -name "*.tsx" -o -name "*.jsx" | grep -v node_modules | head -20)
          else
            echo "⚠️ Secret detection script not found"
          fi
        
      - name: NPM security audit
        run: |
          echo "🛡️ Running NPM security audit..."
          npm audit --audit-level high --omit=dev || echo "⚠️ Some vulnerabilities found in audit"
        
      - name: Check for circular dependencies
        run: |
          echo "🔄 Checking for circular dependencies..."
          npm run lint:arch || echo "⚠️ Circular dependency check failed or not configured"

  # Comprehensive quality gate with detailed reporting
  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [quick-validation, backend-pipeline, frontend-pipeline, security-scan]
    if: always()
    timeout-minutes: 5
    outputs:
      pipeline-status: ${{ steps.final-status.outputs.status }}
    steps:
      - name: Check pipeline status
        id: final-status
        run: |
          echo "📊 Quality Gate Results:"
          echo "========================"
          
          # Check backend pipeline
          if [[ "${{ needs.backend-pipeline.result }}" == "success" || "${{ needs.backend-pipeline.result }}" == "skipped" ]]; then
            echo "✅ Backend Pipeline: PASSED"
            BACKEND_OK=true
          else
            echo "❌ Backend Pipeline: FAILED"
            BACKEND_OK=false
          fi
          
          # Check frontend pipeline
          if [[ "${{ needs.frontend-pipeline.result }}" == "success" || "${{ needs.frontend-pipeline.result }}" == "skipped" ]]; then
            echo "✅ Frontend Pipeline: PASSED"
            FRONTEND_OK=true
          else
            echo "❌ Frontend Pipeline: FAILED"
            FRONTEND_OK=false
          fi
          
          # Check security scan (allowed to fail)
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ Security Scan: PASSED"
          else
            echo "⚠️ Security Scan: FAILED (non-blocking)"
          fi
          
          # Coverage information
          if [[ -n "${{ needs.backend-pipeline.outputs.coverage }}" ]]; then
            echo "📊 Backend Coverage: ${{ needs.backend-pipeline.outputs.coverage }}%"
          fi
          
          echo "========================"
          
          # Final decision
          if [[ "$BACKEND_OK" == "true" && "$FRONTEND_OK" == "true" ]]; then
            echo "🎉 ALL QUALITY GATES PASSED"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "💥 QUALITY GATES FAILED"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Status reporting for better visibility
  status-report:
    name: 📊 Pipeline Status Report
    runs-on: ubuntu-latest
    needs: [quality-gate, e2e-tests, backend-pipeline, frontend-pipeline, security-scan]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Generate status report
        run: |
          echo "## 🚀 VCarpool CI Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.backend-pipeline.result == 'success' && '✅ Success' || needs.backend-pipeline.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Coverage: ${{ needs.backend-pipeline.outputs.coverage || 'N/A' }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.frontend-pipeline.result == 'success' && '✅ Success' || needs.frontend-pipeline.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Build: ${{ needs.frontend-pipeline.outputs.build-success == 'true' && 'Success' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Success' || needs.e2e-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ github.event.inputs.run_e2e == 'true' && 'Manual trigger' || 'Auto run' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-scan.result == 'success' && '✅ Success' || '⚠️ Issues found' }} | Non-blocking |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.quality-gate.outputs.pipeline-status }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Ready for deployment!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚫 **Deployment blocked - fix issues above**" >> $GITHUB_STEP_SUMMARY
          fi 