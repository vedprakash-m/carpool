name: Cost-Optimized Performance & Security

on:
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - "shared/**"
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**" 
      - "shared/**"
  schedule:
    - cron: "0 6 * * 1" # Weekly on Monday at 6 AM UTC (off-peak)
  workflow_dispatch:

env:
  NODE_VERSION: "20"

jobs:
  # Lightweight performance testing (runs on PR and main)
  quick-performance-check:
    name: Quick Performance Check
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Start backend for testing
        run: |
          cd backend
          npm run func:start:ci &
          npx wait-port 7071 --timeout 60000
        env:
          OTEL_ENABLED: "false"

      - name: Quick performance test (lightweight)
        run: |
          cd backend
          # Light test: 5 VUs for 30 seconds
          PERF_VUS=5 PERF_DURATION_SEC=30 PERF_LATENCY_MS=250 npm run perf:phase2 || echo "‚ö†Ô∏è Performance test failed"
        continue-on-error: true

  # Essential security scanning (optimized for free tier)
  security-essentials:
    name: Essential Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Custom secret detection (free)
        run: |
          if [ -f "scripts/check-secrets.sh" ]; then
            chmod +x scripts/check-secrets.sh
            ./scripts/check-secrets.sh $(find . -type f -name "*.js" -o -name "*.ts" -o -name "*.tsx" | grep -v node_modules | head -10)
          else
            echo "‚ö†Ô∏è Secret detection script not found"
          fi

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: npm audit (free)
        run: |
          npm audit --audit-level moderate || echo "‚ö†Ô∏è Vulnerabilities found - review recommended"

      - name: Dependency validation
        run: |
          node scripts/validate-dependencies.js || echo "‚ö†Ô∏è Dependency issues found"

  # Weekly comprehensive testing (scheduled to minimize cost)
  weekly-comprehensive-tests:
    name: Weekly Deep Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Start backend
        run: |
          cd backend
          npm run func:start:ci &
          npx wait-port 7071 --timeout 60000
        env:
          OTEL_ENABLED: "false"

      - name: Install k6 (for load testing)
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Comprehensive performance test
        run: |
          cd backend
          # More thorough test weekly: 25 VUs for 2 minutes
          PERF_VUS=25 PERF_DURATION_SEC=120 PERF_LATENCY_MS=150 npm run perf:phase2

      - name: Start frontend for testing
        run: |
          cd frontend
          npm run dev &
          npx wait-port 3000 --timeout 60000

      - name: Accessibility check (free tool)
        run: |
          cd frontend
          npm install -g @axe-core/cli
          axe http://localhost:3000 --exit || echo "‚ö†Ô∏è Accessibility issues found"
        continue-on-error: true

      - name: Bundle size analysis
        run: |
          cd frontend
          npm run build
          
          # Simple bundle size check
          BUILD_SIZE=$(du -sh .next/static | cut -f1)
          echo "üì¶ Build size: $BUILD_SIZE"
          
          # Alert if build is too large (basic check)
          if [ "$(du -s .next/static | cut -f1)" -gt 10000 ]; then
            echo "‚ö†Ô∏è Build size is large - consider optimization"
          fi

  # Basic compliance check (free)
  compliance-check:
    name: Basic Compliance
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: GDPR compliance check
        run: |
          echo "üîí Checking basic GDPR compliance..."
          
          # Check for data handling patterns
          if grep -r "personal.*data\|PII\|sensitive" --include="*.ts" --include="*.js" backend/src/ > /dev/null; then
            echo "‚ö†Ô∏è Found potential PII handling - ensure GDPR compliance"
            echo "Files to review:"
            grep -r "personal.*data\|PII\|sensitive" --include="*.ts" --include="*.js" backend/src/ | head -5
          else
            echo "‚úÖ No obvious PII handling found"
          fi

      - name: Basic security patterns check
        run: |
          echo "üõ°Ô∏è Checking basic security patterns..."
          
          # Check for common security issues
          ISSUES=0
          
          if grep -r "password.*=.*['\"]" --include="*.ts" --include="*.js" . > /dev/null; then
            echo "‚ö†Ô∏è Hardcoded passwords might be present"
            ISSUES=$((ISSUES + 1))
          fi
          
          if grep -r "api.*key.*=.*['\"]" --include="*.ts" --include="*.js" . > /dev/null; then
            echo "‚ö†Ô∏è Hardcoded API keys might be present"
            ISSUES=$((ISSUES + 1))
          fi
          
          if [ $ISSUES -eq 0 ]; then
            echo "‚úÖ No obvious security issues found"
          else
            echo "‚ö†Ô∏è Found $ISSUES potential security issues"
          fi

  # Summary report
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [quick-performance-check, security-essentials]
    if: always()
    steps:
      - name: Generate cost-optimized quality report
        run: |
          echo "üìä Cost-Optimized Quality Report"
          echo "================================="
          echo "Date: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo ""
          
          if [[ "${{ needs.quick-performance-check.result }}" == "success" ]]; then
            echo "‚úÖ Performance: PASSED (quick check)"
          elif [[ "${{ needs.quick-performance-check.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è Performance: SKIPPED"
          else
            echo "‚ö†Ô∏è Performance: NEEDS ATTENTION"
          fi
          
          if [[ "${{ needs.security-essentials.result }}" == "success" ]]; then
            echo "‚úÖ Security: PASSED (essential checks)"
          else
            echo "‚ö†Ô∏è Security: NEEDS ATTENTION"
          fi
          
          echo ""
          echo "üí° Cost Optimization Notes:"
          echo "- Using lightweight performance tests on PR/push"
          echo "- Comprehensive testing scheduled weekly"
          echo "- Using free security tools where possible"
          echo "- Single region deployment to minimize costs"
          echo ""
          echo "üìÖ Next comprehensive test: Monday 6 AM UTC"
