name: Deploy with Validation

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**" 
      - "shared/**"
      - "infra/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      blue_green:
        description: 'Use blue-green deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "20"
  AZURE_LOCATION: "eastus"

permissions:
  contents: read
  id-token: write

jobs:
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      deploy-backend: ${{ steps.changes.outputs.backend }}
      deploy-frontend: ${{ steps.changes.outputs.frontend }}
      deploy-infra: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Determine deployment environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
          
      - name: Check for changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 | grep -E "^(backend|shared)/"; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 | grep -E "^(frontend|shared)/"; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 | grep -E "^infra/"; then
            echo "infra=true" >> $GITHUB_OUTPUT
          else
            echo "infra=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate environment variables
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          REQUIRED_VARS=(
            "AZURE_CLIENT_ID"
            "AZURE_TENANT_ID" 
            "AZURE_SUBSCRIPTION_ID"
          )
          
          for var in "${REQUIRED_VARS[@]}"; do
            if [[ -z "${!var}" ]]; then
              echo "‚ùå Required secret $var is not set"
              exit 1
            fi
          done
          echo "‚úÖ All required environment variables are set"

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.deploy-infra == 'true'
    environment: ${{ needs.pre-deployment-checks.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy database resources
        run: |
          echo "üóÑÔ∏è Deploying database infrastructure..."
          az deployment group create \
            --resource-group vcarpool-db-rg \
            --template-file infra/database.bicep \
            --parameters @infra/database.parameters.json \
            --mode Incremental \
            --verbose

      - name: Deploy compute resources
        run: |
          echo "‚ö° Deploying compute infrastructure..."
          az deployment group create \
            --resource-group vcarpool-rg \
            --template-file infra/main-compute.bicep \
            --parameters @infra/main-compute.parameters.json \
            --parameters databaseResourceGroup=vcarpool-db-rg \
            --mode Incremental \
            --verbose

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-infrastructure]
    if: always() && (needs.pre-deployment-checks.outputs.deploy-backend == 'true')
    environment: ${{ needs.pre-deployment-checks.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Azure Functions Core Tools
        run: npm install -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Install dependencies and build
        run: |
          npm ci --ignore-scripts
          npm run build:shared
          npm run build:backend

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Functions
        run: |
          cd backend
          
          if [[ "${{ github.event.inputs.blue_green }}" == "true" ]]; then
            echo "üîÑ Deploying to staging slot..."
            func azure functionapp publish vcarpool-api --slot staging --typescript
            
            echo "‚è≥ Waiting for slot warmup..."
            sleep 30
            
            echo "üîÑ Swapping slots..."
            az functionapp deployment slot swap \
              --resource-group vcarpool-rg \
              --name vcarpool-api \
              --slot staging \
              --target-slot production
          else
            echo "üöÄ Direct deployment to production..."
            func azure functionapp publish vcarpool-api --typescript
          fi

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-infrastructure]
    if: always() && (needs.pre-deployment-checks.outputs.deploy-frontend == 'true')
    environment: ${{ needs.pre-deployment-checks.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies and build
        run: |
          npm ci --ignore-scripts
          npm run build:shared
          npm run build:frontend

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend"
          api_location: ""
          output_location: ".next"

  post-deployment-validation:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    environment: ${{ needs.pre-deployment-checks.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Health check
        run: |
          echo "üè• Running health checks..."
          
          # Backend health check
          for i in {1..10}; do
            if curl -f https://vcarpool-api.azurewebsites.net/api/health; then
              echo "‚úÖ Backend health check passed"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "‚ùå Backend health check failed after 10 attempts"
              exit 1
            fi
            echo "‚è≥ Attempt $i failed, waiting 30 seconds..."
            sleep 30
          done
          
          # Frontend health check
          if curl -f https://vcarpool.azurestaticapps.net; then
            echo "‚úÖ Frontend health check passed"
          else
            echo "‚ùå Frontend health check failed"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          echo "üö¨ Running smoke tests..."
          cd frontend
          npm run test:e2e:smoke || echo "‚ö†Ô∏è Smoke tests failed - monitoring required"
        continue-on-error: true

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, post-deployment-validation]
    if: failure() && github.event.inputs.blue_green == 'true'
    environment: ${{ needs.pre-deployment-checks.outputs.environment }}
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Rollback deployment
        run: |
          echo "üîô Rolling back failed deployment..."
          az functionapp deployment slot swap \
            --resource-group vcarpool-rg \
            --name vcarpool-api \
            --slot production \
            --target-slot staging
          echo "‚úÖ Rollback completed"
