name: vCarpool CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod

env:
  NODE_VERSION: '18.x'
  AZURE_FUNCTIONAPP_NAME: 'vcarpool-api'
  AZURE_STATICWEBAPP_NAME: 'vcarpool-web'
  BACKEND_WORKING_DIR: './backend'
  FRONTEND_WORKING_DIR: './frontend'
  SHARED_WORKING_DIR: './shared'
  INFRASTRUCTURE_WORKING_DIR: './infra'

jobs:
  # Determine deployment environment
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      resource-group: ${{ steps.env.outputs.resource-group }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "resource-group=vcarpool-rg-dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "resource-group=vcarpool-rg-dev" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=test" >> $GITHUB_OUTPUT
            echo "resource-group=vcarpool-rg-dev" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "resource-group=vcarpool-rg-dev" >> $GITHUB_OUTPUT
          fi

  # Build and test shared library
  shared-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.SHARED_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json # Root workspace lock file
      - name: Install dependencies
        run: npm ci
        working-directory: ./ # Install from root for workspace
      - name: Build shared library
        run: npm run build
      - name: Run tests
        run: npm test
        working-directory: ./shared # Run from shared directory
      - name: Upload shared artifacts
        uses: actions/upload-artifact@v4
        with:
          name: shared-dist
          path: ${{ env.SHARED_WORKING_DIR }}/dist

  # Build and test backend
  backend-build:
    needs: shared-build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.BACKEND_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json # Root workspace lock file
      - name: Download shared artifacts
        uses: actions/download-artifact@v4
        with:
          name: shared-dist
          path: ${{ env.SHARED_WORKING_DIR }}/dist
      # Backend's dependencies are installed via workspace root
      - name: Install workspace dependencies
        run: npm ci
        working-directory: ./ # Install from root for workspace
      - name: Lint backend code
        run: npm run lint
      - name: Build backend
        run: npm run build
      - name: Verify environment health
        run: |
          cd ${{ github.workspace }}
          bash scripts/health-check.sh
          
      - name: Run backend tests
        run: |
          # Ensure test directories exist
          mkdir -p coverage
          
          # Run tests with CI reporter
          npm run test:ci
        working-directory: ${{ env.BACKEND_WORKING_DIR }}
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: ${{ env.BACKEND_WORKING_DIR }}/dist

  # Build and test frontend
  frontend-build:
    needs: shared-build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.FRONTEND_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json # Root workspace lock file
      - name: Download shared artifacts
        uses: actions/download-artifact@v4
        with:
          name: shared-dist
          path: ${{ env.SHARED_WORKING_DIR }}/dist # Places artifact at $GITHUB_WORKSPACE/shared/dist
      # Frontend dependencies are installed via workspace root
      - name: Install workspace dependencies
        run: npm ci
        working-directory: ./ # Install from root for workspace
      - name: Lint frontend code
        run: npm run lint
      - name: Build frontend for Azure Static Web Apps
        run: |
          echo "Starting Next.js build for Azure Static Web Apps..."
          echo "NODE_ENV=${NODE_ENV}"
          
          # Use regular Next.js build for Azure Static Web Apps (supports hybrid static/SSR)
          if npm run build; then
            echo "✅ Build completed successfully"
          else
            echo "❌ Build failed, checking for partial output..."
            exit 1
          fi
        env:
          NODE_ENV: production
      - name: Debug - List build output
        run: |
          echo "=== Contents of frontend directory after build ==="
          ls -la
          echo "=== Checking for out directory (static export) ==="
          if [ -d "out" ]; then
            echo "✅ out directory exists (static export)"
            ls -la out/ | head -20
            echo "Total files in out: $(find out -type f | wc -l)"
          else
            echo "❌ out directory not found"
          fi
          echo "=== Checking for .next directory ==="
          if [ -d ".next" ]; then
            echo "✅ .next directory exists"
            ls -la .next/ | head -10
            if [ -d ".next/standalone" ]; then
              echo "Found .next/standalone directory"
              ls -la .next/standalone/ | head -10
            fi
            if [ -d ".next/static" ]; then
              echo "Found .next/static directory"
              ls -la .next/static/ | head -5
            fi
          else
            echo "❌ .next directory not found"
          fi
          echo "=== All directories in frontend ==="
          find . -maxdepth 2 -type d | sort
          echo "=== Looking for any HTML files ==="
          find . -name "*.html" -type f | head -10
      - name: Run Jest unit tests # Clarified name
        run: npm test
        working-directory: ${{ env.FRONTEND_WORKING_DIR }}
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: ${{ env.FRONTEND_WORKING_DIR }}
      - name: Run Playwright E2E tests
        run: |
          mkdir -p e2e/test-results
          # Retry the E2E tests up to 2 times if they fail
          for i in {1..3}; do
            echo "Attempt $i of 3 running E2E tests"
            if npm run test:e2e:ci; then
              echo "✅ E2E tests passed"
              break
            else
              echo "❌ E2E tests failed on attempt $i"
              if [ $i -lt 3 ]; then
                echo "Waiting 30 seconds before retrying..."
                sleep 30
              else
                echo "::error::E2E tests failed after 3 attempts"
                # Don't fail the build on E2E test failures during development, just log the error
                # Remove this condition in production if you want to fail builds on E2E test failures
                if [[ "${{ needs.setup.outputs.environment }}" == "prod" ]]; then
                  exit 1
                fi
              fi
            fi
          done
          echo "::group::Test Summary"
          if [ -f playwright-report/results.json ]; then
            echo "Total Tests: $(jq '.suites[0].specs | length' playwright-report/results.json)"
            echo "Passed: $(jq '.suites[0].specs | map(select(.ok == true)) | length' playwright-report/results.json)"
            echo "Failed: $(jq '.suites[0].specs | map(select(.ok == false)) | length' playwright-report/results.json)"
          else
            echo "No results.json file found. Tests may not have completed."
          fi
          echo "::endgroup::"
        working-directory: ${{ env.FRONTEND_WORKING_DIR }}
        env:
          CI: true
      - name: Upload Playwright report
        if: always() # Upload report even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ${{ env.FRONTEND_WORKING_DIR }}/playwright-report/
          retention-days: 30
      - name: Prepare artifacts for upload
        run: |
          echo "Preparing frontend artifacts..."
          
          # Create a consistent artifacts directory
          mkdir -p frontend-artifacts
          
          # For Azure Static Web Apps, use the standard Next.js build output
          if [ -d ".next" ]; then
            echo "✅ Using Next.js build output from '.next' directory"
            # Azure Static Web Apps expects the entire .next directory for hybrid apps
            cp -r .next frontend-artifacts/
            # Also copy other necessary files
            cp package.json frontend-artifacts/ 2>/dev/null || true
            cp next.config.js frontend-artifacts/ 2>/dev/null || true
            # Copy public assets
            if [ -d "public" ]; then
              cp -r public frontend-artifacts/
            fi
            echo "artifact_source=next-build" >> $GITHUB_ENV
          else
            echo "❌ No .next build output found"
            exit 1
          fi
          
          echo "=== Final artifacts directory ==="
          ls -la frontend-artifacts/
          echo "Total artifact files: $(find frontend-artifacts -type f | wc -l)"
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-dist
          path: ${{ env.FRONTEND_WORKING_DIR }}/frontend-artifacts
          if-no-files-found: error

  # Security checks
  security-checks:
    needs: [shared-build, backend-build, frontend-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better secret detection
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run secret detection
        run: |
          # Ensure scripts directory exists and script is executable
          if [ ! -f "scripts/check-secrets.sh" ]; then
            echo "❌ scripts/check-secrets.sh not found"
            ls -la scripts/ || echo "scripts directory not found"
            # Fallback: basic secret patterns
            echo "🔄 Running fallback secret detection..."
            grep -r -E "(password|secret|key|token)" --include="*.js" --include="*.ts" --include="*.tsx" --include="*.json" . | grep -v node_modules | head -10 || echo "No obvious secrets found in basic scan"
            exit 1
          fi
          
          chmod +x scripts/check-secrets.sh
          echo "✅ Running custom secret detection..."
          if ./scripts/check-secrets.sh $(find . -type f -name "*.js" -o -name "*.ts" -o -name "*.tsx" -o -name "*.json" -o -name "*.yaml" -o -name "*.yml" | head -20); then
            echo "✅ Secret detection passed"
          else
            echo "❌ Secret detection found issues"
            # Don't fail the pipeline on secret detection in development
            if [[ "${{ needs.setup.outputs.environment }}" == "prod" ]]; then
              exit 1
            else
              echo "⚠️ Secret detection issues found but not failing build in development environment"
            fi
          fi
      
      - name: Run dependency audit
        run: |
          echo "## NPM Audit Results" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=moderate --production 2>&1 | tee audit-results.txt || true
          
          if grep -q "found.*vulnerabilities" audit-results.txt; then
            echo "⚠️ Vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat audit-results.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Security summary
        run: |
          echo "## 🔒 Security Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Secret detection completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Dependency audit completed" >> $GITHUB_STEP_SUMMARY
          echo "📋 Review any security alerts in the Security tab" >> $GITHUB_STEP_SUMMARY

  # Deploy infrastructure
  infrastructure-deploy:
    needs: [setup, shared-build, backend-build, frontend-build, security-checks]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    outputs:
      functionAppName: ${{ steps.deploy.outputs.functionAppName }}
      staticWebAppName: ${{ steps.deploy.outputs.staticWebAppName }}
      functionAppEndpoint: ${{ steps.deploy.outputs.functionAppEndpoint }}
      staticWebAppEndpoint: ${{ steps.deploy.outputs.staticWebAppEndpoint }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ needs.setup.outputs.resource-group }} \
            --location "East US 2"
      
      - name: Deploy Azure Infrastructure
        id: deploy
        run: |
          cd ${{ env.INFRASTRUCTURE_WORKING_DIR }}
          
          # Deploy Bicep template with improved error handling
          max_attempts=5
          for i in $(seq 1 $max_attempts); do
            echo "Attempting infrastructure deployment (Attempt: $i of $max_attempts)"
            
            if deployment_output=$(az deployment group create \
              --resource-group ${{ needs.setup.outputs.resource-group }} \
              --template-file core-infrastructure.bicep \
              --parameters environmentName=${{ needs.setup.outputs.environment }} \
                          appName=vcarpool \
              --name core-infra-${{ needs.setup.outputs.environment }} \
              --query 'properties.outputs' \
              --output json); then
              echo "✅ Core infrastructure deployment successful"
              
              # Extract outputs and set as step outputs
              echo "functionAppName=$(echo $deployment_output | jq -r '.functionAppName.value // empty')" >> $GITHUB_OUTPUT
              echo "staticWebAppName=$(echo $deployment_output | jq -r '.staticWebAppName.value // empty')" >> $GITHUB_OUTPUT
              echo "functionAppEndpoint=$(echo $deployment_output | jq -r '.functionAppEndpoint.value // empty')" >> $GITHUB_OUTPUT
              echo "staticWebAppEndpoint=$(echo $deployment_output | jq -r '.staticWebAppEndpoint.value // empty')" >> $GITHUB_OUTPUT
              
              break
            else
              echo "❌ Deployment attempt $i failed"
              if [ $i -lt 3 ]; then
                echo "Waiting 60 seconds before retrying..."
                sleep 60
              fi
            fi
          done
          
          # Extract outputs and set as step outputs
          echo "functionAppName=$(echo $deployment_output | jq -r '.functionAppName.value // empty')" >> $GITHUB_OUTPUT
          echo "staticWebAppName=$(echo $deployment_output | jq -r '.staticWebAppName.value // empty')" >> $GITHUB_OUTPUT
          echo "functionAppEndpoint=$(echo $deployment_output | jq -r '.functionAppEndpoint.value // empty')" >> $GITHUB_OUTPUT
          echo "staticWebAppEndpoint=$(echo $deployment_output | jq -r '.staticWebAppEndpoint.value // empty')" >> $GITHUB_OUTPUT
          
          echo "Infrastructure deployment completed successfully"
      
      - name: Configure Key Vault Secrets
        run: |
          # Check if Key Vault exists (only for full infrastructure deployments)
          KEY_VAULT_NAME="vcarpool-kv-${{ needs.setup.outputs.environment }}"
          
          if az keyvault show --name $KEY_VAULT_NAME >/dev/null 2>&1; then
            echo "✅ Key Vault found: $KEY_VAULT_NAME"
            
            # Check if secrets exist, if not create them
            if ! az keyvault secret show --vault-name $KEY_VAULT_NAME --name JWT-SECRET >/dev/null 2>&1; then
              JWT_SECRET=$(openssl rand -base64 64)
              az keyvault secret set --vault-name $KEY_VAULT_NAME --name JWT-SECRET --value "$JWT_SECRET"
            fi
            
            if ! az keyvault secret show --vault-name $KEY_VAULT_NAME --name JWT-REFRESH-SECRET >/dev/null 2>&1; then
              JWT_REFRESH_SECRET=$(openssl rand -base64 64)
              az keyvault secret set --vault-name $KEY_VAULT_NAME --name JWT-REFRESH-SECRET --value "$JWT_REFRESH_SECRET"
            fi
          else
            echo "ℹ️  Key Vault not found: $KEY_VAULT_NAME (using core infrastructure mode with temporary secrets)"
            echo "JWT secrets are configured as Function App environment variables instead"
          fi

  # Deploy backend to Azure Functions
  backend-deploy:
    needs: [setup, infrastructure-deploy]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: ${{ env.BACKEND_WORKING_DIR }}/dist
      
      - name: Download shared artifacts
        uses: actions/download-artifact@v4
        with:
          name: shared-dist
          path: ${{ env.SHARED_WORKING_DIR }}/dist
      
      - name: Install production dependencies
        working-directory: ${{ env.BACKEND_WORKING_DIR }}
        run: |
          npm ci --production
          # Copy shared library
          cp -r ../${{ env.SHARED_WORKING_DIR }}/dist ./node_modules/@vcarpool/
      
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.infrastructure-deploy.outputs.functionAppName }}
          package: ${{ env.BACKEND_WORKING_DIR }}
      
      - name: Health Check
        run: |
          sleep 30
          endpoint="${{ needs.infrastructure-deploy.outputs.functionAppEndpoint }}"
          if [ ! -z "$endpoint" ]; then
            curl -f "$endpoint/health" || echo "Health check endpoint not ready yet"
          fi

  # Deploy frontend to Azure Static Web Apps
  frontend-deploy:
    needs: [setup, infrastructure-deploy]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Azure Static Web Apps (Hybrid Next.js)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "frontend"
          api_location: ""
          output_location: ""
          skip_app_build: false
          skip_api_build: true
        env:
          NODE_VERSION: ${{ env.NODE_VERSION }}
          NEXT_PUBLIC_API_URL: ${{ needs.infrastructure-deploy.outputs.functionAppEndpoint }}/api

  # Post-deployment tests
  integration-tests:
    needs: [setup, infrastructure-deploy, backend-deploy, frontend-deploy]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install test dependencies
        working-directory: ${{ env.BACKEND_WORKING_DIR }}
        run: npm ci
      
      - name: Wait for deployments to be ready
        run: |
          echo "Waiting for services to be fully deployed..."
          sleep 60
      
      - name: Run integration tests
        working-directory: ${{ env.BACKEND_WORKING_DIR }}
        env:
          API_BASE_URL: ${{ needs.infrastructure-deploy.outputs.functionAppEndpoint }}
          FRONTEND_URL: ${{ needs.infrastructure-deploy.outputs.staticWebAppEndpoint }}
        run: |
          if npm run test:integration; then
            echo "✅ Integration tests passed"
          else
            echo "❌ Integration tests failed"
            exit 1
          fi

  # Notify deployment status
  notify:
    needs: [setup, infrastructure-deploy, backend-deploy, frontend-deploy, integration-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group**: ${{ needs.setup.outputs.resource-group }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API**: ${{ needs.infrastructure-deploy.outputs.functionAppEndpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend App**: ${{ needs.infrastructure-deploy.outputs.staticWebAppEndpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure**: ${{ needs.infrastructure-deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: ${{ needs.backend-deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ${{ needs.frontend-deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
