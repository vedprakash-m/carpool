name: VCarpool CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AZURE_LOCATION: "East US"
  ENVIRONMENT: "prod"
  RESOURCE_GROUP: "vcarpool-rg"

jobs:
  # Build and test all applications
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js with caching
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
          cache-dependency-path: package-lock.json

      # Install all dependencies (monorepo) without running scripts
      - name: Install dependencies
        run: npm ci --ignore-scripts

      # Build shared package first (required by backend and frontend)
      - name: Build shared package
        run: npm run build:shared

      # Lint all packages
      - name: Lint backend
        run: npm run lint:backend
        continue-on-error: true

      - name: Lint frontend
        run: npm run lint:frontend
        continue-on-error: true

      # Test all packages
      - name: Test backend
        run: npm run test:backend

      - name: Test frontend
        run: npm run test:frontend

      # Build all packages
      - name: Build backend
        run: npm run build:backend

      - name: Build frontend (Node 20 for Azure SWA)
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm run build:frontend

      # Upload build artifacts
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/
          retention-days: 1

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/
          retention-days: 1

  # Deploy Azure Infrastructure
  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: prod
    outputs:
      function-app-name: ${{ steps.deploy.outputs.functionAppName }}
      static-web-app-name: ${{ steps.deploy.outputs.staticWebAppName }}
      function-app-endpoint: ${{ steps.deploy.outputs.functionAppEndpoint }}
      static-web-app-endpoint: ${{ steps.deploy.outputs.staticWebAppEndpoint }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Create resource group if it doesn't exist
      - name: Create resource group
        run: |
          if ! az group show --name ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "Resource group doesn't exist. Attempting to create..."
            az group create \
              --name ${{ env.RESOURCE_GROUP }} \
              --location "${{ env.AZURE_LOCATION }}" \
              --tags environment=${{ env.ENVIRONMENT }} application=vcarpool || {
              echo "⚠️ Resource group creation failed. Assuming it exists or will be created manually."
              echo "Please ensure resource group '${{ env.RESOURCE_GROUP }}' exists with proper permissions."
            }
          else
            echo "✅ Resource group '${{ env.RESOURCE_GROUP }}' already exists."
          fi

      # Deploy Bicep template
      - name: Deploy infrastructure
        id: deploy
        run: |
          echo "Starting infrastructure deployment..."

          # Compile Bicep to ARM JSON first
          echo "Compiling Bicep template to ARM JSON..."
          az bicep build --file infra/minimal-working.bicep --outfile infra/main-generated.json

          # Deploy using ARM JSON template with unique name
          DEPLOYMENT_NAME="vcarpool-deploy-$(date +%Y%m%d-%H%M%S)"

          echo "Deploying with name: $DEPLOYMENT_NAME"
          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file infra/main-generated.json \
            --parameters appName=vcarpool \
            --parameters environmentName=${{ env.ENVIRONMENT }} \
            --parameters location="${{ env.AZURE_LOCATION }}" \
            --name "$DEPLOYMENT_NAME" \
            --no-wait

          echo "Deployment initiated. Waiting for completion..."
          az deployment group wait \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name "$DEPLOYMENT_NAME" \
            --created \
            --timeout 1800

          echo "Deployment completed. Retrieving outputs..."

          # Get deployment outputs with retry logic
          for i in {1..5}; do
            echo "Attempt $i to retrieve deployment outputs..."
            sleep 10  # Wait before each attempt
            
            DEPLOYMENT_OUTPUT=$(az deployment group show \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name "$DEPLOYMENT_NAME" \
              --query 'properties.outputs' \
              --output json 2>/dev/null || echo "{}")
            
            if [ "$DEPLOYMENT_OUTPUT" != "{}" ] && [ "$DEPLOYMENT_OUTPUT" != "null" ] && [ ! -z "$DEPLOYMENT_OUTPUT" ]; then
              echo "Successfully retrieved deployment outputs"
              break
            else
              echo "Failed to retrieve outputs, retrying..."
            fi
          done

          if [ "$DEPLOYMENT_OUTPUT" = "{}" ] || [ "$DEPLOYMENT_OUTPUT" = "null" ] || [ -z "$DEPLOYMENT_OUTPUT" ]; then
            echo "❌ Failed to retrieve deployment outputs. Using fallback approach..."
            
            # Fallback: Get resource names directly from Azure
            FUNCTION_APP_NAME="vcarpool-api-${{ env.ENVIRONMENT }}"
            STATIC_WEB_APP_NAME="vcarpool-web-${{ env.ENVIRONMENT }}"
            
            # Verify resources exist
            if az functionapp show --name "$FUNCTION_APP_NAME" --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
              echo "✅ Function App found: $FUNCTION_APP_NAME"
            else
              echo "❌ Function App not found: $FUNCTION_APP_NAME"
              exit 1
            fi
            
            if az staticwebapp show --name "$STATIC_WEB_APP_NAME" --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
              echo "✅ Static Web App found: $STATIC_WEB_APP_NAME"
            else
              echo "❌ Static Web App not found: $STATIC_WEB_APP_NAME"
              exit 1
            fi
          else
            echo "Deployment outputs: $DEPLOYMENT_OUTPUT"
            # Extract outputs normally
            FUNCTION_APP_NAME=$(echo $DEPLOYMENT_OUTPUT | jq -r '.functionAppName.value // empty')
            STATIC_WEB_APP_NAME=$(echo $DEPLOYMENT_OUTPUT | jq -r '.staticWebAppName.value // empty')
            FUNCTION_APP_ENDPOINT=$(echo $DEPLOYMENT_OUTPUT | jq -r '.functionAppEndpoint.value // empty')
            STATIC_WEB_APP_ENDPOINT=$(echo $DEPLOYMENT_OUTPUT | jq -r '.staticWebAppEndpoint.value // empty')
          fi

          # Set final outputs
          echo "functionAppName=${FUNCTION_APP_NAME:-vcarpool-api-${{ env.ENVIRONMENT }}}" >> $GITHUB_OUTPUT
          echo "staticWebAppName=${STATIC_WEB_APP_NAME:-vcarpool-web-${{ env.ENVIRONMENT }}}" >> $GITHUB_OUTPUT
          echo "functionAppEndpoint=${FUNCTION_APP_ENDPOINT:-https://${FUNCTION_APP_NAME:-vcarpool-api-${{ env.ENVIRONMENT }}}.azurewebsites.net/api}" >> $GITHUB_OUTPUT
          echo "staticWebAppEndpoint=${STATIC_WEB_APP_ENDPOINT:-https://${STATIC_WEB_APP_NAME:-vcarpool-web-${{ env.ENVIRONMENT }}}.azurestaticapps.net}" >> $GITHUB_OUTPUT

      # Verify deployment
      - name: Verify infrastructure
        run: |
          echo "✅ Infrastructure deployed successfully"
          echo "Function App: ${{ steps.deploy.outputs.functionAppName }}"
          echo "Static Web App: ${{ steps.deploy.outputs.staticWebAppName }}"
          echo "Function Endpoint: ${{ steps.deploy.outputs.functionAppEndpoint }}"
          echo "Static Web Endpoint: ${{ steps.deploy.outputs.staticWebAppEndpoint }}"

  # Deploy Backend (Azure Functions)
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [build, infrastructure]
    if: github.ref == 'refs/heads/main'
    environment: prod
    steps:
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend/

      # Setup Node.js for deployment
      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy to Azure Functions
      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.infrastructure.outputs.function-app-name }}
          package: backend/
          respect-funcignore: true

      # Health check
      - name: Health check
        run: |
          sleep 30
          curl -f "${{ needs.infrastructure.outputs.function-app-endpoint }}/health" || echo "Health check endpoint not ready yet"

  # Deploy Frontend (Azure Static Web Apps)
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [build, infrastructure]
    if: github.ref == 'refs/heads/main'
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/

      # Get Static Web App deployment token
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get SWA deployment token
        id: swa-token
        run: |
          TOKEN=$(az staticwebapp secrets list \
            --name ${{ needs.infrastructure.outputs.static-web-app-name }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query 'properties.apiKey' \
            --output tsv)
          echo "swa-token=$TOKEN" >> $GITHUB_OUTPUT

      # Deploy to Azure Static Web Apps
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.swa-token.outputs.swa-token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "frontend"
          output_location: "frontend/.next"
          skip_app_build: true

  # Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [infrastructure, deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Verify backend health
        run: |
          echo "Testing backend endpoint..."
          curl -f "${{ needs.infrastructure.outputs.function-app-endpoint }}/health" || exit 1

      - name: Verify frontend accessibility
        run: |
          echo "Testing frontend endpoint..."
          curl -f "${{ needs.infrastructure.outputs.static-web-app-endpoint }}" || exit 1

      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group**: ${{ env.RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: ${{ needs.infrastructure.outputs.function-app-endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ${{ needs.infrastructure.outputs.static-web-app-endpoint }}" >> $GITHUB_STEP_SUMMARY
