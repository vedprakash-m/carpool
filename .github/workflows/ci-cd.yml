name: Fast VCarpool CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AZURE_LOCATION: "eastus2"
  ENVIRONMENT: "prod"
  RESOURCE_GROUP: "vcarpool-rg"
  NODE_VERSION: "22"

jobs:
  # Parallel builds for different components
  build-shared:
    name: Build Shared
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # Cache node_modules for faster installs
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            shared/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache TypeScript build
      - name: Cache TypeScript build
        uses: actions/cache@v3
        with:
          path: |
            shared/dist
            shared/.tsbuildinfo
          key: ${{ runner.os }}-shared-build-${{ hashFiles('shared/src/**/*', 'shared/package.json', 'shared/tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-shared-build-

      # Only install root and shared dependencies
      - name: Install dependencies
        run: npm run install:shared

      - name: Build shared
        run: npm run build:shared

      - uses: actions/upload-artifact@v4
        with:
          name: shared-dist
          path: shared/dist/
          retention-days: 1

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: build-shared
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            backend/node_modules
            shared/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache backend build
      - name: Cache backend build
        uses: actions/cache@v3
        with:
          path: |
            backend/dist
            backend/.tsbuildinfo
          key: ${{ runner.os }}-backend-build-${{ hashFiles('backend/src/**/*', 'backend/package.json', 'backend/tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-build-

      - uses: actions/download-artifact@v4
        with:
          name: shared-dist
          path: shared/dist/

      - name: Install dependencies
        run: npm run install:backend

      - name: Build backend
        run: npm run build:backend

      - uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/
          retention-days: 1

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: build-shared
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            shared/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache Next.js build
      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            frontend/.next/cache
            frontend/out
          key: ${{ runner.os }}-nextjs-${{ hashFiles('frontend/**/*', '!frontend/node_modules/**/*') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - uses: actions/download-artifact@v4
        with:
          name: shared-dist
          path: shared/dist/

      - name: Install dependencies
        run: npm run install:frontend

      - name: Build frontend
        run: npm run build:frontend

      - uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/out/
          retention-days: 1

  # Parallel testing
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: build-shared
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            backend/node_modules
            shared/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - uses: actions/download-artifact@v4
        with:
          name: shared-dist
          path: shared/dist/

      - name: Install dependencies
        run: npm run install:backend

      - name: Test backend
        run: npm run test:backend

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: build-shared
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
            shared/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - uses: actions/download-artifact@v4
        with:
          name: shared-dist
          path: shared/dist/

      - name: Install dependencies
        run: npm run install:frontend

      - name: Test frontend
        run: npm run test:frontend

  # Simplified infrastructure (only for main branch)
  infrastructure:
    name: Ensure Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: prod
    outputs:
      function-app-name: ${{ steps.config.outputs.function-app-name }}
      static-web-app-name: ${{ steps.config.outputs.static-web-app-name }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check existing resources
        id: config
        run: |
          # Use existing resource names
          FUNCTION_APP_NAME="vcarpool-api-prod"
          STATIC_WEB_APP_NAME="vcarpool-web-prod"

          # Quick health check for Function App
          if az functionapp show --name "$FUNCTION_APP_NAME" --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "✅ Function App exists: $FUNCTION_APP_NAME"
          else
            echo "❌ Function App missing - will need manual intervention"
            exit 1
          fi

          # Quick health check for Static Web App
          if az staticwebapp show --name "$STATIC_WEB_APP_NAME" --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "✅ Static Web App exists: $STATIC_WEB_APP_NAME"
          else
            echo "❌ Static Web App missing - will need manual intervention"
            exit 1
          fi

          echo "function-app-name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
          echo "static-web-app-name=$STATIC_WEB_APP_NAME" >> $GITHUB_OUTPUT

  # Fast deployments in parallel
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [build-backend, test-backend, infrastructure]
    if: github.ref == 'refs/heads/main'
    environment: prod
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend/

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.infrastructure.outputs.function-app-name }}
          package: backend/
          respect-funcignore: true

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [build-frontend, test-frontend, infrastructure]
    if: github.ref == 'refs/heads/main'
    environment: prod
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend-dist/

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get SWA token
        id: swa-token
        run: |
          # Use the actual Static Web App resource name
          TOKEN=$(az staticwebapp secrets list \
            --name "${{ needs.infrastructure.outputs.static-web-app-name }}" \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query 'properties.apiKey' \
            --output tsv)
          echo "swa-token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.swa-token.outputs.swa-token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "frontend-dist"
          output_location: "."
          skip_app_build: true

  # Quick verification
  verify:
    name: Quick Verify
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Test endpoints
        run: |
          echo "Testing frontend..."
          if curl -f -m 10 "https://lively-stone-016bfa20f.6.azurestaticapps.net/" >/dev/null 2>&1; then
            echo "✅ Frontend accessible"
          else
            echo "⚠️ Frontend check failed"
          fi

          echo "Testing backend..."
          if curl -f -m 10 "https://vcarpool-api-prod.azurewebsites.net/api/health" >/dev/null 2>&1; then
            echo "✅ Backend accessible"
          else
            echo "⚠️ Backend check failed"
          fi

          echo "✅ Deployment verification complete"
