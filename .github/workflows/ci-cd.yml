name: VCarpool CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - test
          - prod

env:
  AZURE_LOCATION: "East US"

jobs:
  # Determine deployment environment and configuration
  setup:
    name: Environment Setup
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      resource-group: ${{ steps.env.outputs.resource-group }}
      should-deploy: ${{ steps.env.outputs.should-deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=test" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

          # Set resource group based on environment
          ENV=$(cat $GITHUB_OUTPUT | grep environment | cut -d'=' -f2)
          echo "resource-group=vcarpool-rg-${ENV}" >> $GITHUB_OUTPUT

          # Only deploy on main, develop, or manual dispatch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/develop" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Build and test all applications
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js with caching
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
          cache-dependency-path: package-lock.json

      # Install all dependencies (monorepo)
      - name: Install dependencies
        run: npm ci

      # Build shared package first
      - name: Build shared package
        run: npm run build:shared

      # Lint all packages
      - name: Lint backend
        run: npm run lint:backend
        continue-on-error: false

      - name: Lint frontend
        run: npm run lint:frontend
        continue-on-error: false

      # Test all packages
      - name: Test backend
        run: npm run test:backend

      - name: Test frontend
        run: npm run test:frontend

      # Build all packages
      - name: Build backend
        run: npm run build:backend

      - name: Build frontend (Node 20 for Azure SWA)
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm run build:frontend

      # Upload build artifacts
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/
          retention-days: 1

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/
          retention-days: 1

  # Deploy Azure Infrastructure
  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    outputs:
      function-app-name: ${{ steps.deploy.outputs.functionAppName }}
      static-web-app-name: ${{ steps.deploy.outputs.staticWebAppName }}
      function-app-endpoint: ${{ steps.deploy.outputs.functionAppEndpoint }}
      static-web-app-endpoint: ${{ steps.deploy.outputs.staticWebAppEndpoint }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Create resource group if it doesn't exist
      - name: Create resource group
        run: |
          az group create \
            --name ${{ needs.setup.outputs.resource-group }} \
            --location "${{ env.AZURE_LOCATION }}" \
            --tags environment=${{ needs.setup.outputs.environment }} application=vcarpool

      # Deploy Bicep template
      - name: Deploy infrastructure
        id: deploy
        run: |
          DEPLOYMENT_OUTPUT=$(az deployment group create \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --template-file infra/main.bicep \
            --parameters appName=vcarpool \
            --parameters environmentName=${{ needs.setup.outputs.environment }} \
            --parameters location="${{ env.AZURE_LOCATION }}" \
            --query 'properties.outputs' \
            --output json)

          echo "Deployment outputs: $DEPLOYMENT_OUTPUT"

          # Extract outputs and set them for next jobs
          FUNCTION_APP_NAME=$(echo $DEPLOYMENT_OUTPUT | jq -r '.functionAppName.value')
          STATIC_WEB_APP_NAME=$(echo $DEPLOYMENT_OUTPUT | jq -r '.staticWebAppName.value')
          FUNCTION_APP_ENDPOINT=$(echo $DEPLOYMENT_OUTPUT | jq -r '.functionAppEndpoint.value')
          STATIC_WEB_APP_ENDPOINT=$(echo $DEPLOYMENT_OUTPUT | jq -r '.staticWebAppEndpoint.value')

          echo "functionAppName=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
          echo "staticWebAppName=$STATIC_WEB_APP_NAME" >> $GITHUB_OUTPUT
          echo "functionAppEndpoint=$FUNCTION_APP_ENDPOINT" >> $GITHUB_OUTPUT
          echo "staticWebAppEndpoint=$STATIC_WEB_APP_ENDPOINT" >> $GITHUB_OUTPUT

      # Verify deployment
      - name: Verify infrastructure
        run: |
          echo "âœ… Infrastructure deployed successfully"
          echo "Function App: ${{ steps.deploy.outputs.functionAppName }}"
          echo "Static Web App: ${{ steps.deploy.outputs.staticWebAppName }}"
          echo "Function Endpoint: ${{ steps.deploy.outputs.functionAppEndpoint }}"
          echo "Static Web Endpoint: ${{ steps.deploy.outputs.staticWebAppEndpoint }}"

  # Deploy Backend (Azure Functions)
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [setup, build, infrastructure]
    if: needs.setup.outputs.should-deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend/

      # Setup Node.js for deployment
      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy to Azure Functions
      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.infrastructure.outputs.function-app-name }}
          package: backend/
          respect-funcignore: true

      # Health check
      - name: Health check
        run: |
          sleep 30
          curl -f "${{ needs.infrastructure.outputs.function-app-endpoint }}/health" || echo "Health check endpoint not ready yet"

  # Deploy Frontend (Azure Static Web Apps)
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [setup, build, infrastructure]
    if: needs.setup.outputs.should-deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/

      # Get Static Web App deployment token
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get SWA deployment token
        id: swa-token
        run: |
          TOKEN=$(az staticwebapp secrets list \
            --name ${{ needs.infrastructure.outputs.static-web-app-name }} \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --query 'properties.apiKey' \
            --output tsv)
          echo "swa-token=$TOKEN" >> $GITHUB_OUTPUT

      # Deploy to Azure Static Web Apps
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.swa-token.outputs.swa-token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "frontend"
          output_location: "frontend/.next"
          skip_app_build: true

  # Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [setup, infrastructure, deploy-backend, deploy-frontend]
    if: needs.setup.outputs.should-deploy == 'true'
    steps:
      - name: Verify backend health
        run: |
          echo "Testing backend endpoint..."
          curl -f "${{ needs.infrastructure.outputs.function-app-endpoint }}/health" || exit 1

      - name: Verify frontend accessibility
        run: |
          echo "Testing frontend endpoint..."
          curl -f "${{ needs.infrastructure.outputs.static-web-app-endpoint }}" || exit 1

      - name: Deployment summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group**: ${{ needs.setup.outputs.resource-group }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: ${{ needs.infrastructure.outputs.function-app-endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ${{ needs.infrastructure.outputs.static-web-app-endpoint }}" >> $GITHUB_STEP_SUMMARY
